# Copyright (c) 2016 by Cohesity, Inc.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
"""
APIs for Cohesity Protection Policy Jobs
"""

import json
import os
import requests
import argparse
from api_executor import CohesityAPIExecutor
from protection_sources import CohesityProtectionSources
from protection_policies import CohesityProtectionPolicy
from platform_view_boxes import CohesityPlatformViewbox


class CohesityProtectionJobs(BaseTask):
    """Cohesity class to do protection job operations."""
    def __init__(self, api_executor, **kwargs):
        self._api = api_executor

    def get_protection_jobs_dict(self, environment_type):
        """API to fetch all protection policies on cohesity platform """

        endpoint = ""
        if environment_type == "kVMware":
            endpoint = "?environments[]=kVMware"
        elif environment_type == "kView":
            endpoint = "?environments[]=kView"
        else:
            endpoint = ""

        get_url = "protectionJobs" + endpoint + '&isDeleted=false'
        response = self._api.execute_api('get', get_url)

        #print "response: %s" %response
        policy_dict = {}
        for this_policy in response:
            key = this_policy['name']
            value = this_policy['id']
            policy_dict[key] = value

        #print "Dictionary of policies: %s" %policy_dict
        return policy_dict

    def get_protection_jobs_names(self, environment_type):
        """API to fetch all protection jobs names on cohesity platform """
        dict = self.get_protection_jobs_dict("kVMware")
        #print dict.keys()
        return dict.keys()

    def create_protection_job(self, vm_names, policy_name, job_name):
        """API to create protection job on cohesity platform """
        # Step 1: Refresh the source inventory to discover newly created VMs
        source_instance = CohesityProtectionSources(self._api)
        source_instance.refresh_vmware_protection_sources()

        # Step 2: Find the id of the new VMs in cohesity sources inventory
        parent_id, vm_entity_id_list = \
          source_instance.get_virtual_machine_entity_id_from_name(vm_names)

        # Step 3: Find the id of the protection policy
        policy_instance = CohesityProtectionPolicy(self._api)
        policy_dict = policy_instance.get_protection_policies_dict("kVMware")
        policy_id = policy_dict[policy_name]
        print "Policy %s has id %s" %(policy_name, policy_id)

        # Step 4: Find the id of the Viewbox we will be creating job in.
        viewbox_instance = CohesityPlatformViewbox(self._api)
        viewbox_dict = viewbox_instance.get_platform_viewbox_dict()
        viewbox_id = viewbox_dict[VIEW_BOX_NAME]
        print "viewbox %s has id %s" %(VIEW_BOX_NAME, viewbox_id)

        # Step 5: Construct the POST call
        job_schema = {
          "name": job_name,
          "description": "Protection job created using Public API by Gagan",
          "policyId": policy_id,
          "viewBoxId": viewbox_id,
          "parentSourceId": parent_id,
          "sourceIds": vm_entity_id_list,
          "dailyStartTime": {
            "minute" : 1,
            "hour" : 1,
           },
          "timezone": "America/Los_Angeles",
        }
        post_url = "protectionJobs"
        response = self._api.execute_api('post', post_url, params=job_schema)
        print "json_data %s" %response

    def update_protection_job(self, vm_names, job_name):
        """API to update protection job with New VMs on cohesity platform """
        # Step 1: Refresh the source inventory
        source_instance = CohesityProtectionSources(self._api)
        source_instance.refresh_vmware_protection_sources()

        # Step 2: Find the id of the new VMs in cohesity sources inventory
        parent_id, vm_entity_id_list = \
          source_instance.get_virtual_machine_entity_id_from_name(vm_names)

        # Step 3: Find the id of this job_name for making GET and PUT calls
        job_dict = self.get_protection_jobs_dict("kVMware")
        job_id = job_dict[job_name]

        # Step 4: Construct the GET call for this job to fetch the job schema
        url = "protectionJobs/" + str(job_id)
        response = self._api.execute_api('get', url)
        print "Got following response %s" %response
        job_schema = response
        #print "Schema of %s is %s " %(job_name, job_schema)

        # Step 5: Add the new VMs to this job schema. (This assumes user is
        # adding VMs from same VC which this job is protecting).
        job_source_array = job_schema["sourceIds"]
        job_parent_id = job_schema["parentSourceId"]
        if job_parent_id != parent_id:
            print "ERROR: User passed VMs from different Source/VC than " + \
              "what this job is protecting."
        merged_source_array = job_source_array + vm_entity_id_list
        job_schema["sourceIds"] = merged_source_array

        # Step 4: Construct the final PUT call to update the job
        response = self._api.execute_api('put', url, params=job_schema)

def GetArgs():
    """
    Supports the command-line arguments listed below.
    """
    parser = argparse.ArgumentParser(
        description='Process args for job based operations')
    parser.add_argument('-o', '--operation', required=True, action='store',
                        help='Operation to be performed on the protection job'+
                        '. Supported operations are create,update,list')
    parser.add_argument('-j', '--job_name', required=False, action='store',
                        help='Name of the protection job to create or update')
    parser.add_argument('-p', '--policy_name', required=False, action='store',
                        help='Password to use when connecting to host')
    parser.add_argument('-v', '--vm_names', required=False,
                        help='Virtual Machines to add in protection job'),
    parser.add_argument('-c', '--host', required=True, action='store',
                        help='Cohesity cluster or node IP')
    parser.add_argument('-u', '--username', required=True, action='store',
                        help='Cohesity cluster username')
    parser.add_argument('-w', '--password', required=True, action='store',
                        help='Cohesity cluster password')
    args = parser.parse_args()
    return args


def main():
    """
    Simple command-line program for managing cohesity protection jobs.
    """

    args = GetArgs()
    hostname = args.host
    username = args.username
    password = args.password

    api_executor = CohesityAPIExecutor(hostname, username, password)
    job_instance = CohesityProtectionJobs(api_executor)

    #print "User passed operation %s" %args.operation
    if args.operation == "list":
        #print "Inside list operation"
        #print job_instance.get_protection_jobs_names("kVMware")
        names = job_instance.get_protection_jobs_names("kVMware")
        string = ""
        for name in names:
          string = string + name + ","
        string = string.rstrip(',')
        print string
    elif args.operation == "create":
        print "Inside create operation"
        return job_instance.create_protection_job(args.vm_names,
                args.policy_name, args.job_name)
    elif args.operation == "update":
        print "Inside create operation"
        return job_instance.update_protection_job(args.vm_names, args.job_name)
    elif args.operation == "createorupdate":
        # First checks if job of that names exists, if not creates it
        # if it exists then updates it
        #print "User agrs: job_name %s policy_name %s vm_names %s" % (job_name,
        #    policy_name, vm_names)
        job_list = job_instance.get_protection_jobs_names("kVMware")
        print "List of exisitng jobs is %s" %job_list
        print "User passed job name is %s" % args.job_name
        if args.job_name in job_list:
            # Job already exists, so just update it
            print "Updating existing job"
            return job_instance.update_protection_job(args.vm_names,
                args.job_name)
        else:
            print "Creating new job"
            return job_instance.create_protection_job(args.vm_names,
                args.policy_name, args.job_name)
    else:
        print "Unsupported operation :%s passed" %args.operation

if __name__ == "__main__":
    main()
