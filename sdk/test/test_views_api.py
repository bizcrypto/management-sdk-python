# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import os
import sys
import unittest

import cohesity
from cohesity.rest import ApiException
from cohesity.apis.views_api import ViewsApi


class TestViewsApi(unittest.TestCase):
    """ ViewsApi unit test stubs """

    def setUp(self):
        self.api = cohesity.apis.views_api.ViewsApi()

    def tearDown(self):
        pass

    def test_clone_directory(self):
        """
        Test case for clone_directory

        Clone a directory of a view.
        """
        pass

    def test_clone_view(self):
        """
        Test case for clone_view

        Clone a View.
        """
        pass

    def test_create_view(self):
        """
        Test case for create_view

        Create a View.
        """
        pass

    def test_create_view_alias(self):
        """
        Test case for create_view_alias

        Create a View Alias. A View Alias allows a directory inside the view to be mounted without specifying the entire path.
        """
        pass

    def test_create_view_user_quota(self):
        """
        Test case for create_view_user_quota

        Create a new quota policy for a user in a view.
        """
        pass

    def test_delete_view(self):
        """
        Test case for delete_view

        Delete a View.
        """
        pass

    def test_delete_view_alias(self):
        """
        Test case for delete_view_alias

        Delete a View Alias.
        """
        pass

    def test_delete_view_users_quota(self):
        """
        Test case for delete_view_users_quota

        Delete the quota policy overrides for users in a view.
        """
        pass

    def test_get_view_by_name(self):
        """
        Test case for get_view_by_name

        List details about a single View.
        """
        pass

    def test_get_view_user_quotas(self):
        """
        Test case for get_view_user_quotas

        Get the quota policies, usage and summary for a view for all its users. It can also fetch the quota policies, usage and summary for a user in all his views.
        """
        pass

    def test_get_views(self):
        """
        Test case for get_views

        List Views filtered by some parameters.
        """
        pass

    def test_get_views_by_share_name(self):
        """
        Test case for get_views_by_share_name

        List shares filtered by name.
        """
        pass

    def test_overwrite_view(self):
        """
        Test case for overwrite_view

        Overwrites a Target view with contents of a Source view.
        """
        pass

    def test_rename_view(self):
        """
        Test case for rename_view

        Rename a View.
        """
        pass

    def test_update_user_quota_settings(self):
        """
        Test case for update_user_quota_settings

        Update the user quota settings in a view.
        """
        pass

    def test_update_view(self):
        """
        Test case for update_view

        Update a View.
        """
        pass

    def test_update_view_user_quota(self):
        """
        Test case for update_view_user_quota

        Update a new quota policy for a user in a view.
        """
        pass


if __name__ == '__main__':
    unittest.main()
