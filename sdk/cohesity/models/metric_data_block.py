# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MetricDataBlock(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, data_point_vec=None, metric_name=None, type=None):
        """
        MetricDataBlock - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data_point_vec': 'list[MetricDataPoint]',
            'metric_name': 'str',
            'type': 'int'
        }

        self.attribute_map = {
            'data_point_vec': 'dataPointVec',
            'metric_name': 'metricName',
            'type': 'type'
        }

        self._data_point_vec = data_point_vec
        self._metric_name = metric_name
        self._type = type

    @property
    def data_point_vec(self):
        """
        Gets the data_point_vec of this MetricDataBlock.
        Specifies a list of metric data points for a time series.

        :return: The data_point_vec of this MetricDataBlock.
        :rtype: list[MetricDataPoint]
        """
        return self._data_point_vec

    @data_point_vec.setter
    def data_point_vec(self, data_point_vec):
        """
        Sets the data_point_vec of this MetricDataBlock.
        Specifies a list of metric data points for a time series.

        :param data_point_vec: The data_point_vec of this MetricDataBlock.
        :type: list[MetricDataPoint]
        """

        self._data_point_vec = data_point_vec

    @property
    def metric_name(self):
        """
        Gets the metric_name of this MetricDataBlock.
        Specifies the name of a metric such as 'kDiskAwaitTimeMsecs'.

        :return: The metric_name of this MetricDataBlock.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """
        Sets the metric_name of this MetricDataBlock.
        Specifies the name of a metric such as 'kDiskAwaitTimeMsecs'.

        :param metric_name: The metric_name of this MetricDataBlock.
        :type: str
        """

        self._metric_name = metric_name

    @property
    def type(self):
        """
        Gets the type of this MetricDataBlock.
        Specifies the data type of the data points. 0 specifies a data point of type Int64. 1 specifies a data point of type Double. 2 specifies a data point of type String. 3 specifies a data point of type Bytes.

        :return: The type of this MetricDataBlock.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this MetricDataBlock.
        Specifies the data type of the data points. 0 specifies a data point of type Int64. 1 specifies a data point of type Double. 2 specifies a data point of type String. 3 specifies a data point of type Bytes.

        :param type: The type of this MetricDataBlock.
        :type: int
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
