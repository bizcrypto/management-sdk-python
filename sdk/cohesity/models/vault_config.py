# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VaultConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, amazon=None, azure=None, bucket_name=None, google=None, nas=None, qstar=None):
        """
        VaultConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'amazon': 'AmazonCloudCredentials',
            'azure': 'AzureCloudCredentials',
            'bucket_name': 'str',
            'google': 'GoogleCloudCredentials',
            'nas': 'NasCredentials',
            'qstar': 'QStarServerCredentials'
        }

        self.attribute_map = {
            'amazon': 'amazon',
            'azure': 'azure',
            'bucket_name': 'bucketName',
            'google': 'google',
            'nas': 'nas',
            'qstar': 'qstar'
        }

        self._amazon = amazon
        self._azure = azure
        self._bucket_name = bucket_name
        self._google = google
        self._nas = nas
        self._qstar = qstar

    @property
    def amazon(self):
        """
        Gets the amazon of this VaultConfig.
        Specifies the cloud credentials to connect to a Amazon service account. Glacier, S3, and S3-compatible clouds use this credential.

        :return: The amazon of this VaultConfig.
        :rtype: AmazonCloudCredentials
        """
        return self._amazon

    @amazon.setter
    def amazon(self, amazon):
        """
        Sets the amazon of this VaultConfig.
        Specifies the cloud credentials to connect to a Amazon service account. Glacier, S3, and S3-compatible clouds use this credential.

        :param amazon: The amazon of this VaultConfig.
        :type: AmazonCloudCredentials
        """

        self._amazon = amazon

    @property
    def azure(self):
        """
        Gets the azure of this VaultConfig.
        Specifies the cloud credentials to connect to a Microsoft Azure service account.

        :return: The azure of this VaultConfig.
        :rtype: AzureCloudCredentials
        """
        return self._azure

    @azure.setter
    def azure(self, azure):
        """
        Sets the azure of this VaultConfig.
        Specifies the cloud credentials to connect to a Microsoft Azure service account.

        :param azure: The azure of this VaultConfig.
        :type: AzureCloudCredentials
        """

        self._azure = azure

    @property
    def bucket_name(self):
        """
        Gets the bucket_name of this VaultConfig.
        Specifies the name of a storage location of the Vault, where objects are stored. For Google and AMS, this storage location is called a bucket. For Microsoft Azure, this storage location is called a container. For QStar and NAS, you do not specify a storage location.

        :return: The bucket_name of this VaultConfig.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """
        Sets the bucket_name of this VaultConfig.
        Specifies the name of a storage location of the Vault, where objects are stored. For Google and AMS, this storage location is called a bucket. For Microsoft Azure, this storage location is called a container. For QStar and NAS, you do not specify a storage location.

        :param bucket_name: The bucket_name of this VaultConfig.
        :type: str
        """

        self._bucket_name = bucket_name

    @property
    def google(self):
        """
        Gets the google of this VaultConfig.
        Specifies the cloud credentials to connect to a Google service account.

        :return: The google of this VaultConfig.
        :rtype: GoogleCloudCredentials
        """
        return self._google

    @google.setter
    def google(self, google):
        """
        Sets the google of this VaultConfig.
        Specifies the cloud credentials to connect to a Google service account.

        :param google: The google of this VaultConfig.
        :type: GoogleCloudCredentials
        """

        self._google = google

    @property
    def nas(self):
        """
        Gets the nas of this VaultConfig.
        Specifies the server credentials to connect to a NetApp server.

        :return: The nas of this VaultConfig.
        :rtype: NasCredentials
        """
        return self._nas

    @nas.setter
    def nas(self, nas):
        """
        Sets the nas of this VaultConfig.
        Specifies the server credentials to connect to a NetApp server.

        :param nas: The nas of this VaultConfig.
        :type: NasCredentials
        """

        self._nas = nas

    @property
    def qstar(self):
        """
        Gets the qstar of this VaultConfig.
        Specifies the server credentials to connect to a QStar service to manage the media Vault.

        :return: The qstar of this VaultConfig.
        :rtype: QStarServerCredentials
        """
        return self._qstar

    @qstar.setter
    def qstar(self, qstar):
        """
        Sets the qstar of this VaultConfig.
        Specifies the server credentials to connect to a QStar service to manage the media Vault.

        :param qstar: The qstar of this VaultConfig.
        :type: QStarServerCredentials
        """

        self._qstar = qstar

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
