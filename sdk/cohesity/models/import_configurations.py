# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ImportConfigurations(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, active_directories=None, all=None, clusters=None, file=None, groups=None, partitions=None, principal_sources=None, protection_jobs=None, protection_policies=None, protection_sources=None, remote_clusters=None, roles=None, sql=None, users=None, vaults=None, view_boxes=None, views=None):
        """
        ImportConfigurations - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active_directories': 'list[str]',
            'all': 'list[str]',
            'clusters': 'list[int]',
            'file': 'str',
            'groups': 'list[str]',
            'partitions': 'list[int]',
            'principal_sources': 'list[str]',
            'protection_jobs': 'list[int]',
            'protection_policies': 'list[str]',
            'protection_sources': 'list[int]',
            'remote_clusters': 'list[int]',
            'roles': 'list[str]',
            'sql': 'list[int]',
            'users': 'list[str]',
            'vaults': 'list[int]',
            'view_boxes': 'list[int]',
            'views': 'list[int]'
        }

        self.attribute_map = {
            'active_directories': 'activeDirectories',
            'all': 'all',
            'clusters': 'clusters',
            'file': 'file',
            'groups': 'groups',
            'partitions': 'partitions',
            'principal_sources': 'principalSources',
            'protection_jobs': 'protectionJobs',
            'protection_policies': 'protectionPolicies',
            'protection_sources': 'protectionSources',
            'remote_clusters': 'remoteClusters',
            'roles': 'roles',
            'sql': 'sql',
            'users': 'users',
            'vaults': 'vaults',
            'view_boxes': 'viewBoxes',
            'views': 'views'
        }

        self._active_directories = active_directories
        self._all = all
        self._clusters = clusters
        self._file = file
        self._groups = groups
        self._partitions = partitions
        self._principal_sources = principal_sources
        self._protection_jobs = protection_jobs
        self._protection_policies = protection_policies
        self._protection_sources = protection_sources
        self._remote_clusters = remote_clusters
        self._roles = roles
        self._sql = sql
        self._users = users
        self._vaults = vaults
        self._view_boxes = view_boxes
        self._views = views

    @property
    def active_directories(self):
        """
        Gets the active_directories of this ImportConfigurations.


        :return: The active_directories of this ImportConfigurations.
        :rtype: list[str]
        """
        return self._active_directories

    @active_directories.setter
    def active_directories(self, active_directories):
        """
        Sets the active_directories of this ImportConfigurations.


        :param active_directories: The active_directories of this ImportConfigurations.
        :type: list[str]
        """

        self._active_directories = active_directories

    @property
    def all(self):
        """
        Gets the all of this ImportConfigurations.


        :return: The all of this ImportConfigurations.
        :rtype: list[str]
        """
        return self._all

    @all.setter
    def all(self, all):
        """
        Sets the all of this ImportConfigurations.


        :param all: The all of this ImportConfigurations.
        :type: list[str]
        """

        self._all = all

    @property
    def clusters(self):
        """
        Gets the clusters of this ImportConfigurations.


        :return: The clusters of this ImportConfigurations.
        :rtype: list[int]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """
        Sets the clusters of this ImportConfigurations.


        :param clusters: The clusters of this ImportConfigurations.
        :type: list[int]
        """

        self._clusters = clusters

    @property
    def file(self):
        """
        Gets the file of this ImportConfigurations.
        File is the config file.

        :return: The file of this ImportConfigurations.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """
        Sets the file of this ImportConfigurations.
        File is the config file.

        :param file: The file of this ImportConfigurations.
        :type: str
        """

        self._file = file

    @property
    def groups(self):
        """
        Gets the groups of this ImportConfigurations.


        :return: The groups of this ImportConfigurations.
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """
        Sets the groups of this ImportConfigurations.


        :param groups: The groups of this ImportConfigurations.
        :type: list[str]
        """

        self._groups = groups

    @property
    def partitions(self):
        """
        Gets the partitions of this ImportConfigurations.


        :return: The partitions of this ImportConfigurations.
        :rtype: list[int]
        """
        return self._partitions

    @partitions.setter
    def partitions(self, partitions):
        """
        Sets the partitions of this ImportConfigurations.


        :param partitions: The partitions of this ImportConfigurations.
        :type: list[int]
        """

        self._partitions = partitions

    @property
    def principal_sources(self):
        """
        Gets the principal_sources of this ImportConfigurations.


        :return: The principal_sources of this ImportConfigurations.
        :rtype: list[str]
        """
        return self._principal_sources

    @principal_sources.setter
    def principal_sources(self, principal_sources):
        """
        Sets the principal_sources of this ImportConfigurations.


        :param principal_sources: The principal_sources of this ImportConfigurations.
        :type: list[str]
        """

        self._principal_sources = principal_sources

    @property
    def protection_jobs(self):
        """
        Gets the protection_jobs of this ImportConfigurations.


        :return: The protection_jobs of this ImportConfigurations.
        :rtype: list[int]
        """
        return self._protection_jobs

    @protection_jobs.setter
    def protection_jobs(self, protection_jobs):
        """
        Sets the protection_jobs of this ImportConfigurations.


        :param protection_jobs: The protection_jobs of this ImportConfigurations.
        :type: list[int]
        """

        self._protection_jobs = protection_jobs

    @property
    def protection_policies(self):
        """
        Gets the protection_policies of this ImportConfigurations.


        :return: The protection_policies of this ImportConfigurations.
        :rtype: list[str]
        """
        return self._protection_policies

    @protection_policies.setter
    def protection_policies(self, protection_policies):
        """
        Sets the protection_policies of this ImportConfigurations.


        :param protection_policies: The protection_policies of this ImportConfigurations.
        :type: list[str]
        """

        self._protection_policies = protection_policies

    @property
    def protection_sources(self):
        """
        Gets the protection_sources of this ImportConfigurations.


        :return: The protection_sources of this ImportConfigurations.
        :rtype: list[int]
        """
        return self._protection_sources

    @protection_sources.setter
    def protection_sources(self, protection_sources):
        """
        Sets the protection_sources of this ImportConfigurations.


        :param protection_sources: The protection_sources of this ImportConfigurations.
        :type: list[int]
        """

        self._protection_sources = protection_sources

    @property
    def remote_clusters(self):
        """
        Gets the remote_clusters of this ImportConfigurations.


        :return: The remote_clusters of this ImportConfigurations.
        :rtype: list[int]
        """
        return self._remote_clusters

    @remote_clusters.setter
    def remote_clusters(self, remote_clusters):
        """
        Sets the remote_clusters of this ImportConfigurations.


        :param remote_clusters: The remote_clusters of this ImportConfigurations.
        :type: list[int]
        """

        self._remote_clusters = remote_clusters

    @property
    def roles(self):
        """
        Gets the roles of this ImportConfigurations.


        :return: The roles of this ImportConfigurations.
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this ImportConfigurations.


        :param roles: The roles of this ImportConfigurations.
        :type: list[str]
        """

        self._roles = roles

    @property
    def sql(self):
        """
        Gets the sql of this ImportConfigurations.


        :return: The sql of this ImportConfigurations.
        :rtype: list[int]
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """
        Sets the sql of this ImportConfigurations.


        :param sql: The sql of this ImportConfigurations.
        :type: list[int]
        """

        self._sql = sql

    @property
    def users(self):
        """
        Gets the users of this ImportConfigurations.


        :return: The users of this ImportConfigurations.
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """
        Sets the users of this ImportConfigurations.


        :param users: The users of this ImportConfigurations.
        :type: list[str]
        """

        self._users = users

    @property
    def vaults(self):
        """
        Gets the vaults of this ImportConfigurations.


        :return: The vaults of this ImportConfigurations.
        :rtype: list[int]
        """
        return self._vaults

    @vaults.setter
    def vaults(self, vaults):
        """
        Sets the vaults of this ImportConfigurations.


        :param vaults: The vaults of this ImportConfigurations.
        :type: list[int]
        """

        self._vaults = vaults

    @property
    def view_boxes(self):
        """
        Gets the view_boxes of this ImportConfigurations.


        :return: The view_boxes of this ImportConfigurations.
        :rtype: list[int]
        """
        return self._view_boxes

    @view_boxes.setter
    def view_boxes(self, view_boxes):
        """
        Sets the view_boxes of this ImportConfigurations.


        :param view_boxes: The view_boxes of this ImportConfigurations.
        :type: list[int]
        """

        self._view_boxes = view_boxes

    @property
    def views(self):
        """
        Gets the views of this ImportConfigurations.


        :return: The views of this ImportConfigurations.
        :rtype: list[int]
        """
        return self._views

    @views.setter
    def views(self, views):
        """
        Sets the views of this ImportConfigurations.


        :param views: The views of this ImportConfigurations.
        :type: list[int]
        """

        self._views = views

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
