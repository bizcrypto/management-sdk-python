# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class IdMappingInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, fallback_user_id_mapping_info=None, unix_root_sid=None, user_id_mapping_info=None):
        """
        IdMappingInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'fallback_user_id_mapping_info': 'UserIdMapping',
            'unix_root_sid': 'str',
            'user_id_mapping_info': 'UserIdMapping'
        }

        self.attribute_map = {
            'fallback_user_id_mapping_info': 'fallbackUserIdMappingInfo',
            'unix_root_sid': 'unixRootSid',
            'user_id_mapping_info': 'userIdMappingInfo'
        }

        self._fallback_user_id_mapping_info = fallback_user_id_mapping_info
        self._unix_root_sid = unix_root_sid
        self._user_id_mapping_info = user_id_mapping_info

    @property
    def fallback_user_id_mapping_info(self):
        """
        Gets the fallback_user_id_mapping_info of this IdMappingInfo.
        Specifies the fallback id mapping info which is used when an ID mapping for a user is not found via the above IdMappingInfo. Only supported for two types of fallback mapping types - 'kRid' and 'kFixed'.

        :return: The fallback_user_id_mapping_info of this IdMappingInfo.
        :rtype: UserIdMapping
        """
        return self._fallback_user_id_mapping_info

    @fallback_user_id_mapping_info.setter
    def fallback_user_id_mapping_info(self, fallback_user_id_mapping_info):
        """
        Sets the fallback_user_id_mapping_info of this IdMappingInfo.
        Specifies the fallback id mapping info which is used when an ID mapping for a user is not found via the above IdMappingInfo. Only supported for two types of fallback mapping types - 'kRid' and 'kFixed'.

        :param fallback_user_id_mapping_info: The fallback_user_id_mapping_info of this IdMappingInfo.
        :type: UserIdMapping
        """

        self._fallback_user_id_mapping_info = fallback_user_id_mapping_info

    @property
    def unix_root_sid(self):
        """
        Gets the unix_root_sid of this IdMappingInfo.
        Specifies the SID of the Active Directory domain user to be mapped to Unix root user.

        :return: The unix_root_sid of this IdMappingInfo.
        :rtype: str
        """
        return self._unix_root_sid

    @unix_root_sid.setter
    def unix_root_sid(self, unix_root_sid):
        """
        Sets the unix_root_sid of this IdMappingInfo.
        Specifies the SID of the Active Directory domain user to be mapped to Unix root user.

        :param unix_root_sid: The unix_root_sid of this IdMappingInfo.
        :type: str
        """

        self._unix_root_sid = unix_root_sid

    @property
    def user_id_mapping_info(self):
        """
        Gets the user_id_mapping_info of this IdMappingInfo.
        Specifies the information about how the Unix and Windows users are mapped for this domain.

        :return: The user_id_mapping_info of this IdMappingInfo.
        :rtype: UserIdMapping
        """
        return self._user_id_mapping_info

    @user_id_mapping_info.setter
    def user_id_mapping_info(self, user_id_mapping_info):
        """
        Sets the user_id_mapping_info of this IdMappingInfo.
        Specifies the information about how the Unix and Windows users are mapped for this domain.

        :param user_id_mapping_info: The user_id_mapping_info of this IdMappingInfo.
        :type: UserIdMapping
        """

        self._user_id_mapping_info = user_id_mapping_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
