# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ClusterPartition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, host_name=None, id=None, name=None, node_ids=None, vips=None, vlan_ips=None, vlans=None):
        """
        ClusterPartition - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'host_name': 'str',
            'id': 'int',
            'name': 'str',
            'node_ids': 'list[int]',
            'vips': 'list[str]',
            'vlan_ips': 'list[str]',
            'vlans': 'list[Vlan]'
        }

        self.attribute_map = {
            'host_name': 'hostName',
            'id': 'id',
            'name': 'name',
            'node_ids': 'nodeIds',
            'vips': 'vips',
            'vlan_ips': 'vlanIps',
            'vlans': 'vlans'
        }

        self._host_name = host_name
        self._id = id
        self._name = name
        self._node_ids = node_ids
        self._vips = vips
        self._vlan_ips = vlan_ips
        self._vlans = vlans

    @property
    def host_name(self):
        """
        Gets the host_name of this ClusterPartition.
        Specifies that hostname that resolves to one or more Virtual IP Addresses (VIPs).

        :return: The host_name of this ClusterPartition.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """
        Sets the host_name of this ClusterPartition.
        Specifies that hostname that resolves to one or more Virtual IP Addresses (VIPs).

        :param host_name: The host_name of this ClusterPartition.
        :type: str
        """

        self._host_name = host_name

    @property
    def id(self):
        """
        Gets the id of this ClusterPartition.
        Specifies a unique identifier for the Cluster Partition.

        :return: The id of this ClusterPartition.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ClusterPartition.
        Specifies a unique identifier for the Cluster Partition.

        :param id: The id of this ClusterPartition.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this ClusterPartition.
        Specifies the name of the Cluster Partition.

        :return: The name of this ClusterPartition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ClusterPartition.
        Specifies the name of the Cluster Partition.

        :param name: The name of this ClusterPartition.
        :type: str
        """

        self._name = name

    @property
    def node_ids(self):
        """
        Gets the node_ids of this ClusterPartition.
        Specifies a list of Node Ids that assigned to the Cluster Partition.

        :return: The node_ids of this ClusterPartition.
        :rtype: list[int]
        """
        return self._node_ids

    @node_ids.setter
    def node_ids(self, node_ids):
        """
        Sets the node_ids of this ClusterPartition.
        Specifies a list of Node Ids that assigned to the Cluster Partition.

        :param node_ids: The node_ids of this ClusterPartition.
        :type: list[int]
        """

        self._node_ids = node_ids

    @property
    def vips(self):
        """
        Gets the vips of this ClusterPartition.
        Specifies a list of Virtual IP Addresses (VIPs) that route network traffic to the Cluster Partition.

        :return: The vips of this ClusterPartition.
        :rtype: list[str]
        """
        return self._vips

    @vips.setter
    def vips(self, vips):
        """
        Sets the vips of this ClusterPartition.
        Specifies a list of Virtual IP Addresses (VIPs) that route network traffic to the Cluster Partition.

        :param vips: The vips of this ClusterPartition.
        :type: list[str]
        """

        self._vips = vips

    @property
    def vlan_ips(self):
        """
        Gets the vlan_ips of this ClusterPartition.
        Specifies a list of VLAN IP Addresses that route network traffic within certain VLANs to the Cluster Partition.

        :return: The vlan_ips of this ClusterPartition.
        :rtype: list[str]
        """
        return self._vlan_ips

    @vlan_ips.setter
    def vlan_ips(self, vlan_ips):
        """
        Sets the vlan_ips of this ClusterPartition.
        Specifies a list of VLAN IP Addresses that route network traffic within certain VLANs to the Cluster Partition.

        :param vlan_ips: The vlan_ips of this ClusterPartition.
        :type: list[str]
        """

        self._vlan_ips = vlan_ips

    @property
    def vlans(self):
        """
        Gets the vlans of this ClusterPartition.
        Specifies a list of VLANs for the Cluster Partition.

        :return: The vlans of this ClusterPartition.
        :rtype: list[Vlan]
        """
        return self._vlans

    @vlans.setter
    def vlans(self, vlans):
        """
        Sets the vlans of this ClusterPartition.
        Specifies a list of VLANs for the Cluster Partition.

        :param vlans: The vlans of this ClusterPartition.
        :type: list[Vlan]
        """

        self._vlans = vlans

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
