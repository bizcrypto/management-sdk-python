# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RemoteVaultRestoreTaskStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, current_indexing_status=None, current_snapshot_status=None, local_protection_job_uid=None, parent_job_uid=None, remote_protection_job_information=None, search_job_uid=None):
        """
        RemoteVaultRestoreTaskStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'current_indexing_status': 'RemoteVaultRestoreTaskStatusCurrentIndexingStatus',
            'current_snapshot_status': 'RemoteVaultRestoreTaskStatusCurrentSnapshotStatus',
            'local_protection_job_uid': 'RemoteVaultRestoreTaskStatusLocalProtectionJobUid',
            'parent_job_uid': 'RemoteVaultRestoreTaskStatusParentJobUid',
            'remote_protection_job_information': 'RemoteProtectionJobInformation',
            'search_job_uid': 'RemoteVaultRestoreTaskStatusSearchJobUid'
        }

        self.attribute_map = {
            'current_indexing_status': 'currentIndexingStatus',
            'current_snapshot_status': 'currentSnapshotStatus',
            'local_protection_job_uid': 'localProtectionJobUid',
            'parent_job_uid': 'parentJobUid',
            'remote_protection_job_information': 'remoteProtectionJobInformation',
            'search_job_uid': 'searchJobUid'
        }

        self._current_indexing_status = current_indexing_status
        self._current_snapshot_status = current_snapshot_status
        self._local_protection_job_uid = local_protection_job_uid
        self._parent_job_uid = parent_job_uid
        self._remote_protection_job_information = remote_protection_job_information
        self._search_job_uid = search_job_uid

    @property
    def current_indexing_status(self):
        """
        Gets the current_indexing_status of this RemoteVaultRestoreTaskStatus.


        :return: The current_indexing_status of this RemoteVaultRestoreTaskStatus.
        :rtype: RemoteVaultRestoreTaskStatusCurrentIndexingStatus
        """
        return self._current_indexing_status

    @current_indexing_status.setter
    def current_indexing_status(self, current_indexing_status):
        """
        Sets the current_indexing_status of this RemoteVaultRestoreTaskStatus.


        :param current_indexing_status: The current_indexing_status of this RemoteVaultRestoreTaskStatus.
        :type: RemoteVaultRestoreTaskStatusCurrentIndexingStatus
        """

        self._current_indexing_status = current_indexing_status

    @property
    def current_snapshot_status(self):
        """
        Gets the current_snapshot_status of this RemoteVaultRestoreTaskStatus.


        :return: The current_snapshot_status of this RemoteVaultRestoreTaskStatus.
        :rtype: RemoteVaultRestoreTaskStatusCurrentSnapshotStatus
        """
        return self._current_snapshot_status

    @current_snapshot_status.setter
    def current_snapshot_status(self, current_snapshot_status):
        """
        Sets the current_snapshot_status of this RemoteVaultRestoreTaskStatus.


        :param current_snapshot_status: The current_snapshot_status of this RemoteVaultRestoreTaskStatus.
        :type: RemoteVaultRestoreTaskStatusCurrentSnapshotStatus
        """

        self._current_snapshot_status = current_snapshot_status

    @property
    def local_protection_job_uid(self):
        """
        Gets the local_protection_job_uid of this RemoteVaultRestoreTaskStatus.


        :return: The local_protection_job_uid of this RemoteVaultRestoreTaskStatus.
        :rtype: RemoteVaultRestoreTaskStatusLocalProtectionJobUid
        """
        return self._local_protection_job_uid

    @local_protection_job_uid.setter
    def local_protection_job_uid(self, local_protection_job_uid):
        """
        Sets the local_protection_job_uid of this RemoteVaultRestoreTaskStatus.


        :param local_protection_job_uid: The local_protection_job_uid of this RemoteVaultRestoreTaskStatus.
        :type: RemoteVaultRestoreTaskStatusLocalProtectionJobUid
        """

        self._local_protection_job_uid = local_protection_job_uid

    @property
    def parent_job_uid(self):
        """
        Gets the parent_job_uid of this RemoteVaultRestoreTaskStatus.


        :return: The parent_job_uid of this RemoteVaultRestoreTaskStatus.
        :rtype: RemoteVaultRestoreTaskStatusParentJobUid
        """
        return self._parent_job_uid

    @parent_job_uid.setter
    def parent_job_uid(self, parent_job_uid):
        """
        Sets the parent_job_uid of this RemoteVaultRestoreTaskStatus.


        :param parent_job_uid: The parent_job_uid of this RemoteVaultRestoreTaskStatus.
        :type: RemoteVaultRestoreTaskStatusParentJobUid
        """

        self._parent_job_uid = parent_job_uid

    @property
    def remote_protection_job_information(self):
        """
        Gets the remote_protection_job_information of this RemoteVaultRestoreTaskStatus.
        Specifies the details about the original Protection Job that archived data to the remote Vault (External Target).

        :return: The remote_protection_job_information of this RemoteVaultRestoreTaskStatus.
        :rtype: RemoteProtectionJobInformation
        """
        return self._remote_protection_job_information

    @remote_protection_job_information.setter
    def remote_protection_job_information(self, remote_protection_job_information):
        """
        Sets the remote_protection_job_information of this RemoteVaultRestoreTaskStatus.
        Specifies the details about the original Protection Job that archived data to the remote Vault (External Target).

        :param remote_protection_job_information: The remote_protection_job_information of this RemoteVaultRestoreTaskStatus.
        :type: RemoteProtectionJobInformation
        """

        self._remote_protection_job_information = remote_protection_job_information

    @property
    def search_job_uid(self):
        """
        Gets the search_job_uid of this RemoteVaultRestoreTaskStatus.


        :return: The search_job_uid of this RemoteVaultRestoreTaskStatus.
        :rtype: RemoteVaultRestoreTaskStatusSearchJobUid
        """
        return self._search_job_uid

    @search_job_uid.setter
    def search_job_uid(self, search_job_uid):
        """
        Sets the search_job_uid of this RemoteVaultRestoreTaskStatus.


        :param search_job_uid: The search_job_uid of this RemoteVaultRestoreTaskStatus.
        :type: RemoteVaultRestoreTaskStatusSearchJobUid
        """

        self._search_job_uid = search_job_uid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
