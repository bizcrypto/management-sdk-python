# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class IopsTile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, max_read_iops=None, max_write_iops=None, read_iops_samples=None, write_iops_samples=None):
        """
        IopsTile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'max_read_iops': 'int',
            'max_write_iops': 'int',
            'read_iops_samples': 'list[Sample]',
            'write_iops_samples': 'list[Sample]'
        }

        self.attribute_map = {
            'max_read_iops': 'maxReadIops',
            'max_write_iops': 'maxWriteIops',
            'read_iops_samples': 'readIopsSamples',
            'write_iops_samples': 'writeIopsSamples'
        }

        self._max_read_iops = max_read_iops
        self._max_write_iops = max_write_iops
        self._read_iops_samples = read_iops_samples
        self._write_iops_samples = write_iops_samples

    @property
    def max_read_iops(self):
        """
        Gets the max_read_iops of this IopsTile.
        Maximum Read IOs per second in last 24 hours.

        :return: The max_read_iops of this IopsTile.
        :rtype: int
        """
        return self._max_read_iops

    @max_read_iops.setter
    def max_read_iops(self, max_read_iops):
        """
        Sets the max_read_iops of this IopsTile.
        Maximum Read IOs per second in last 24 hours.

        :param max_read_iops: The max_read_iops of this IopsTile.
        :type: int
        """

        self._max_read_iops = max_read_iops

    @property
    def max_write_iops(self):
        """
        Gets the max_write_iops of this IopsTile.
        Maximum number of Write IOs per second in last 24 hours.

        :return: The max_write_iops of this IopsTile.
        :rtype: int
        """
        return self._max_write_iops

    @max_write_iops.setter
    def max_write_iops(self, max_write_iops):
        """
        Sets the max_write_iops of this IopsTile.
        Maximum number of Write IOs per second in last 24 hours.

        :param max_write_iops: The max_write_iops of this IopsTile.
        :type: int
        """

        self._max_write_iops = max_write_iops

    @property
    def read_iops_samples(self):
        """
        Gets the read_iops_samples of this IopsTile.
        Read IOs per second samples taken for the past 24 hours at 10 minutes interval given in descending order of time.

        :return: The read_iops_samples of this IopsTile.
        :rtype: list[Sample]
        """
        return self._read_iops_samples

    @read_iops_samples.setter
    def read_iops_samples(self, read_iops_samples):
        """
        Sets the read_iops_samples of this IopsTile.
        Read IOs per second samples taken for the past 24 hours at 10 minutes interval given in descending order of time.

        :param read_iops_samples: The read_iops_samples of this IopsTile.
        :type: list[Sample]
        """

        self._read_iops_samples = read_iops_samples

    @property
    def write_iops_samples(self):
        """
        Gets the write_iops_samples of this IopsTile.
        Write IOs per second samples taken for the past 24 hours at 10 minutes interval given in descending order of time.

        :return: The write_iops_samples of this IopsTile.
        :rtype: list[Sample]
        """
        return self._write_iops_samples

    @write_iops_samples.setter
    def write_iops_samples(self, write_iops_samples):
        """
        Sets the write_iops_samples of this IopsTile.
        Write IOs per second samples taken for the past 24 hours at 10 minutes interval given in descending order of time.

        :param write_iops_samples: The write_iops_samples of this IopsTile.
        :type: list[Sample]
        """

        self._write_iops_samples = write_iops_samples

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
