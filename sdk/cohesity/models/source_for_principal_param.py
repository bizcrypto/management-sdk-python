# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SourceForPrincipalParam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, protection_source_ids=None, sid=None, view_names=None):
        """
        SourceForPrincipalParam - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'protection_source_ids': 'list[int]',
            'sid': 'str',
            'view_names': 'list[str]'
        }

        self.attribute_map = {
            'protection_source_ids': 'protectionSourceIds',
            'sid': 'sid',
            'view_names': 'viewNames'
        }

        self._protection_source_ids = protection_source_ids
        self._sid = sid
        self._view_names = view_names

    @property
    def protection_source_ids(self):
        """
        Gets the protection_source_ids of this SourceForPrincipalParam.
        For the specified principal, grant access permissions to the Protection Sources listed in this array.

        :return: The protection_source_ids of this SourceForPrincipalParam.
        :rtype: list[int]
        """
        return self._protection_source_ids

    @protection_source_ids.setter
    def protection_source_ids(self, protection_source_ids):
        """
        Sets the protection_source_ids of this SourceForPrincipalParam.
        For the specified principal, grant access permissions to the Protection Sources listed in this array.

        :param protection_source_ids: The protection_source_ids of this SourceForPrincipalParam.
        :type: list[int]
        """

        self._protection_source_ids = protection_source_ids

    @property
    def sid(self):
        """
        Gets the sid of this SourceForPrincipalParam.
        Specifies the SID of the principal to grant access permissions to.

        :return: The sid of this SourceForPrincipalParam.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """
        Sets the sid of this SourceForPrincipalParam.
        Specifies the SID of the principal to grant access permissions to.

        :param sid: The sid of this SourceForPrincipalParam.
        :type: str
        """

        self._sid = sid

    @property
    def view_names(self):
        """
        Gets the view_names of this SourceForPrincipalParam.
        For the specified principal, grant access permissions to the Views names listed in this array.

        :return: The view_names of this SourceForPrincipalParam.
        :rtype: list[str]
        """
        return self._view_names

    @view_names.setter
    def view_names(self, view_names):
        """
        Sets the view_names of this SourceForPrincipalParam.
        For the specified principal, grant access permissions to the Views names listed in this array.

        :param view_names: The view_names of this SourceForPrincipalParam.
        :type: list[str]
        """

        self._view_names = view_names

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
