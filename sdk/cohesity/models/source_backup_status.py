# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SourceBackupStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, current_snapshot_info=None, error=None, is_full_backup=None, num_restarts=None, parent_source_id=None, quiesced=None, sla_violated=None, source=None, stats=None, status=None, warnings=None):
        """
        SourceBackupStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'current_snapshot_info': 'SnapshotInfo',
            'error': 'str',
            'is_full_backup': 'bool',
            'num_restarts': 'int',
            'parent_source_id': 'int',
            'quiesced': 'bool',
            'sla_violated': 'bool',
            'source': 'ProtectionSource',
            'stats': 'BackupSourceStats',
            'status': 'str',
            'warnings': 'list[str]'
        }

        self.attribute_map = {
            'current_snapshot_info': 'currentSnapshotInfo',
            'error': 'error',
            'is_full_backup': 'isFullBackup',
            'num_restarts': 'numRestarts',
            'parent_source_id': 'parentSourceId',
            'quiesced': 'quiesced',
            'sla_violated': 'slaViolated',
            'source': 'source',
            'stats': 'stats',
            'status': 'status',
            'warnings': 'warnings'
        }

        self._current_snapshot_info = current_snapshot_info
        self._error = error
        self._is_full_backup = is_full_backup
        self._num_restarts = num_restarts
        self._parent_source_id = parent_source_id
        self._quiesced = quiesced
        self._sla_violated = sla_violated
        self._source = source
        self._stats = stats
        self._status = status
        self._warnings = warnings

    @property
    def current_snapshot_info(self):
        """
        Gets the current_snapshot_info of this SourceBackupStatus.
        Specifies details about the snapshot captured to backup the source object (such as a VM).

        :return: The current_snapshot_info of this SourceBackupStatus.
        :rtype: SnapshotInfo
        """
        return self._current_snapshot_info

    @current_snapshot_info.setter
    def current_snapshot_info(self, current_snapshot_info):
        """
        Sets the current_snapshot_info of this SourceBackupStatus.
        Specifies details about the snapshot captured to backup the source object (such as a VM).

        :param current_snapshot_info: The current_snapshot_info of this SourceBackupStatus.
        :type: SnapshotInfo
        """

        self._current_snapshot_info = current_snapshot_info

    @property
    def error(self):
        """
        Gets the error of this SourceBackupStatus.
        Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.

        :return: The error of this SourceBackupStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this SourceBackupStatus.
        Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.

        :param error: The error of this SourceBackupStatus.
        :type: str
        """

        self._error = error

    @property
    def is_full_backup(self):
        """
        Gets the is_full_backup of this SourceBackupStatus.
        Specifies whether this is a 'kFull' or 'kRegular' backup of the Run. This may be true even if the scheduled backup type is 'kRegular'. This will happen when this run corresponds to the first backup run of the Job or if no previous snapshot information is found.

        :return: The is_full_backup of this SourceBackupStatus.
        :rtype: bool
        """
        return self._is_full_backup

    @is_full_backup.setter
    def is_full_backup(self, is_full_backup):
        """
        Sets the is_full_backup of this SourceBackupStatus.
        Specifies whether this is a 'kFull' or 'kRegular' backup of the Run. This may be true even if the scheduled backup type is 'kRegular'. This will happen when this run corresponds to the first backup run of the Job or if no previous snapshot information is found.

        :param is_full_backup: The is_full_backup of this SourceBackupStatus.
        :type: bool
        """

        self._is_full_backup = is_full_backup

    @property
    def num_restarts(self):
        """
        Gets the num_restarts of this SourceBackupStatus.
        Specifies the number of times the the task was restarted because of the changes on the backup source host.

        :return: The num_restarts of this SourceBackupStatus.
        :rtype: int
        """
        return self._num_restarts

    @num_restarts.setter
    def num_restarts(self, num_restarts):
        """
        Sets the num_restarts of this SourceBackupStatus.
        Specifies the number of times the the task was restarted because of the changes on the backup source host.

        :param num_restarts: The num_restarts of this SourceBackupStatus.
        :type: int
        """

        self._num_restarts = num_restarts

    @property
    def parent_source_id(self):
        """
        Gets the parent_source_id of this SourceBackupStatus.
        Specifies the id of the registered Protection Source that is the parent of the Objects that are protected by this Job Run.

        :return: The parent_source_id of this SourceBackupStatus.
        :rtype: int
        """
        return self._parent_source_id

    @parent_source_id.setter
    def parent_source_id(self, parent_source_id):
        """
        Sets the parent_source_id of this SourceBackupStatus.
        Specifies the id of the registered Protection Source that is the parent of the Objects that are protected by this Job Run.

        :param parent_source_id: The parent_source_id of this SourceBackupStatus.
        :type: int
        """

        self._parent_source_id = parent_source_id

    @property
    def quiesced(self):
        """
        Gets the quiesced of this SourceBackupStatus.
        Specifies if app-consistent snapshot was captured. This field is set to true, if an app-consistent snapshot was taken by quiescing applications and the file system before taking a backup.

        :return: The quiesced of this SourceBackupStatus.
        :rtype: bool
        """
        return self._quiesced

    @quiesced.setter
    def quiesced(self, quiesced):
        """
        Sets the quiesced of this SourceBackupStatus.
        Specifies if app-consistent snapshot was captured. This field is set to true, if an app-consistent snapshot was taken by quiescing applications and the file system before taking a backup.

        :param quiesced: The quiesced of this SourceBackupStatus.
        :type: bool
        """

        self._quiesced = quiesced

    @property
    def sla_violated(self):
        """
        Gets the sla_violated of this SourceBackupStatus.
        Specifies if the SLA was violated for the Job Run. This field is set to true, if time to complete the Job Run is longer than the SLA specified. This field is populated when the status is set to 'kSuccess' or 'kFailure'.

        :return: The sla_violated of this SourceBackupStatus.
        :rtype: bool
        """
        return self._sla_violated

    @sla_violated.setter
    def sla_violated(self, sla_violated):
        """
        Sets the sla_violated of this SourceBackupStatus.
        Specifies if the SLA was violated for the Job Run. This field is set to true, if time to complete the Job Run is longer than the SLA specified. This field is populated when the status is set to 'kSuccess' or 'kFailure'.

        :param sla_violated: The sla_violated of this SourceBackupStatus.
        :type: bool
        """

        self._sla_violated = sla_violated

    @property
    def source(self):
        """
        Gets the source of this SourceBackupStatus.
        Specifies the source object to protect.

        :return: The source of this SourceBackupStatus.
        :rtype: ProtectionSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this SourceBackupStatus.
        Specifies the source object to protect.

        :param source: The source of this SourceBackupStatus.
        :type: ProtectionSource
        """

        self._source = source

    @property
    def stats(self):
        """
        Gets the stats of this SourceBackupStatus.
        Specifies the stats of the Backup Run task for the Protection Source.

        :return: The stats of this SourceBackupStatus.
        :rtype: BackupSourceStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """
        Sets the stats of this SourceBackupStatus.
        Specifies the stats of the Backup Run task for the Protection Source.

        :param stats: The stats of this SourceBackupStatus.
        :type: BackupSourceStats
        """

        self._stats = stats

    @property
    def status(self):
        """
        Gets the status of this SourceBackupStatus.
        Specifies the status of the source object being protected. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed.

        :return: The status of this SourceBackupStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this SourceBackupStatus.
        Specifies the status of the source object being protected. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed.

        :param status: The status of this SourceBackupStatus.
        :type: str
        """
        allowed_values = ["kAccepted", "kRunning", "kCanceling", "kCanceled", "kSuccess", "kFailure"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def warnings(self):
        """
        Gets the warnings of this SourceBackupStatus.
        Specifies the warnings that occurred (if any) while running this task.

        :return: The warnings of this SourceBackupStatus.
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """
        Sets the warnings of this SourceBackupStatus.
        Specifies the warnings that occurred (if any) while running this task.

        :param warnings: The warnings of this SourceBackupStatus.
        :type: list[str]
        """

        self._warnings = warnings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
