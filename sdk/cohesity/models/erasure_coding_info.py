# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ErasureCodingInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, algorithm=None, erasure_coding_enabled=None, inline_erasure_coding=None, num_coded_stripes=None, num_data_stripes=None):
        """
        ErasureCodingInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'algorithm': 'str',
            'erasure_coding_enabled': 'bool',
            'inline_erasure_coding': 'bool',
            'num_coded_stripes': 'int',
            'num_data_stripes': 'int'
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'erasure_coding_enabled': 'erasureCodingEnabled',
            'inline_erasure_coding': 'inlineErasureCoding',
            'num_coded_stripes': 'numCodedStripes',
            'num_data_stripes': 'numDataStripes'
        }

        self._algorithm = algorithm
        self._erasure_coding_enabled = erasure_coding_enabled
        self._inline_erasure_coding = inline_erasure_coding
        self._num_coded_stripes = num_coded_stripes
        self._num_data_stripes = num_data_stripes

    @property
    def algorithm(self):
        """
        Gets the algorithm of this ErasureCodingInfo.
        Algorthm used for erasure coding.

        :return: The algorithm of this ErasureCodingInfo.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """
        Sets the algorithm of this ErasureCodingInfo.
        Algorthm used for erasure coding.

        :param algorithm: The algorithm of this ErasureCodingInfo.
        :type: str
        """
        allowed_values = ["REED_SOLOMON", "LRC"]
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def erasure_coding_enabled(self):
        """
        Gets the erasure_coding_enabled of this ErasureCodingInfo.
        Specifies whether Erasure coding is enabled on the Storage Domain (View Box).

        :return: The erasure_coding_enabled of this ErasureCodingInfo.
        :rtype: bool
        """
        return self._erasure_coding_enabled

    @erasure_coding_enabled.setter
    def erasure_coding_enabled(self, erasure_coding_enabled):
        """
        Sets the erasure_coding_enabled of this ErasureCodingInfo.
        Specifies whether Erasure coding is enabled on the Storage Domain (View Box).

        :param erasure_coding_enabled: The erasure_coding_enabled of this ErasureCodingInfo.
        :type: bool
        """

        self._erasure_coding_enabled = erasure_coding_enabled

    @property
    def inline_erasure_coding(self):
        """
        Gets the inline_erasure_coding of this ErasureCodingInfo.
        Specifies if erasure coding should occur inline (as the data is being written). This field is only relevant if erasure coding is enabled.

        :return: The inline_erasure_coding of this ErasureCodingInfo.
        :rtype: bool
        """
        return self._inline_erasure_coding

    @inline_erasure_coding.setter
    def inline_erasure_coding(self, inline_erasure_coding):
        """
        Sets the inline_erasure_coding of this ErasureCodingInfo.
        Specifies if erasure coding should occur inline (as the data is being written). This field is only relevant if erasure coding is enabled.

        :param inline_erasure_coding: The inline_erasure_coding of this ErasureCodingInfo.
        :type: bool
        """

        self._inline_erasure_coding = inline_erasure_coding

    @property
    def num_coded_stripes(self):
        """
        Gets the num_coded_stripes of this ErasureCodingInfo.
        The number of coded stripes.

        :return: The num_coded_stripes of this ErasureCodingInfo.
        :rtype: int
        """
        return self._num_coded_stripes

    @num_coded_stripes.setter
    def num_coded_stripes(self, num_coded_stripes):
        """
        Sets the num_coded_stripes of this ErasureCodingInfo.
        The number of coded stripes.

        :param num_coded_stripes: The num_coded_stripes of this ErasureCodingInfo.
        :type: int
        """

        self._num_coded_stripes = num_coded_stripes

    @property
    def num_data_stripes(self):
        """
        Gets the num_data_stripes of this ErasureCodingInfo.
        The number of stripes containing data.

        :return: The num_data_stripes of this ErasureCodingInfo.
        :rtype: int
        """
        return self._num_data_stripes

    @num_data_stripes.setter
    def num_data_stripes(self, num_data_stripes):
        """
        Sets the num_data_stripes of this ErasureCodingInfo.
        The number of stripes containing data.

        :param num_data_stripes: The num_data_stripes of this ErasureCodingInfo.
        :type: int
        """

        self._num_data_stripes = num_data_stripes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
