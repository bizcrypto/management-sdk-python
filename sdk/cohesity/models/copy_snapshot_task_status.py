# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CopySnapshotTaskStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, error=None, source=None, stats=None, status=None, task_end_time_usecs=None, task_start_time_usecs=None):
        """
        CopySnapshotTaskStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'error': 'str',
            'source': 'ProtectionSource',
            'stats': 'CopyRunStats',
            'status': 'str',
            'task_end_time_usecs': 'int',
            'task_start_time_usecs': 'int'
        }

        self.attribute_map = {
            'error': 'error',
            'source': 'source',
            'stats': 'stats',
            'status': 'status',
            'task_end_time_usecs': 'taskEndTimeUsecs',
            'task_start_time_usecs': 'taskStartTimeUsecs'
        }

        self._error = error
        self._source = source
        self._stats = stats
        self._status = status
        self._task_end_time_usecs = task_end_time_usecs
        self._task_start_time_usecs = task_start_time_usecs

    @property
    def error(self):
        """
        Gets the error of this CopySnapshotTaskStatus.
        Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.

        :return: The error of this CopySnapshotTaskStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this CopySnapshotTaskStatus.
        Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.

        :param error: The error of this CopySnapshotTaskStatus.
        :type: str
        """

        self._error = error

    @property
    def source(self):
        """
        Gets the source of this CopySnapshotTaskStatus.
        Specifies the source object whose snapshot is replicated. This is specified for replication targets.

        :return: The source of this CopySnapshotTaskStatus.
        :rtype: ProtectionSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this CopySnapshotTaskStatus.
        Specifies the source object whose snapshot is replicated. This is specified for replication targets.

        :param source: The source of this CopySnapshotTaskStatus.
        :type: ProtectionSource
        """

        self._source = source

    @property
    def stats(self):
        """
        Gets the stats of this CopySnapshotTaskStatus.
        Specifies the stats of the replication or the archival task.

        :return: The stats of this CopySnapshotTaskStatus.
        :rtype: CopyRunStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """
        Sets the stats of this CopySnapshotTaskStatus.
        Specifies the stats of the replication or the archival task.

        :param stats: The stats of this CopySnapshotTaskStatus.
        :type: CopyRunStats
        """

        self._stats = stats

    @property
    def status(self):
        """
        Gets the status of this CopySnapshotTaskStatus.
        Specifies the status of the source object being protected. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed.

        :return: The status of this CopySnapshotTaskStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this CopySnapshotTaskStatus.
        Specifies the status of the source object being protected. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed.

        :param status: The status of this CopySnapshotTaskStatus.
        :type: str
        """
        allowed_values = ["kAccepted", "kRunning", "kCanceling", "kCanceled", "kSuccess", "kFailure"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def task_end_time_usecs(self):
        """
        Gets the task_end_time_usecs of this CopySnapshotTaskStatus.
        Specifies the end time of the copy task. The end time is specified as a Unix epoch Timestamp (in microseconds).

        :return: The task_end_time_usecs of this CopySnapshotTaskStatus.
        :rtype: int
        """
        return self._task_end_time_usecs

    @task_end_time_usecs.setter
    def task_end_time_usecs(self, task_end_time_usecs):
        """
        Sets the task_end_time_usecs of this CopySnapshotTaskStatus.
        Specifies the end time of the copy task. The end time is specified as a Unix epoch Timestamp (in microseconds).

        :param task_end_time_usecs: The task_end_time_usecs of this CopySnapshotTaskStatus.
        :type: int
        """

        self._task_end_time_usecs = task_end_time_usecs

    @property
    def task_start_time_usecs(self):
        """
        Gets the task_start_time_usecs of this CopySnapshotTaskStatus.
        Specifies the start time of the copy task. The start time is specified as a Unix epoch Timestamp (in microseconds). Copy run task is started after completing backup tasks. It may spawn sub-tasks to copy or replicate individual snapshots.

        :return: The task_start_time_usecs of this CopySnapshotTaskStatus.
        :rtype: int
        """
        return self._task_start_time_usecs

    @task_start_time_usecs.setter
    def task_start_time_usecs(self, task_start_time_usecs):
        """
        Sets the task_start_time_usecs of this CopySnapshotTaskStatus.
        Specifies the start time of the copy task. The start time is specified as a Unix epoch Timestamp (in microseconds). Copy run task is started after completing backup tasks. It may spawn sub-tasks to copy or replicate individual snapshots.

        :param task_start_time_usecs: The task_start_time_usecs of this CopySnapshotTaskStatus.
        :type: int
        """

        self._task_start_time_usecs = task_start_time_usecs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
