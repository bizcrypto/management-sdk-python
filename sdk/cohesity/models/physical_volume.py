# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PhysicalVolume(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, device_path=None, guid=None, is_extended_attributes_supported=None, is_protected=None, label=None, logical_size_bytes=None, mount_points=None, network_path=None, used_size_bytes=None):
        """
        PhysicalVolume - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'device_path': 'str',
            'guid': 'str',
            'is_extended_attributes_supported': 'bool',
            'is_protected': 'bool',
            'label': 'str',
            'logical_size_bytes': 'int',
            'mount_points': 'list[str]',
            'network_path': 'str',
            'used_size_bytes': 'int'
        }

        self.attribute_map = {
            'device_path': 'devicePath',
            'guid': 'guid',
            'is_extended_attributes_supported': 'isExtendedAttributesSupported',
            'is_protected': 'isProtected',
            'label': 'label',
            'logical_size_bytes': 'logicalSizeBytes',
            'mount_points': 'mountPoints',
            'network_path': 'networkPath',
            'used_size_bytes': 'usedSizeBytes'
        }

        self._device_path = device_path
        self._guid = guid
        self._is_extended_attributes_supported = is_extended_attributes_supported
        self._is_protected = is_protected
        self._label = label
        self._logical_size_bytes = logical_size_bytes
        self._mount_points = mount_points
        self._network_path = network_path
        self._used_size_bytes = used_size_bytes

    @property
    def device_path(self):
        """
        Gets the device_path of this PhysicalVolume.
        Specifies the path to the device that hosts the volume locally.

        :return: The device_path of this PhysicalVolume.
        :rtype: str
        """
        return self._device_path

    @device_path.setter
    def device_path(self, device_path):
        """
        Sets the device_path of this PhysicalVolume.
        Specifies the path to the device that hosts the volume locally.

        :param device_path: The device_path of this PhysicalVolume.
        :type: str
        """

        self._device_path = device_path

    @property
    def guid(self):
        """
        Gets the guid of this PhysicalVolume.
        Specifies an id for the Physical Volume.

        :return: The guid of this PhysicalVolume.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """
        Sets the guid of this PhysicalVolume.
        Specifies an id for the Physical Volume.

        :param guid: The guid of this PhysicalVolume.
        :type: str
        """

        self._guid = guid

    @property
    def is_extended_attributes_supported(self):
        """
        Gets the is_extended_attributes_supported of this PhysicalVolume.
        Specifies whether this volume supports extended attributes (like ACLs) when performing file backups.

        :return: The is_extended_attributes_supported of this PhysicalVolume.
        :rtype: bool
        """
        return self._is_extended_attributes_supported

    @is_extended_attributes_supported.setter
    def is_extended_attributes_supported(self, is_extended_attributes_supported):
        """
        Sets the is_extended_attributes_supported of this PhysicalVolume.
        Specifies whether this volume supports extended attributes (like ACLs) when performing file backups.

        :param is_extended_attributes_supported: The is_extended_attributes_supported of this PhysicalVolume.
        :type: bool
        """

        self._is_extended_attributes_supported = is_extended_attributes_supported

    @property
    def is_protected(self):
        """
        Gets the is_protected of this PhysicalVolume.
        Specifies if a volume is protected by a Job.

        :return: The is_protected of this PhysicalVolume.
        :rtype: bool
        """
        return self._is_protected

    @is_protected.setter
    def is_protected(self, is_protected):
        """
        Sets the is_protected of this PhysicalVolume.
        Specifies if a volume is protected by a Job.

        :param is_protected: The is_protected of this PhysicalVolume.
        :type: bool
        """

        self._is_protected = is_protected

    @property
    def label(self):
        """
        Gets the label of this PhysicalVolume.
        Specifies a volume label that can be used for displaying additional identifying information about a volume.

        :return: The label of this PhysicalVolume.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this PhysicalVolume.
        Specifies a volume label that can be used for displaying additional identifying information about a volume.

        :param label: The label of this PhysicalVolume.
        :type: str
        """

        self._label = label

    @property
    def logical_size_bytes(self):
        """
        Gets the logical_size_bytes of this PhysicalVolume.
        Specifies the logical size of the volume in bytes that is not reduced by change-block tracking, compression and deduplication.

        :return: The logical_size_bytes of this PhysicalVolume.
        :rtype: int
        """
        return self._logical_size_bytes

    @logical_size_bytes.setter
    def logical_size_bytes(self, logical_size_bytes):
        """
        Sets the logical_size_bytes of this PhysicalVolume.
        Specifies the logical size of the volume in bytes that is not reduced by change-block tracking, compression and deduplication.

        :param logical_size_bytes: The logical_size_bytes of this PhysicalVolume.
        :type: int
        """

        self._logical_size_bytes = logical_size_bytes

    @property
    def mount_points(self):
        """
        Gets the mount_points of this PhysicalVolume.
        Specifies the mount points where the volume is mounted, for example: 'C:\\', '/mnt/foo' etc.

        :return: The mount_points of this PhysicalVolume.
        :rtype: list[str]
        """
        return self._mount_points

    @mount_points.setter
    def mount_points(self, mount_points):
        """
        Sets the mount_points of this PhysicalVolume.
        Specifies the mount points where the volume is mounted, for example: 'C:\\', '/mnt/foo' etc.

        :param mount_points: The mount_points of this PhysicalVolume.
        :type: list[str]
        """

        self._mount_points = mount_points

    @property
    def network_path(self):
        """
        Gets the network_path of this PhysicalVolume.
        Specifies the full path to connect to the network attached volume. For example, (IP or hostname):/path/to/share for NFS volumes).

        :return: The network_path of this PhysicalVolume.
        :rtype: str
        """
        return self._network_path

    @network_path.setter
    def network_path(self, network_path):
        """
        Sets the network_path of this PhysicalVolume.
        Specifies the full path to connect to the network attached volume. For example, (IP or hostname):/path/to/share for NFS volumes).

        :param network_path: The network_path of this PhysicalVolume.
        :type: str
        """

        self._network_path = network_path

    @property
    def used_size_bytes(self):
        """
        Gets the used_size_bytes of this PhysicalVolume.
        Specifies the size used by the volume in bytes.

        :return: The used_size_bytes of this PhysicalVolume.
        :rtype: int
        """
        return self._used_size_bytes

    @used_size_bytes.setter
    def used_size_bytes(self, used_size_bytes):
        """
        Sets the used_size_bytes of this PhysicalVolume.
        Specifies the size used by the volume in bytes.

        :param used_size_bytes: The used_size_bytes of this PhysicalVolume.
        :type: int
        """

        self._used_size_bytes = used_size_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
