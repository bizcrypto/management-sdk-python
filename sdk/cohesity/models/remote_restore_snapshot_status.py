# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RemoteRestoreSnapshotStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, archive_task_uid=None, error=None, expiry_time_usecs=None, job_run_id=None, progress_monitor_task=None, snapshot_task_status=None, snapshot_task_uid=None, snapshot_time_usecs=None):
        """
        RemoteRestoreSnapshotStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'archive_task_uid': 'RemoteRestoreSnapshotStatusArchiveTaskUid',
            'error': 'str',
            'expiry_time_usecs': 'int',
            'job_run_id': 'int',
            'progress_monitor_task': 'str',
            'snapshot_task_status': 'str',
            'snapshot_task_uid': 'RemoteRestoreSnapshotStatusSnapshotTaskUid',
            'snapshot_time_usecs': 'int'
        }

        self.attribute_map = {
            'archive_task_uid': 'archiveTaskUid',
            'error': 'error',
            'expiry_time_usecs': 'expiryTimeUsecs',
            'job_run_id': 'jobRunId',
            'progress_monitor_task': 'progressMonitorTask',
            'snapshot_task_status': 'snapshotTaskStatus',
            'snapshot_task_uid': 'snapshotTaskUid',
            'snapshot_time_usecs': 'snapshotTimeUsecs'
        }

        self._archive_task_uid = archive_task_uid
        self._error = error
        self._expiry_time_usecs = expiry_time_usecs
        self._job_run_id = job_run_id
        self._progress_monitor_task = progress_monitor_task
        self._snapshot_task_status = snapshot_task_status
        self._snapshot_task_uid = snapshot_task_uid
        self._snapshot_time_usecs = snapshot_time_usecs

    @property
    def archive_task_uid(self):
        """
        Gets the archive_task_uid of this RemoteRestoreSnapshotStatus.


        :return: The archive_task_uid of this RemoteRestoreSnapshotStatus.
        :rtype: RemoteRestoreSnapshotStatusArchiveTaskUid
        """
        return self._archive_task_uid

    @archive_task_uid.setter
    def archive_task_uid(self, archive_task_uid):
        """
        Sets the archive_task_uid of this RemoteRestoreSnapshotStatus.


        :param archive_task_uid: The archive_task_uid of this RemoteRestoreSnapshotStatus.
        :type: RemoteRestoreSnapshotStatusArchiveTaskUid
        """

        self._archive_task_uid = archive_task_uid

    @property
    def error(self):
        """
        Gets the error of this RemoteRestoreSnapshotStatus.
        Specifies the error message if the indexing task fails.

        :return: The error of this RemoteRestoreSnapshotStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this RemoteRestoreSnapshotStatus.
        Specifies the error message if the indexing task fails.

        :param error: The error of this RemoteRestoreSnapshotStatus.
        :type: str
        """

        self._error = error

    @property
    def expiry_time_usecs(self):
        """
        Gets the expiry_time_usecs of this RemoteRestoreSnapshotStatus.
        Specifies the time when the Snapshot expires on the remote Vault. This field is recorded as a Unix epoch Timestamp (in microseconds).

        :return: The expiry_time_usecs of this RemoteRestoreSnapshotStatus.
        :rtype: int
        """
        return self._expiry_time_usecs

    @expiry_time_usecs.setter
    def expiry_time_usecs(self, expiry_time_usecs):
        """
        Sets the expiry_time_usecs of this RemoteRestoreSnapshotStatus.
        Specifies the time when the Snapshot expires on the remote Vault. This field is recorded as a Unix epoch Timestamp (in microseconds).

        :param expiry_time_usecs: The expiry_time_usecs of this RemoteRestoreSnapshotStatus.
        :type: int
        """

        self._expiry_time_usecs = expiry_time_usecs

    @property
    def job_run_id(self):
        """
        Gets the job_run_id of this RemoteRestoreSnapshotStatus.
        Specifies the id of the Job Run that originally captured the Snapshot.

        :return: The job_run_id of this RemoteRestoreSnapshotStatus.
        :rtype: int
        """
        return self._job_run_id

    @job_run_id.setter
    def job_run_id(self, job_run_id):
        """
        Sets the job_run_id of this RemoteRestoreSnapshotStatus.
        Specifies the id of the Job Run that originally captured the Snapshot.

        :param job_run_id: The job_run_id of this RemoteRestoreSnapshotStatus.
        :type: int
        """

        self._job_run_id = job_run_id

    @property
    def progress_monitor_task(self):
        """
        Gets the progress_monitor_task of this RemoteRestoreSnapshotStatus.
        Specifies the path to the progress monitor task that tracks the progress of building the index.

        :return: The progress_monitor_task of this RemoteRestoreSnapshotStatus.
        :rtype: str
        """
        return self._progress_monitor_task

    @progress_monitor_task.setter
    def progress_monitor_task(self, progress_monitor_task):
        """
        Sets the progress_monitor_task of this RemoteRestoreSnapshotStatus.
        Specifies the path to the progress monitor task that tracks the progress of building the index.

        :param progress_monitor_task: The progress_monitor_task of this RemoteRestoreSnapshotStatus.
        :type: str
        """

        self._progress_monitor_task = progress_monitor_task

    @property
    def snapshot_task_status(self):
        """
        Gets the snapshot_task_status of this RemoteRestoreSnapshotStatus.
        Specifies the status of the indexing task. 'kJobRunning' indicates that the Job/task is currently running. 'kJobFinished' indicates that the Job/task completed and finished. 'kJobFailed' indicates that the Job/task failed and did not complete. 'kJobCanceled' indicates that the Job/task was canceled. 'kJobPaused' indicates the Job/task is paused.

        :return: The snapshot_task_status of this RemoteRestoreSnapshotStatus.
        :rtype: str
        """
        return self._snapshot_task_status

    @snapshot_task_status.setter
    def snapshot_task_status(self, snapshot_task_status):
        """
        Sets the snapshot_task_status of this RemoteRestoreSnapshotStatus.
        Specifies the status of the indexing task. 'kJobRunning' indicates that the Job/task is currently running. 'kJobFinished' indicates that the Job/task completed and finished. 'kJobFailed' indicates that the Job/task failed and did not complete. 'kJobCanceled' indicates that the Job/task was canceled. 'kJobPaused' indicates the Job/task is paused.

        :param snapshot_task_status: The snapshot_task_status of this RemoteRestoreSnapshotStatus.
        :type: str
        """
        allowed_values = ["kJobRunning", "kJobFinished", "kJobFailed", "kJobCanceled", "kJobPaused"]
        if snapshot_task_status not in allowed_values:
            raise ValueError(
                "Invalid value for `snapshot_task_status` ({0}), must be one of {1}"
                .format(snapshot_task_status, allowed_values)
            )

        self._snapshot_task_status = snapshot_task_status

    @property
    def snapshot_task_uid(self):
        """
        Gets the snapshot_task_uid of this RemoteRestoreSnapshotStatus.


        :return: The snapshot_task_uid of this RemoteRestoreSnapshotStatus.
        :rtype: RemoteRestoreSnapshotStatusSnapshotTaskUid
        """
        return self._snapshot_task_uid

    @snapshot_task_uid.setter
    def snapshot_task_uid(self, snapshot_task_uid):
        """
        Sets the snapshot_task_uid of this RemoteRestoreSnapshotStatus.


        :param snapshot_task_uid: The snapshot_task_uid of this RemoteRestoreSnapshotStatus.
        :type: RemoteRestoreSnapshotStatusSnapshotTaskUid
        """

        self._snapshot_task_uid = snapshot_task_uid

    @property
    def snapshot_time_usecs(self):
        """
        Gets the snapshot_time_usecs of this RemoteRestoreSnapshotStatus.
        Specify the time the Snapshot was captured. This time is recorded as a Unix epoch Timestamp (in microseconds).

        :return: The snapshot_time_usecs of this RemoteRestoreSnapshotStatus.
        :rtype: int
        """
        return self._snapshot_time_usecs

    @snapshot_time_usecs.setter
    def snapshot_time_usecs(self, snapshot_time_usecs):
        """
        Sets the snapshot_time_usecs of this RemoteRestoreSnapshotStatus.
        Specify the time the Snapshot was captured. This time is recorded as a Unix epoch Timestamp (in microseconds).

        :param snapshot_time_usecs: The snapshot_time_usecs of this RemoteRestoreSnapshotStatus.
        :type: int
        """

        self._snapshot_time_usecs = snapshot_time_usecs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
