# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AnalyseJarArg(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, jar_name=None, jar_path=None, save_entities=None):
        """
        AnalyseJarArg - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'jar_name': 'str',
            'jar_path': 'str',
            'save_entities': 'bool'
        }

        self.attribute_map = {
            'jar_name': 'jarName',
            'jar_path': 'jarPath',
            'save_entities': 'saveEntities'
        }

        self._jar_name = jar_name
        self._jar_path = jar_path
        self._save_entities = save_entities

    @property
    def jar_name(self):
        """
        Gets the jar_name of this AnalyseJarArg.
        Name of the JAR to be analysed.

        :return: The jar_name of this AnalyseJarArg.
        :rtype: str
        """
        return self._jar_name

    @jar_name.setter
    def jar_name(self, jar_name):
        """
        Sets the jar_name of this AnalyseJarArg.
        Name of the JAR to be analysed.

        :param jar_name: The jar_name of this AnalyseJarArg.
        :type: str
        """

        self._jar_name = jar_name

    @property
    def jar_path(self):
        """
        Gets the jar_path of this AnalyseJarArg.
        Path of the jar file.

        :return: The jar_path of this AnalyseJarArg.
        :rtype: str
        """
        return self._jar_path

    @jar_path.setter
    def jar_path(self, jar_path):
        """
        Sets the jar_path of this AnalyseJarArg.
        Path of the jar file.

        :param jar_path: The jar_path of this AnalyseJarArg.
        :type: str
        """

        self._jar_path = jar_path

    @property
    def save_entities(self):
        """
        Gets the save_entities of this AnalyseJarArg.
        If this flag is true, then also save mapper and reducers in scribe.

        :return: The save_entities of this AnalyseJarArg.
        :rtype: bool
        """
        return self._save_entities

    @save_entities.setter
    def save_entities(self, save_entities):
        """
        Sets the save_entities of this AnalyseJarArg.
        If this flag is true, then also save mapper and reducers in scribe.

        :param save_entities: The save_entities of this AnalyseJarArg.
        :type: bool
        """

        self._save_entities = save_entities

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
