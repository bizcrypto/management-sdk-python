# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InputSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, files_selector=None, on_nfs_files=None, vm_selector=None):
        """
        InputSpec - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'files_selector': 'InputSpecInputFilesSelector',
            'on_nfs_files': 'bool',
            'vm_selector': 'InputSpecInputVMsSelector'
        }

        self.attribute_map = {
            'files_selector': 'filesSelector',
            'on_nfs_files': 'onNfsFiles',
            'vm_selector': 'vmSelector'
        }

        self._files_selector = files_selector
        self._on_nfs_files = on_nfs_files
        self._vm_selector = vm_selector

    @property
    def files_selector(self):
        """
        Gets the files_selector of this InputSpec.


        :return: The files_selector of this InputSpec.
        :rtype: InputSpecInputFilesSelector
        """
        return self._files_selector

    @files_selector.setter
    def files_selector(self, files_selector):
        """
        Sets the files_selector of this InputSpec.


        :param files_selector: The files_selector of this InputSpec.
        :type: InputSpecInputFilesSelector
        """

        self._files_selector = files_selector

    @property
    def on_nfs_files(self):
        """
        Gets the on_nfs_files of this InputSpec.
        Selects whether input is files inside vmdks or files on NFS. One of vm_selector or files_selector will be chosen based on this flag.

        :return: The on_nfs_files of this InputSpec.
        :rtype: bool
        """
        return self._on_nfs_files

    @on_nfs_files.setter
    def on_nfs_files(self, on_nfs_files):
        """
        Sets the on_nfs_files of this InputSpec.
        Selects whether input is files inside vmdks or files on NFS. One of vm_selector or files_selector will be chosen based on this flag.

        :param on_nfs_files: The on_nfs_files of this InputSpec.
        :type: bool
        """

        self._on_nfs_files = on_nfs_files

    @property
    def vm_selector(self):
        """
        Gets the vm_selector of this InputSpec.


        :return: The vm_selector of this InputSpec.
        :rtype: InputSpecInputVMsSelector
        """
        return self._vm_selector

    @vm_selector.setter
    def vm_selector(self, vm_selector):
        """
        Sets the vm_selector of this InputSpec.


        :param vm_selector: The vm_selector of this InputSpec.
        :type: InputSpecInputVMsSelector
        """

        self._vm_selector = vm_selector

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
