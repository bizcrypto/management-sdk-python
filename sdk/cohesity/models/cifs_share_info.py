# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CifsShareInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, acls=None, name=None, path=None, server_name=None):
        """
        CifsShareInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'acls': 'list[str]',
            'name': 'str',
            'path': 'str',
            'server_name': 'str'
        }

        self.attribute_map = {
            'acls': 'acls',
            'name': 'name',
            'path': 'path',
            'server_name': 'serverName'
        }

        self._acls = acls
        self._name = name
        self._path = path
        self._server_name = server_name

    @property
    def acls(self):
        """
        Gets the acls of this CifsShareInfo.
        Specifies the ACLs for this share.

        :return: The acls of this CifsShareInfo.
        :rtype: list[str]
        """
        return self._acls

    @acls.setter
    def acls(self, acls):
        """
        Sets the acls of this CifsShareInfo.
        Specifies the ACLs for this share.

        :param acls: The acls of this CifsShareInfo.
        :type: list[str]
        """

        self._acls = acls

    @property
    def name(self):
        """
        Gets the name of this CifsShareInfo.
        Specifies the name of the CIFS share. This can be different from the volume name that this share belongs to. A single volume can export multiple CIFS shares, each with unique settings such as permissions.

        :return: The name of this CifsShareInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CifsShareInfo.
        Specifies the name of the CIFS share. This can be different from the volume name that this share belongs to. A single volume can export multiple CIFS shares, each with unique settings such as permissions.

        :param name: The name of this CifsShareInfo.
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """
        Gets the path of this CifsShareInfo.
        Specifies the path of this share under the Vserver's root.

        :return: The path of this CifsShareInfo.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this CifsShareInfo.
        Specifies the path of this share under the Vserver's root.

        :param path: The path of this CifsShareInfo.
        :type: str
        """

        self._path = path

    @property
    def server_name(self):
        """
        Gets the server_name of this CifsShareInfo.
        Specifies the CIFS server name (such as 'NETAPP-01') specified by the system administrator. This name is searchable within the active directory domain.

        :return: The server_name of this CifsShareInfo.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """
        Sets the server_name of this CifsShareInfo.
        Specifies the CIFS server name (such as 'NETAPP-01') specified by the system administrator. This name is searchable within the active directory domain.

        :param server_name: The server_name of this CifsShareInfo.
        :type: str
        """

        self._server_name = server_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
