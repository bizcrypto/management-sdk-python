# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DataTransferToVaultSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, data_transfer_per_protection_job=None, logical_data_transferred_bytes_during_time_range=None, num_logical_bytes_transferred=None, num_physical_bytes_transferred=None, num_protection_jobs=None, physical_data_transferred_bytes_during_time_range=None, storage_consumed_bytes=None, vault_id=None, vault_name=None, vault_type=None):
        """
        DataTransferToVaultSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data_transfer_per_protection_job': 'list[DataTransferToVaultPerProtectionJob]',
            'logical_data_transferred_bytes_during_time_range': 'list[int]',
            'num_logical_bytes_transferred': 'int',
            'num_physical_bytes_transferred': 'int',
            'num_protection_jobs': 'int',
            'physical_data_transferred_bytes_during_time_range': 'list[int]',
            'storage_consumed_bytes': 'int',
            'vault_id': 'int',
            'vault_name': 'str',
            'vault_type': 'str'
        }

        self.attribute_map = {
            'data_transfer_per_protection_job': 'dataTransferPerProtectionJob',
            'logical_data_transferred_bytes_during_time_range': 'logicalDataTransferredBytesDuringTimeRange',
            'num_logical_bytes_transferred': 'numLogicalBytesTransferred',
            'num_physical_bytes_transferred': 'numPhysicalBytesTransferred',
            'num_protection_jobs': 'numProtectionJobs',
            'physical_data_transferred_bytes_during_time_range': 'physicalDataTransferredBytesDuringTimeRange',
            'storage_consumed_bytes': 'storageConsumedBytes',
            'vault_id': 'vaultId',
            'vault_name': 'vaultName',
            'vault_type': 'vaultType'
        }

        self._data_transfer_per_protection_job = data_transfer_per_protection_job
        self._logical_data_transferred_bytes_during_time_range = logical_data_transferred_bytes_during_time_range
        self._num_logical_bytes_transferred = num_logical_bytes_transferred
        self._num_physical_bytes_transferred = num_physical_bytes_transferred
        self._num_protection_jobs = num_protection_jobs
        self._physical_data_transferred_bytes_during_time_range = physical_data_transferred_bytes_during_time_range
        self._storage_consumed_bytes = storage_consumed_bytes
        self._vault_id = vault_id
        self._vault_name = vault_name
        self._vault_type = vault_type

    @property
    def data_transfer_per_protection_job(self):
        """
        Gets the data_transfer_per_protection_job of this DataTransferToVaultSummary.
        Specifies the data transfer summary statistics for each Protection Job that is transferring data from this Cohesity Cluster to this Vault (External Target).

        :return: The data_transfer_per_protection_job of this DataTransferToVaultSummary.
        :rtype: list[DataTransferToVaultPerProtectionJob]
        """
        return self._data_transfer_per_protection_job

    @data_transfer_per_protection_job.setter
    def data_transfer_per_protection_job(self, data_transfer_per_protection_job):
        """
        Sets the data_transfer_per_protection_job of this DataTransferToVaultSummary.
        Specifies the data transfer summary statistics for each Protection Job that is transferring data from this Cohesity Cluster to this Vault (External Target).

        :param data_transfer_per_protection_job: The data_transfer_per_protection_job of this DataTransferToVaultSummary.
        :type: list[DataTransferToVaultPerProtectionJob]
        """

        self._data_transfer_per_protection_job = data_transfer_per_protection_job

    @property
    def logical_data_transferred_bytes_during_time_range(self):
        """
        Gets the logical_data_transferred_bytes_during_time_range of this DataTransferToVaultSummary.
        Specifies the logical data transferred from this Cohesity Cluster to this Vault during the time period specified using the startTimeMsecs and endTimeMsecs parameters. For each day in the time period, an array element is returned, for example if 7 days are specified, 7 array elements are returned. The logical size is when the data is fully hydrated or expanded.

        :return: The logical_data_transferred_bytes_during_time_range of this DataTransferToVaultSummary.
        :rtype: list[int]
        """
        return self._logical_data_transferred_bytes_during_time_range

    @logical_data_transferred_bytes_during_time_range.setter
    def logical_data_transferred_bytes_during_time_range(self, logical_data_transferred_bytes_during_time_range):
        """
        Sets the logical_data_transferred_bytes_during_time_range of this DataTransferToVaultSummary.
        Specifies the logical data transferred from this Cohesity Cluster to this Vault during the time period specified using the startTimeMsecs and endTimeMsecs parameters. For each day in the time period, an array element is returned, for example if 7 days are specified, 7 array elements are returned. The logical size is when the data is fully hydrated or expanded.

        :param logical_data_transferred_bytes_during_time_range: The logical_data_transferred_bytes_during_time_range of this DataTransferToVaultSummary.
        :type: list[int]
        """

        self._logical_data_transferred_bytes_during_time_range = logical_data_transferred_bytes_during_time_range

    @property
    def num_logical_bytes_transferred(self):
        """
        Gets the num_logical_bytes_transferred of this DataTransferToVaultSummary.
        Specifies the total number of logical bytes that are transferred from this Cohesity Cluster to this Vault. The logical size is when the data is fully hydrated or expanded.

        :return: The num_logical_bytes_transferred of this DataTransferToVaultSummary.
        :rtype: int
        """
        return self._num_logical_bytes_transferred

    @num_logical_bytes_transferred.setter
    def num_logical_bytes_transferred(self, num_logical_bytes_transferred):
        """
        Sets the num_logical_bytes_transferred of this DataTransferToVaultSummary.
        Specifies the total number of logical bytes that are transferred from this Cohesity Cluster to this Vault. The logical size is when the data is fully hydrated or expanded.

        :param num_logical_bytes_transferred: The num_logical_bytes_transferred of this DataTransferToVaultSummary.
        :type: int
        """

        self._num_logical_bytes_transferred = num_logical_bytes_transferred

    @property
    def num_physical_bytes_transferred(self):
        """
        Gets the num_physical_bytes_transferred of this DataTransferToVaultSummary.
        Specifies the total number of physical bytes that are transferred from this Cohesity Cluster to this Vault.

        :return: The num_physical_bytes_transferred of this DataTransferToVaultSummary.
        :rtype: int
        """
        return self._num_physical_bytes_transferred

    @num_physical_bytes_transferred.setter
    def num_physical_bytes_transferred(self, num_physical_bytes_transferred):
        """
        Sets the num_physical_bytes_transferred of this DataTransferToVaultSummary.
        Specifies the total number of physical bytes that are transferred from this Cohesity Cluster to this Vault.

        :param num_physical_bytes_transferred: The num_physical_bytes_transferred of this DataTransferToVaultSummary.
        :type: int
        """

        self._num_physical_bytes_transferred = num_physical_bytes_transferred

    @property
    def num_protection_jobs(self):
        """
        Gets the num_protection_jobs of this DataTransferToVaultSummary.
        Specifies the number of Protection Jobs that transfer data to this Vault.

        :return: The num_protection_jobs of this DataTransferToVaultSummary.
        :rtype: int
        """
        return self._num_protection_jobs

    @num_protection_jobs.setter
    def num_protection_jobs(self, num_protection_jobs):
        """
        Sets the num_protection_jobs of this DataTransferToVaultSummary.
        Specifies the number of Protection Jobs that transfer data to this Vault.

        :param num_protection_jobs: The num_protection_jobs of this DataTransferToVaultSummary.
        :type: int
        """

        self._num_protection_jobs = num_protection_jobs

    @property
    def physical_data_transferred_bytes_during_time_range(self):
        """
        Gets the physical_data_transferred_bytes_during_time_range of this DataTransferToVaultSummary.
        Specifies the physical data transferred from this Cohesity Cluster to this Vault during the time period specified using the startTimeMsecs and endTimeMsecs parameters. For each day in the time period, an array element is returned, for example if 7 days are specified, 7 array elements are returned.

        :return: The physical_data_transferred_bytes_during_time_range of this DataTransferToVaultSummary.
        :rtype: list[int]
        """
        return self._physical_data_transferred_bytes_during_time_range

    @physical_data_transferred_bytes_during_time_range.setter
    def physical_data_transferred_bytes_during_time_range(self, physical_data_transferred_bytes_during_time_range):
        """
        Sets the physical_data_transferred_bytes_during_time_range of this DataTransferToVaultSummary.
        Specifies the physical data transferred from this Cohesity Cluster to this Vault during the time period specified using the startTimeMsecs and endTimeMsecs parameters. For each day in the time period, an array element is returned, for example if 7 days are specified, 7 array elements are returned.

        :param physical_data_transferred_bytes_during_time_range: The physical_data_transferred_bytes_during_time_range of this DataTransferToVaultSummary.
        :type: list[int]
        """

        self._physical_data_transferred_bytes_during_time_range = physical_data_transferred_bytes_during_time_range

    @property
    def storage_consumed_bytes(self):
        """
        Gets the storage_consumed_bytes of this DataTransferToVaultSummary.
        Specifies the storage consumed on the Vault as of last day in the specified time range.

        :return: The storage_consumed_bytes of this DataTransferToVaultSummary.
        :rtype: int
        """
        return self._storage_consumed_bytes

    @storage_consumed_bytes.setter
    def storage_consumed_bytes(self, storage_consumed_bytes):
        """
        Sets the storage_consumed_bytes of this DataTransferToVaultSummary.
        Specifies the storage consumed on the Vault as of last day in the specified time range.

        :param storage_consumed_bytes: The storage_consumed_bytes of this DataTransferToVaultSummary.
        :type: int
        """

        self._storage_consumed_bytes = storage_consumed_bytes

    @property
    def vault_id(self):
        """
        Gets the vault_id of this DataTransferToVaultSummary.
        The vault Id associated with the vault.

        :return: The vault_id of this DataTransferToVaultSummary.
        :rtype: int
        """
        return self._vault_id

    @vault_id.setter
    def vault_id(self, vault_id):
        """
        Sets the vault_id of this DataTransferToVaultSummary.
        The vault Id associated with the vault.

        :param vault_id: The vault_id of this DataTransferToVaultSummary.
        :type: int
        """

        self._vault_id = vault_id

    @property
    def vault_name(self):
        """
        Gets the vault_name of this DataTransferToVaultSummary.
        Specifies the name of the Vault (External Target).

        :return: The vault_name of this DataTransferToVaultSummary.
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """
        Sets the vault_name of this DataTransferToVaultSummary.
        Specifies the name of the Vault (External Target).

        :param vault_name: The vault_name of this DataTransferToVaultSummary.
        :type: str
        """

        self._vault_name = vault_name

    @property
    def vault_type(self):
        """
        Gets the vault_type of this DataTransferToVaultSummary.
        Specifies the type of Vault. 'kNearline' indicates a Google Nearline Vault. 'kColdline' indicates a Google Coldline Vault. 'kGlacier' indicates a AWS Glacier Vault. 'kS3' indicates a AWS S3 Vault. 'kAzureStandard' indicates a Microsoft Azure Standard Vault. 'kS3Compatible' indicates a AWS S3 Compatible Vault. (See the online help for supported types.) 'kQStarTape' indicates a QStar Tape Vault. 'kGoogleStandard' indicates a Google Standard Vault. 'kGoogleDRA' indicates a Google DRA Vault. 'kAWSGovCloud' indicates a AWS Gov Cloud Vault. 'kNAS' indicates a NAS Vault. 'kAzureGovCloud' indicates an Microsoft Azure Gov Cloud Vault.

        :return: The vault_type of this DataTransferToVaultSummary.
        :rtype: str
        """
        return self._vault_type

    @vault_type.setter
    def vault_type(self, vault_type):
        """
        Sets the vault_type of this DataTransferToVaultSummary.
        Specifies the type of Vault. 'kNearline' indicates a Google Nearline Vault. 'kColdline' indicates a Google Coldline Vault. 'kGlacier' indicates a AWS Glacier Vault. 'kS3' indicates a AWS S3 Vault. 'kAzureStandard' indicates a Microsoft Azure Standard Vault. 'kS3Compatible' indicates a AWS S3 Compatible Vault. (See the online help for supported types.) 'kQStarTape' indicates a QStar Tape Vault. 'kGoogleStandard' indicates a Google Standard Vault. 'kGoogleDRA' indicates a Google DRA Vault. 'kAWSGovCloud' indicates a AWS Gov Cloud Vault. 'kNAS' indicates a NAS Vault. 'kAzureGovCloud' indicates an Microsoft Azure Gov Cloud Vault.

        :param vault_type: The vault_type of this DataTransferToVaultSummary.
        :type: str
        """
        allowed_values = ["kNearline", "kColdline", "kGlacier", "kS3", "kAzureStandard", "kS3Compatible", "kQStarTape", "kGoogleStandard", "kGoogleDRA", "kAWSGovCloud", "kNAS", "kAzureGovCloud"]
        if vault_type not in allowed_values:
            raise ValueError(
                "Invalid value for `vault_type` ({0}), must be one of {1}"
                .format(vault_type, allowed_values)
            )

        self._vault_type = vault_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
