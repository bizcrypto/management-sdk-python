# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class KvmProtectionSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, agent_error=None, agent_id=None, cluster_id=None, datacenter_id=None, description=None, name=None, type=None, uuid=None):
        """
        KvmProtectionSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'agent_error': 'str',
            'agent_id': 'int',
            'cluster_id': 'str',
            'datacenter_id': 'str',
            'description': 'str',
            'name': 'str',
            'type': 'str',
            'uuid': 'str'
        }

        self.attribute_map = {
            'agent_error': 'agentError',
            'agent_id': 'agentId',
            'cluster_id': 'clusterId',
            'datacenter_id': 'datacenterId',
            'description': 'description',
            'name': 'name',
            'type': 'type',
            'uuid': 'uuid'
        }

        self._agent_error = agent_error
        self._agent_id = agent_id
        self._cluster_id = cluster_id
        self._datacenter_id = datacenter_id
        self._description = description
        self._name = name
        self._type = type
        self._uuid = uuid

    @property
    def agent_error(self):
        """
        Gets the agent_error of this KvmProtectionSource.
        Specifies a message when the agent cannot be reached.

        :return: The agent_error of this KvmProtectionSource.
        :rtype: str
        """
        return self._agent_error

    @agent_error.setter
    def agent_error(self, agent_error):
        """
        Sets the agent_error of this KvmProtectionSource.
        Specifies a message when the agent cannot be reached.

        :param agent_error: The agent_error of this KvmProtectionSource.
        :type: str
        """

        self._agent_error = agent_error

    @property
    def agent_id(self):
        """
        Gets the agent_id of this KvmProtectionSource.
        Specifies the ID of the Agent with which this KVM entity is associated when the entity represents a Delegate host or KVM host.

        :return: The agent_id of this KvmProtectionSource.
        :rtype: int
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """
        Sets the agent_id of this KvmProtectionSource.
        Specifies the ID of the Agent with which this KVM entity is associated when the entity represents a Delegate host or KVM host.

        :param agent_id: The agent_id of this KvmProtectionSource.
        :type: int
        """

        self._agent_id = agent_id

    @property
    def cluster_id(self):
        """
        Gets the cluster_id of this KvmProtectionSource.
        Specifies the cluster ID for 'kCluster' objects.

        :return: The cluster_id of this KvmProtectionSource.
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """
        Sets the cluster_id of this KvmProtectionSource.
        Specifies the cluster ID for 'kCluster' objects.

        :param cluster_id: The cluster_id of this KvmProtectionSource.
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def datacenter_id(self):
        """
        Gets the datacenter_id of this KvmProtectionSource.
        Specifies the ID of the 'kDatacenter' objects.

        :return: The datacenter_id of this KvmProtectionSource.
        :rtype: str
        """
        return self._datacenter_id

    @datacenter_id.setter
    def datacenter_id(self, datacenter_id):
        """
        Sets the datacenter_id of this KvmProtectionSource.
        Specifies the ID of the 'kDatacenter' objects.

        :param datacenter_id: The datacenter_id of this KvmProtectionSource.
        :type: str
        """

        self._datacenter_id = datacenter_id

    @property
    def description(self):
        """
        Gets the description of this KvmProtectionSource.
        Specifies a description about the Protection Source.

        :return: The description of this KvmProtectionSource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this KvmProtectionSource.
        Specifies a description about the Protection Source.

        :param description: The description of this KvmProtectionSource.
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """
        Gets the name of this KvmProtectionSource.
        Specifies the name of the KVM entity.

        :return: The name of this KvmProtectionSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this KvmProtectionSource.
        Specifies the name of the KVM entity.

        :param name: The name of this KvmProtectionSource.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this KvmProtectionSource.
        Specifies the type of KVM Protection Source entities such as 'kDatacenter', 'kCluster', 'kVirtualMachine', etc. Specifies the type of an KVM source entity. 'kOVirtManager' indicates the root entity registerd with Cohesity cluster. 'kStandaloneHost' indicates a host registered with Cohesity cluster. 'kDatacenter' indicates a KVM datacenter managed by the OVirt manager. 'kCluster' indicates a KVM cluster managed by the OVirt manager. 'kHost' indicates a host within the KVM environment. 'kVirtualMachine' indicates a virtual machine in the KVM enironment. 'kNetwork' represents a network used by the virtual machine entity. 'kStorageDomain' represents a storage domain in the KVM environment.

        :return: The type of this KvmProtectionSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this KvmProtectionSource.
        Specifies the type of KVM Protection Source entities such as 'kDatacenter', 'kCluster', 'kVirtualMachine', etc. Specifies the type of an KVM source entity. 'kOVirtManager' indicates the root entity registerd with Cohesity cluster. 'kStandaloneHost' indicates a host registered with Cohesity cluster. 'kDatacenter' indicates a KVM datacenter managed by the OVirt manager. 'kCluster' indicates a KVM cluster managed by the OVirt manager. 'kHost' indicates a host within the KVM environment. 'kVirtualMachine' indicates a virtual machine in the KVM enironment. 'kNetwork' represents a network used by the virtual machine entity. 'kStorageDomain' represents a storage domain in the KVM environment.

        :param type: The type of this KvmProtectionSource.
        :type: str
        """
        allowed_values = ["kOVirtManager", "kStandaloneHost", "kDatacenter", "kCluster", "kHost", "kVirtualMachine", "kNetwork", "kStorageDomain"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """
        Gets the uuid of this KvmProtectionSource.
        Specifies the UUID of the Object. This is unique within the KVM environment.

        :return: The uuid of this KvmProtectionSource.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this KvmProtectionSource.
        Specifies the UUID of the Object. This is unique within the KVM environment.

        :param uuid: The uuid of this KvmProtectionSource.
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
