# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CopyRunStats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, end_time_usecs=None, is_incremental=None, logical_bytes_transferred=None, logical_size_bytes=None, logical_transfer_rate_bps=None, physical_bytes_transferred=None, start_time_usecs=None):
        """
        CopyRunStats - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'end_time_usecs': 'int',
            'is_incremental': 'bool',
            'logical_bytes_transferred': 'int',
            'logical_size_bytes': 'int',
            'logical_transfer_rate_bps': 'int',
            'physical_bytes_transferred': 'int',
            'start_time_usecs': 'int'
        }

        self.attribute_map = {
            'end_time_usecs': 'endTimeUsecs',
            'is_incremental': 'isIncremental',
            'logical_bytes_transferred': 'logicalBytesTransferred',
            'logical_size_bytes': 'logicalSizeBytes',
            'logical_transfer_rate_bps': 'logicalTransferRateBps',
            'physical_bytes_transferred': 'physicalBytesTransferred',
            'start_time_usecs': 'startTimeUsecs'
        }

        self._end_time_usecs = end_time_usecs
        self._is_incremental = is_incremental
        self._logical_bytes_transferred = logical_bytes_transferred
        self._logical_size_bytes = logical_size_bytes
        self._logical_transfer_rate_bps = logical_transfer_rate_bps
        self._physical_bytes_transferred = physical_bytes_transferred
        self._start_time_usecs = start_time_usecs

    @property
    def end_time_usecs(self):
        """
        Gets the end_time_usecs of this CopyRunStats.
        Specifies the time when this replication ended. If not set, then the replication has not ended yet.

        :return: The end_time_usecs of this CopyRunStats.
        :rtype: int
        """
        return self._end_time_usecs

    @end_time_usecs.setter
    def end_time_usecs(self, end_time_usecs):
        """
        Sets the end_time_usecs of this CopyRunStats.
        Specifies the time when this replication ended. If not set, then the replication has not ended yet.

        :param end_time_usecs: The end_time_usecs of this CopyRunStats.
        :type: int
        """

        self._end_time_usecs = end_time_usecs

    @property
    def is_incremental(self):
        """
        Gets the is_incremental of this CopyRunStats.
        Specifies whether this archival is incremental for archival targets.

        :return: The is_incremental of this CopyRunStats.
        :rtype: bool
        """
        return self._is_incremental

    @is_incremental.setter
    def is_incremental(self, is_incremental):
        """
        Sets the is_incremental of this CopyRunStats.
        Specifies whether this archival is incremental for archival targets.

        :param is_incremental: The is_incremental of this CopyRunStats.
        :type: bool
        """

        self._is_incremental = is_incremental

    @property
    def logical_bytes_transferred(self):
        """
        Gets the logical_bytes_transferred of this CopyRunStats.
        Specifies the number of logical bytes transferred for this replication so far. This value can never exceed the total logical size of the replicated view.

        :return: The logical_bytes_transferred of this CopyRunStats.
        :rtype: int
        """
        return self._logical_bytes_transferred

    @logical_bytes_transferred.setter
    def logical_bytes_transferred(self, logical_bytes_transferred):
        """
        Sets the logical_bytes_transferred of this CopyRunStats.
        Specifies the number of logical bytes transferred for this replication so far. This value can never exceed the total logical size of the replicated view.

        :param logical_bytes_transferred: The logical_bytes_transferred of this CopyRunStats.
        :type: int
        """

        self._logical_bytes_transferred = logical_bytes_transferred

    @property
    def logical_size_bytes(self):
        """
        Gets the logical_size_bytes of this CopyRunStats.
        Specifies the total amount of logical data to be transferred for this replication.

        :return: The logical_size_bytes of this CopyRunStats.
        :rtype: int
        """
        return self._logical_size_bytes

    @logical_size_bytes.setter
    def logical_size_bytes(self, logical_size_bytes):
        """
        Sets the logical_size_bytes of this CopyRunStats.
        Specifies the total amount of logical data to be transferred for this replication.

        :param logical_size_bytes: The logical_size_bytes of this CopyRunStats.
        :type: int
        """

        self._logical_size_bytes = logical_size_bytes

    @property
    def logical_transfer_rate_bps(self):
        """
        Gets the logical_transfer_rate_bps of this CopyRunStats.
        Specifies average logical bytes transfer rate in bytes per second for archchival targets.

        :return: The logical_transfer_rate_bps of this CopyRunStats.
        :rtype: int
        """
        return self._logical_transfer_rate_bps

    @logical_transfer_rate_bps.setter
    def logical_transfer_rate_bps(self, logical_transfer_rate_bps):
        """
        Sets the logical_transfer_rate_bps of this CopyRunStats.
        Specifies average logical bytes transfer rate in bytes per second for archchival targets.

        :param logical_transfer_rate_bps: The logical_transfer_rate_bps of this CopyRunStats.
        :type: int
        """

        self._logical_transfer_rate_bps = logical_transfer_rate_bps

    @property
    def physical_bytes_transferred(self):
        """
        Gets the physical_bytes_transferred of this CopyRunStats.
        Specifies the number of physical bytes sent over the wire for replication targets.

        :return: The physical_bytes_transferred of this CopyRunStats.
        :rtype: int
        """
        return self._physical_bytes_transferred

    @physical_bytes_transferred.setter
    def physical_bytes_transferred(self, physical_bytes_transferred):
        """
        Sets the physical_bytes_transferred of this CopyRunStats.
        Specifies the number of physical bytes sent over the wire for replication targets.

        :param physical_bytes_transferred: The physical_bytes_transferred of this CopyRunStats.
        :type: int
        """

        self._physical_bytes_transferred = physical_bytes_transferred

    @property
    def start_time_usecs(self):
        """
        Gets the start_time_usecs of this CopyRunStats.
        Specifies the time when this replication was started. If not set, then replication has not been started yet.

        :return: The start_time_usecs of this CopyRunStats.
        :rtype: int
        """
        return self._start_time_usecs

    @start_time_usecs.setter
    def start_time_usecs(self, start_time_usecs):
        """
        Sets the start_time_usecs of this CopyRunStats.
        Specifies the time when this replication was started. If not set, then replication has not been started yet.

        :param start_time_usecs: The start_time_usecs of this CopyRunStats.
        :type: int
        """

        self._start_time_usecs = start_time_usecs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
