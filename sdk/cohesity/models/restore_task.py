# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RestoreTask(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, acropolis_parameters=None, archive_task_uid=None, clone_view_parameters=None, continue_on_error=None, datastore_id=None, end_time_usecs=None, error=None, full_view_name=None, hyperv_parameters=None, id=None, mount_volumes_state=None, name=None, new_parent_id=None, objects=None, restore_object_state=None, start_time_usecs=None, status=None, target_view_created=None, type=None, username=None, view_box_id=None, vlan_parameters=None, vmware_parameters=None):
        """
        RestoreTask - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'acropolis_parameters': 'AcropolisRestoreParameters',
            'archive_task_uid': 'RestoreTaskArchiveTaskUid',
            'clone_view_parameters': 'RestoreTaskCloneViewParameters',
            'continue_on_error': 'bool',
            'datastore_id': 'int',
            'end_time_usecs': 'int',
            'error': 'RestoreTaskError',
            'full_view_name': 'str',
            'hyperv_parameters': 'HypervRestoreParameters',
            'id': 'int',
            'mount_volumes_state': 'MountVolumesState',
            'name': 'str',
            'new_parent_id': 'int',
            'objects': 'list[RestoreObject]',
            'restore_object_state': 'list[RestoreObjectState]',
            'start_time_usecs': 'int',
            'status': 'str',
            'target_view_created': 'bool',
            'type': 'str',
            'username': 'str',
            'view_box_id': 'int',
            'vlan_parameters': 'VlanParameters',
            'vmware_parameters': 'VmwareRestoreParameters'
        }

        self.attribute_map = {
            'acropolis_parameters': 'acropolisParameters',
            'archive_task_uid': 'archiveTaskUid',
            'clone_view_parameters': 'cloneViewParameters',
            'continue_on_error': 'continueOnError',
            'datastore_id': 'datastoreId',
            'end_time_usecs': 'endTimeUsecs',
            'error': 'error',
            'full_view_name': 'fullViewName',
            'hyperv_parameters': 'hypervParameters',
            'id': 'id',
            'mount_volumes_state': 'mountVolumesState',
            'name': 'name',
            'new_parent_id': 'newParentId',
            'objects': 'objects',
            'restore_object_state': 'restoreObjectState',
            'start_time_usecs': 'startTimeUsecs',
            'status': 'status',
            'target_view_created': 'targetViewCreated',
            'type': 'type',
            'username': 'username',
            'view_box_id': 'viewBoxId',
            'vlan_parameters': 'vlanParameters',
            'vmware_parameters': 'vmwareParameters'
        }

        self._acropolis_parameters = acropolis_parameters
        self._archive_task_uid = archive_task_uid
        self._clone_view_parameters = clone_view_parameters
        self._continue_on_error = continue_on_error
        self._datastore_id = datastore_id
        self._end_time_usecs = end_time_usecs
        self._error = error
        self._full_view_name = full_view_name
        self._hyperv_parameters = hyperv_parameters
        self._id = id
        self._mount_volumes_state = mount_volumes_state
        self._name = name
        self._new_parent_id = new_parent_id
        self._objects = objects
        self._restore_object_state = restore_object_state
        self._start_time_usecs = start_time_usecs
        self._status = status
        self._target_view_created = target_view_created
        self._type = type
        self._username = username
        self._view_box_id = view_box_id
        self._vlan_parameters = vlan_parameters
        self._vmware_parameters = vmware_parameters

    @property
    def acropolis_parameters(self):
        """
        Gets the acropolis_parameters of this RestoreTask.
        Specifies parameters for 'kAcropolis' restore task.

        :return: The acropolis_parameters of this RestoreTask.
        :rtype: AcropolisRestoreParameters
        """
        return self._acropolis_parameters

    @acropolis_parameters.setter
    def acropolis_parameters(self, acropolis_parameters):
        """
        Sets the acropolis_parameters of this RestoreTask.
        Specifies parameters for 'kAcropolis' restore task.

        :param acropolis_parameters: The acropolis_parameters of this RestoreTask.
        :type: AcropolisRestoreParameters
        """

        self._acropolis_parameters = acropolis_parameters

    @property
    def archive_task_uid(self):
        """
        Gets the archive_task_uid of this RestoreTask.


        :return: The archive_task_uid of this RestoreTask.
        :rtype: RestoreTaskArchiveTaskUid
        """
        return self._archive_task_uid

    @archive_task_uid.setter
    def archive_task_uid(self, archive_task_uid):
        """
        Sets the archive_task_uid of this RestoreTask.


        :param archive_task_uid: The archive_task_uid of this RestoreTask.
        :type: RestoreTaskArchiveTaskUid
        """

        self._archive_task_uid = archive_task_uid

    @property
    def clone_view_parameters(self):
        """
        Gets the clone_view_parameters of this RestoreTask.


        :return: The clone_view_parameters of this RestoreTask.
        :rtype: RestoreTaskCloneViewParameters
        """
        return self._clone_view_parameters

    @clone_view_parameters.setter
    def clone_view_parameters(self, clone_view_parameters):
        """
        Sets the clone_view_parameters of this RestoreTask.


        :param clone_view_parameters: The clone_view_parameters of this RestoreTask.
        :type: RestoreTaskCloneViewParameters
        """

        self._clone_view_parameters = clone_view_parameters

    @property
    def continue_on_error(self):
        """
        Gets the continue_on_error of this RestoreTask.
        Specifies if the Restore Task should continue when some operations on some objects fail. If true, the Cohesity Cluster ignores intermittent errors and restores as many objects as possible.

        :return: The continue_on_error of this RestoreTask.
        :rtype: bool
        """
        return self._continue_on_error

    @continue_on_error.setter
    def continue_on_error(self, continue_on_error):
        """
        Sets the continue_on_error of this RestoreTask.
        Specifies if the Restore Task should continue when some operations on some objects fail. If true, the Cohesity Cluster ignores intermittent errors and restores as many objects as possible.

        :param continue_on_error: The continue_on_error of this RestoreTask.
        :type: bool
        """

        self._continue_on_error = continue_on_error

    @property
    def datastore_id(self):
        """
        Gets the datastore_id of this RestoreTask.
        Specifies the datastore where the object's files are recovered to. This field is populated when objects are recovered to a different resource pool or to a different parent source. This field is not populated when objects are recovered to their original datastore locations in the original parent source.

        :return: The datastore_id of this RestoreTask.
        :rtype: int
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """
        Sets the datastore_id of this RestoreTask.
        Specifies the datastore where the object's files are recovered to. This field is populated when objects are recovered to a different resource pool or to a different parent source. This field is not populated when objects are recovered to their original datastore locations in the original parent source.

        :param datastore_id: The datastore_id of this RestoreTask.
        :type: int
        """

        self._datastore_id = datastore_id

    @property
    def end_time_usecs(self):
        """
        Gets the end_time_usecs of this RestoreTask.
        Specifies the end time of the Restore Task as a Unix epoch Timestamp (in microseconds). This field is only populated if the Restore Task completes.

        :return: The end_time_usecs of this RestoreTask.
        :rtype: int
        """
        return self._end_time_usecs

    @end_time_usecs.setter
    def end_time_usecs(self, end_time_usecs):
        """
        Sets the end_time_usecs of this RestoreTask.
        Specifies the end time of the Restore Task as a Unix epoch Timestamp (in microseconds). This field is only populated if the Restore Task completes.

        :param end_time_usecs: The end_time_usecs of this RestoreTask.
        :type: int
        """

        self._end_time_usecs = end_time_usecs

    @property
    def error(self):
        """
        Gets the error of this RestoreTask.


        :return: The error of this RestoreTask.
        :rtype: RestoreTaskError
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this RestoreTask.


        :param error: The error of this RestoreTask.
        :type: RestoreTaskError
        """

        self._error = error

    @property
    def full_view_name(self):
        """
        Gets the full_view_name of this RestoreTask.
        Specifies the full name of a View.

        :return: The full_view_name of this RestoreTask.
        :rtype: str
        """
        return self._full_view_name

    @full_view_name.setter
    def full_view_name(self, full_view_name):
        """
        Sets the full_view_name of this RestoreTask.
        Specifies the full name of a View.

        :param full_view_name: The full_view_name of this RestoreTask.
        :type: str
        """

        self._full_view_name = full_view_name

    @property
    def hyperv_parameters(self):
        """
        Gets the hyperv_parameters of this RestoreTask.
        Specifies additional parameters for 'kHyperV' restore objects.

        :return: The hyperv_parameters of this RestoreTask.
        :rtype: HypervRestoreParameters
        """
        return self._hyperv_parameters

    @hyperv_parameters.setter
    def hyperv_parameters(self, hyperv_parameters):
        """
        Sets the hyperv_parameters of this RestoreTask.
        Specifies additional parameters for 'kHyperV' restore objects.

        :param hyperv_parameters: The hyperv_parameters of this RestoreTask.
        :type: HypervRestoreParameters
        """

        self._hyperv_parameters = hyperv_parameters

    @property
    def id(self):
        """
        Gets the id of this RestoreTask.
        Specifies the id of the Restore Task assigned by Cohesity Cluster.

        :return: The id of this RestoreTask.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RestoreTask.
        Specifies the id of the Restore Task assigned by Cohesity Cluster.

        :param id: The id of this RestoreTask.
        :type: int
        """

        self._id = id

    @property
    def mount_volumes_state(self):
        """
        Gets the mount_volumes_state of this RestoreTask.
        Specifies the states of mounting all the volumes onto a mount target for a 'kRecoverVMs' Restore Task.

        :return: The mount_volumes_state of this RestoreTask.
        :rtype: MountVolumesState
        """
        return self._mount_volumes_state

    @mount_volumes_state.setter
    def mount_volumes_state(self, mount_volumes_state):
        """
        Sets the mount_volumes_state of this RestoreTask.
        Specifies the states of mounting all the volumes onto a mount target for a 'kRecoverVMs' Restore Task.

        :param mount_volumes_state: The mount_volumes_state of this RestoreTask.
        :type: MountVolumesState
        """

        self._mount_volumes_state = mount_volumes_state

    @property
    def name(self):
        """
        Gets the name of this RestoreTask.
        Specifies the name of the Restore Task. This field must be set and must be a unique name.

        :return: The name of this RestoreTask.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestoreTask.
        Specifies the name of the Restore Task. This field must be set and must be a unique name.

        :param name: The name of this RestoreTask.
        :type: str
        """

        self._name = name

    @property
    def new_parent_id(self):
        """
        Gets the new_parent_id of this RestoreTask.
        Specify a new registered parent Protection Source. If specified the selected objects are cloned or recovered to this new Protection Source. If not specified, objects are cloned or recovered to the original Protection Source that was managing them.

        :return: The new_parent_id of this RestoreTask.
        :rtype: int
        """
        return self._new_parent_id

    @new_parent_id.setter
    def new_parent_id(self, new_parent_id):
        """
        Sets the new_parent_id of this RestoreTask.
        Specify a new registered parent Protection Source. If specified the selected objects are cloned or recovered to this new Protection Source. If not specified, objects are cloned or recovered to the original Protection Source that was managing them.

        :param new_parent_id: The new_parent_id of this RestoreTask.
        :type: int
        """

        self._new_parent_id = new_parent_id

    @property
    def objects(self):
        """
        Gets the objects of this RestoreTask.
        Specifies a list of Protection Source objects or Protection Job objects (with specified Protection Source objects).

        :return: The objects of this RestoreTask.
        :rtype: list[RestoreObject]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """
        Sets the objects of this RestoreTask.
        Specifies a list of Protection Source objects or Protection Job objects (with specified Protection Source objects).

        :param objects: The objects of this RestoreTask.
        :type: list[RestoreObject]
        """

        self._objects = objects

    @property
    def restore_object_state(self):
        """
        Gets the restore_object_state of this RestoreTask.
        Specifies the states of all the objects for the 'kRecoverVMs' and 'kCloneVMs' Restore Tasks.

        :return: The restore_object_state of this RestoreTask.
        :rtype: list[RestoreObjectState]
        """
        return self._restore_object_state

    @restore_object_state.setter
    def restore_object_state(self, restore_object_state):
        """
        Sets the restore_object_state of this RestoreTask.
        Specifies the states of all the objects for the 'kRecoverVMs' and 'kCloneVMs' Restore Tasks.

        :param restore_object_state: The restore_object_state of this RestoreTask.
        :type: list[RestoreObjectState]
        """

        self._restore_object_state = restore_object_state

    @property
    def start_time_usecs(self):
        """
        Gets the start_time_usecs of this RestoreTask.
        Specifies the start time for the Restore Task as a Unix epoch Timestamp (in microseconds).

        :return: The start_time_usecs of this RestoreTask.
        :rtype: int
        """
        return self._start_time_usecs

    @start_time_usecs.setter
    def start_time_usecs(self, start_time_usecs):
        """
        Sets the start_time_usecs of this RestoreTask.
        Specifies the start time for the Restore Task as a Unix epoch Timestamp (in microseconds).

        :param start_time_usecs: The start_time_usecs of this RestoreTask.
        :type: int
        """

        self._start_time_usecs = start_time_usecs

    @property
    def status(self):
        """
        Gets the status of this RestoreTask.
        Specifies the overall status of the Restore Task. 'kReadyToSchedule' indicates the Restore Task is waiting to be scheduled. 'kProgressMonitorCreated' indicates the progress monitor for the Restore Task has been created. 'kRetrievedFromArchive' indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. 'kAdmitted' indicates the task has been admitted. After a task has been admitted, its status does not move back to 'kReadyToSchedule' state even if it is rescheduled. 'kInProgress' indicates that the Restore Task is in progress. 'kFinishingProgressMonitor' indicates that the Restore Task is finishing its progress monitoring. 'kFinished' indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task.

        :return: The status of this RestoreTask.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this RestoreTask.
        Specifies the overall status of the Restore Task. 'kReadyToSchedule' indicates the Restore Task is waiting to be scheduled. 'kProgressMonitorCreated' indicates the progress monitor for the Restore Task has been created. 'kRetrievedFromArchive' indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. 'kAdmitted' indicates the task has been admitted. After a task has been admitted, its status does not move back to 'kReadyToSchedule' state even if it is rescheduled. 'kInProgress' indicates that the Restore Task is in progress. 'kFinishingProgressMonitor' indicates that the Restore Task is finishing its progress monitoring. 'kFinished' indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task.

        :param status: The status of this RestoreTask.
        :type: str
        """
        allowed_values = ["kReadyToSchedule", "kProgressMonitorCreated", "kRetrievedFromArchive", "kAdmitted", "kInProgress", "kFinishingProgressMonitor", "kFinished"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target_view_created(self):
        """
        Gets the target_view_created of this RestoreTask.
        Is true if a new View was created by a 'kCloneVMs' Restore Task. This field is only set for a 'kCloneVMs' Restore Task.

        :return: The target_view_created of this RestoreTask.
        :rtype: bool
        """
        return self._target_view_created

    @target_view_created.setter
    def target_view_created(self, target_view_created):
        """
        Sets the target_view_created of this RestoreTask.
        Is true if a new View was created by a 'kCloneVMs' Restore Task. This field is only set for a 'kCloneVMs' Restore Task.

        :param target_view_created: The target_view_created of this RestoreTask.
        :type: bool
        """

        self._target_view_created = target_view_created

    @property
    def type(self):
        """
        Gets the type of this RestoreTask.
        Specifies the type of Restore Task.  'kRecoverVMs' specifies a Restore Task that recovers VMs. 'kCloneVMs' specifies a Restore Task that clones VMs. 'kCloneView' specifies a Restore Task that clones a View. 'kMountVolumes' specifies a Restore Task that mounts volumes. 'kRestoreFiles' specifies a Restore Task that recovers files and folders.

        :return: The type of this RestoreTask.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RestoreTask.
        Specifies the type of Restore Task.  'kRecoverVMs' specifies a Restore Task that recovers VMs. 'kCloneVMs' specifies a Restore Task that clones VMs. 'kCloneView' specifies a Restore Task that clones a View. 'kMountVolumes' specifies a Restore Task that mounts volumes. 'kRestoreFiles' specifies a Restore Task that recovers files and folders.

        :param type: The type of this RestoreTask.
        :type: str
        """
        allowed_values = ["kRecoverVMs", "kCloneVMs", "kCloneView", "kMountVolumes", "kRestoreFiles"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """
        Gets the username of this RestoreTask.
        Specifies the Cohesity user who requested this Restore Task.

        :return: The username of this RestoreTask.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this RestoreTask.
        Specifies the Cohesity user who requested this Restore Task.

        :param username: The username of this RestoreTask.
        :type: str
        """

        self._username = username

    @property
    def view_box_id(self):
        """
        Gets the view_box_id of this RestoreTask.
        Specifies the id of the Domain (View Box) where the View is stored.

        :return: The view_box_id of this RestoreTask.
        :rtype: int
        """
        return self._view_box_id

    @view_box_id.setter
    def view_box_id(self, view_box_id):
        """
        Sets the view_box_id of this RestoreTask.
        Specifies the id of the Domain (View Box) where the View is stored.

        :param view_box_id: The view_box_id of this RestoreTask.
        :type: int
        """

        self._view_box_id = view_box_id

    @property
    def vlan_parameters(self):
        """
        Gets the vlan_parameters of this RestoreTask.
        Specifies VLAN parameters for the restore operation.

        :return: The vlan_parameters of this RestoreTask.
        :rtype: VlanParameters
        """
        return self._vlan_parameters

    @vlan_parameters.setter
    def vlan_parameters(self, vlan_parameters):
        """
        Sets the vlan_parameters of this RestoreTask.
        Specifies VLAN parameters for the restore operation.

        :param vlan_parameters: The vlan_parameters of this RestoreTask.
        :type: VlanParameters
        """

        self._vlan_parameters = vlan_parameters

    @property
    def vmware_parameters(self):
        """
        Gets the vmware_parameters of this RestoreTask.
        Specifies additional parameters for 'kVmware' restore objects.

        :return: The vmware_parameters of this RestoreTask.
        :rtype: VmwareRestoreParameters
        """
        return self._vmware_parameters

    @vmware_parameters.setter
    def vmware_parameters(self, vmware_parameters):
        """
        Sets the vmware_parameters of this RestoreTask.
        Specifies additional parameters for 'kVmware' restore objects.

        :param vmware_parameters: The vmware_parameters of this RestoreTask.
        :type: VmwareRestoreParameters
        """

        self._vmware_parameters = vmware_parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
