# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PhysicalSpecialParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, application_parameters=None, enable_system_backup=None, file_paths=None, volume_guid=None, windows_parameters=None):
        """
        PhysicalSpecialParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'application_parameters': 'ApplicationParameters',
            'enable_system_backup': 'bool',
            'file_paths': 'list[FilePathParameters]',
            'volume_guid': 'list[str]',
            'windows_parameters': 'WindowsHostSnapshotParameters'
        }

        self.attribute_map = {
            'application_parameters': 'applicationParameters',
            'enable_system_backup': 'enableSystemBackup',
            'file_paths': 'filePaths',
            'volume_guid': 'volumeGuid',
            'windows_parameters': 'windowsParameters'
        }

        self._application_parameters = application_parameters
        self._enable_system_backup = enable_system_backup
        self._file_paths = file_paths
        self._volume_guid = volume_guid
        self._windows_parameters = windows_parameters

    @property
    def application_parameters(self):
        """
        Gets the application_parameters of this PhysicalSpecialParameters.
        Specifies parameters that are related to applications running on the Protection Source.

        :return: The application_parameters of this PhysicalSpecialParameters.
        :rtype: ApplicationParameters
        """
        return self._application_parameters

    @application_parameters.setter
    def application_parameters(self, application_parameters):
        """
        Sets the application_parameters of this PhysicalSpecialParameters.
        Specifies parameters that are related to applications running on the Protection Source.

        :param application_parameters: The application_parameters of this PhysicalSpecialParameters.
        :type: ApplicationParameters
        """

        self._application_parameters = application_parameters

    @property
    def enable_system_backup(self):
        """
        Gets the enable_system_backup of this PhysicalSpecialParameters.
        Specifies whether to allow system backup using 3rd party tools installed on the Protection Host. System backups are used for doing bare metal recovery later. This field is applicable only for System backups.

        :return: The enable_system_backup of this PhysicalSpecialParameters.
        :rtype: bool
        """
        return self._enable_system_backup

    @enable_system_backup.setter
    def enable_system_backup(self, enable_system_backup):
        """
        Sets the enable_system_backup of this PhysicalSpecialParameters.
        Specifies whether to allow system backup using 3rd party tools installed on the Protection Host. System backups are used for doing bare metal recovery later. This field is applicable only for System backups.

        :param enable_system_backup: The enable_system_backup of this PhysicalSpecialParameters.
        :type: bool
        """

        self._enable_system_backup = enable_system_backup

    @property
    def file_paths(self):
        """
        Gets the file_paths of this PhysicalSpecialParameters.
        Specifies a list of directories or files to protect in a Physical Server.

        :return: The file_paths of this PhysicalSpecialParameters.
        :rtype: list[FilePathParameters]
        """
        return self._file_paths

    @file_paths.setter
    def file_paths(self, file_paths):
        """
        Sets the file_paths of this PhysicalSpecialParameters.
        Specifies a list of directories or files to protect in a Physical Server.

        :param file_paths: The file_paths of this PhysicalSpecialParameters.
        :type: list[FilePathParameters]
        """

        self._file_paths = file_paths

    @property
    def volume_guid(self):
        """
        Gets the volume_guid of this PhysicalSpecialParameters.
        Specifies the subset of mounted volumes to protect in a Physical Server. If not specified, all mounted volumes on a Physical Server are protected.

        :return: The volume_guid of this PhysicalSpecialParameters.
        :rtype: list[str]
        """
        return self._volume_guid

    @volume_guid.setter
    def volume_guid(self, volume_guid):
        """
        Sets the volume_guid of this PhysicalSpecialParameters.
        Specifies the subset of mounted volumes to protect in a Physical Server. If not specified, all mounted volumes on a Physical Server are protected.

        :param volume_guid: The volume_guid of this PhysicalSpecialParameters.
        :type: list[str]
        """

        self._volume_guid = volume_guid

    @property
    def windows_parameters(self):
        """
        Gets the windows_parameters of this PhysicalSpecialParameters.
        Specifies parameters applicable only to Windows hosts.

        :return: The windows_parameters of this PhysicalSpecialParameters.
        :rtype: WindowsHostSnapshotParameters
        """
        return self._windows_parameters

    @windows_parameters.setter
    def windows_parameters(self, windows_parameters):
        """
        Sets the windows_parameters of this PhysicalSpecialParameters.
        Specifies parameters applicable only to Windows hosts.

        :param windows_parameters: The windows_parameters of this PhysicalSpecialParameters.
        :type: WindowsHostSnapshotParameters
        """

        self._windows_parameters = windows_parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
