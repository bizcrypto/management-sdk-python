# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ThroughputTile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, max_read_throughput=None, max_write_throughput=None, read_throughput_samples=None, write_throughput_samples=None):
        """
        ThroughputTile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'max_read_throughput': 'int',
            'max_write_throughput': 'int',
            'read_throughput_samples': 'list[Sample]',
            'write_throughput_samples': 'list[Sample]'
        }

        self.attribute_map = {
            'max_read_throughput': 'maxReadThroughput',
            'max_write_throughput': 'maxWriteThroughput',
            'read_throughput_samples': 'readThroughputSamples',
            'write_throughput_samples': 'writeThroughputSamples'
        }

        self._max_read_throughput = max_read_throughput
        self._max_write_throughput = max_write_throughput
        self._read_throughput_samples = read_throughput_samples
        self._write_throughput_samples = write_throughput_samples

    @property
    def max_read_throughput(self):
        """
        Gets the max_read_throughput of this ThroughputTile.
        Maxium Read throughput in last 24 hours.

        :return: The max_read_throughput of this ThroughputTile.
        :rtype: int
        """
        return self._max_read_throughput

    @max_read_throughput.setter
    def max_read_throughput(self, max_read_throughput):
        """
        Sets the max_read_throughput of this ThroughputTile.
        Maxium Read throughput in last 24 hours.

        :param max_read_throughput: The max_read_throughput of this ThroughputTile.
        :type: int
        """

        self._max_read_throughput = max_read_throughput

    @property
    def max_write_throughput(self):
        """
        Gets the max_write_throughput of this ThroughputTile.
        Maximum Write throughput in last 24 hours.

        :return: The max_write_throughput of this ThroughputTile.
        :rtype: int
        """
        return self._max_write_throughput

    @max_write_throughput.setter
    def max_write_throughput(self, max_write_throughput):
        """
        Sets the max_write_throughput of this ThroughputTile.
        Maximum Write throughput in last 24 hours.

        :param max_write_throughput: The max_write_throughput of this ThroughputTile.
        :type: int
        """

        self._max_write_throughput = max_write_throughput

    @property
    def read_throughput_samples(self):
        """
        Gets the read_throughput_samples of this ThroughputTile.
        Read throughput samples taken for the past 24 hours at 10 minutes interval given in descending order of time.

        :return: The read_throughput_samples of this ThroughputTile.
        :rtype: list[Sample]
        """
        return self._read_throughput_samples

    @read_throughput_samples.setter
    def read_throughput_samples(self, read_throughput_samples):
        """
        Sets the read_throughput_samples of this ThroughputTile.
        Read throughput samples taken for the past 24 hours at 10 minutes interval given in descending order of time.

        :param read_throughput_samples: The read_throughput_samples of this ThroughputTile.
        :type: list[Sample]
        """

        self._read_throughput_samples = read_throughput_samples

    @property
    def write_throughput_samples(self):
        """
        Gets the write_throughput_samples of this ThroughputTile.
        Write throughput samples taken for the past 24 hours at 10 minutes interval given in descending order of time.

        :return: The write_throughput_samples of this ThroughputTile.
        :rtype: list[Sample]
        """
        return self._write_throughput_samples

    @write_throughput_samples.setter
    def write_throughput_samples(self, write_throughput_samples):
        """
        Sets the write_throughput_samples of this ThroughputTile.
        Write throughput samples taken for the past 24 hours at 10 minutes interval given in descending order of time.

        :param write_throughput_samples: The write_throughput_samples of this ThroughputTile.
        :type: list[Sample]
        """

        self._write_throughput_samples = write_throughput_samples

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
