# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PhysicalProtectionSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, agents=None, host_type=None, id=None, name=None, type=None, volumes=None):
        """
        PhysicalProtectionSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'agents': 'list[AgentInformation]',
            'host_type': 'str',
            'id': 'PhysicalProtectionSourceId',
            'name': 'str',
            'type': 'str',
            'volumes': 'list[PhysicalVolume]'
        }

        self.attribute_map = {
            'agents': 'agents',
            'host_type': 'hostType',
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'volumes': 'volumes'
        }

        self._agents = agents
        self._host_type = host_type
        self._id = id
        self._name = name
        self._type = type
        self._volumes = volumes

    @property
    def agents(self):
        """
        Gets the agents of this PhysicalProtectionSource.
        Specifiles the agents running on the Physical Protection Source and the status information.

        :return: The agents of this PhysicalProtectionSource.
        :rtype: list[AgentInformation]
        """
        return self._agents

    @agents.setter
    def agents(self, agents):
        """
        Sets the agents of this PhysicalProtectionSource.
        Specifiles the agents running on the Physical Protection Source and the status information.

        :param agents: The agents of this PhysicalProtectionSource.
        :type: list[AgentInformation]
        """

        self._agents = agents

    @property
    def host_type(self):
        """
        Gets the host_type of this PhysicalProtectionSource.
        Specifies the environment type for the host. 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system.

        :return: The host_type of this PhysicalProtectionSource.
        :rtype: str
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """
        Sets the host_type of this PhysicalProtectionSource.
        Specifies the environment type for the host. 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system.

        :param host_type: The host_type of this PhysicalProtectionSource.
        :type: str
        """
        allowed_values = ["kLinux", "kWindows"]
        if host_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_type` ({0}), must be one of {1}"
                .format(host_type, allowed_values)
            )

        self._host_type = host_type

    @property
    def id(self):
        """
        Gets the id of this PhysicalProtectionSource.


        :return: The id of this PhysicalProtectionSource.
        :rtype: PhysicalProtectionSourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PhysicalProtectionSource.


        :param id: The id of this PhysicalProtectionSource.
        :type: PhysicalProtectionSourceId
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this PhysicalProtectionSource.
        Specifies a human readable name of the Protection Source.

        :return: The name of this PhysicalProtectionSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PhysicalProtectionSource.
        Specifies a human readable name of the Protection Source.

        :param name: The name of this PhysicalProtectionSource.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this PhysicalProtectionSource.
        Specifies the type of managed Object in a Physical Protection Source. 'kHost' indicates a single physical server. 'kWindowsCluster' indicates a Microsoft Windows cluster.

        :return: The type of this PhysicalProtectionSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this PhysicalProtectionSource.
        Specifies the type of managed Object in a Physical Protection Source. 'kHost' indicates a single physical server. 'kWindowsCluster' indicates a Microsoft Windows cluster.

        :param type: The type of this PhysicalProtectionSource.
        :type: str
        """
        allowed_values = ["kHost", "kWindowsCluster"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def volumes(self):
        """
        Gets the volumes of this PhysicalProtectionSource.
        Specifies the volumes available on the physical host. These fields are populated only for the kPhysicalHost type.

        :return: The volumes of this PhysicalProtectionSource.
        :rtype: list[PhysicalVolume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """
        Sets the volumes of this PhysicalProtectionSource.
        Specifies the volumes available on the physical host. These fields are populated only for the kPhysicalHost type.

        :param volumes: The volumes of this PhysicalProtectionSource.
        :type: list[PhysicalVolume]
        """

        self._volumes = volumes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
