# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VolumeSecurityInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, group_id=None, permissions=None, style=None, user_id=None):
        """
        VolumeSecurityInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'group_id': 'int',
            'permissions': 'str',
            'style': 'str',
            'user_id': 'int'
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'permissions': 'permissions',
            'style': 'style',
            'user_id': 'userId'
        }

        self._group_id = group_id
        self._permissions = permissions
        self._style = style
        self._user_id = user_id

    @property
    def group_id(self):
        """
        Gets the group_id of this VolumeSecurityInfo.
        Specifies the Unix group ID for this volume. 0 indicates the root id.

        :return: The group_id of this VolumeSecurityInfo.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """
        Sets the group_id of this VolumeSecurityInfo.
        Specifies the Unix group ID for this volume. 0 indicates the root id.

        :param group_id: The group_id of this VolumeSecurityInfo.
        :type: int
        """

        self._group_id = group_id

    @property
    def permissions(self):
        """
        Gets the permissions of this VolumeSecurityInfo.
        Specifies the Unix permission bits in octal string format.

        :return: The permissions of this VolumeSecurityInfo.
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """
        Sets the permissions of this VolumeSecurityInfo.
        Specifies the Unix permission bits in octal string format.

        :param permissions: The permissions of this VolumeSecurityInfo.
        :type: str
        """

        self._permissions = permissions

    @property
    def style(self):
        """
        Gets the style of this VolumeSecurityInfo.
        Specifies the security style associated with this volume. Specifies the type of a NetApp Volume. 'kUnix' indicates Unix-style security. 'kNtfs' indicates Windows NTFS-style security. 'kMixed' indicates mixed-style security. 'kUnified' indicates Unified-style security.

        :return: The style of this VolumeSecurityInfo.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """
        Sets the style of this VolumeSecurityInfo.
        Specifies the security style associated with this volume. Specifies the type of a NetApp Volume. 'kUnix' indicates Unix-style security. 'kNtfs' indicates Windows NTFS-style security. 'kMixed' indicates mixed-style security. 'kUnified' indicates Unified-style security.

        :param style: The style of this VolumeSecurityInfo.
        :type: str
        """
        allowed_values = ["kUnix", "kNtfs", "kMixed", "kUnified"]
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def user_id(self):
        """
        Gets the user_id of this VolumeSecurityInfo.
        Specifies the Unix user id for this volume. 0 indicates the root id.

        :return: The user_id of this VolumeSecurityInfo.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this VolumeSecurityInfo.
        Specifies the Unix user id for this volume. 0 indicates the root id.

        :param user_id: The user_id of this VolumeSecurityInfo.
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
