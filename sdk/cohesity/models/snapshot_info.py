# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SnapshotInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, environment=None, relative_snapshot_directory=None, root_path=None, view_name=None):
        """
        SnapshotInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'environment': 'str',
            'relative_snapshot_directory': 'str',
            'root_path': 'str',
            'view_name': 'str'
        }

        self.attribute_map = {
            'environment': 'environment',
            'relative_snapshot_directory': 'relativeSnapshotDirectory',
            'root_path': 'rootPath',
            'view_name': 'viewName'
        }

        self._environment = environment
        self._relative_snapshot_directory = relative_snapshot_directory
        self._root_path = root_path
        self._view_name = view_name

    @property
    def environment(self):
        """
        Gets the environment of this SnapshotInfo.
        Specifies the environment type (such as kVMware or kSQL) that contains the source to backup. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :return: The environment of this SnapshotInfo.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this SnapshotInfo.
        Specifies the environment type (such as kVMware or kSQL) that contains the source to backup. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :param environment: The environment of this SnapshotInfo.
        :type: str
        """
        allowed_values = ["kVMware", "kSQL", "kView", "kPuppeteer", "kPhysical", "kPure", "kNetapp", "kGenericNas", "kHyperV", "kAcropolis", "kAzure"]
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def relative_snapshot_directory(self):
        """
        Gets the relative_snapshot_directory of this SnapshotInfo.
        Specifies the relative directory path from root path where the snapshot is stored.

        :return: The relative_snapshot_directory of this SnapshotInfo.
        :rtype: str
        """
        return self._relative_snapshot_directory

    @relative_snapshot_directory.setter
    def relative_snapshot_directory(self, relative_snapshot_directory):
        """
        Sets the relative_snapshot_directory of this SnapshotInfo.
        Specifies the relative directory path from root path where the snapshot is stored.

        :param relative_snapshot_directory: The relative_snapshot_directory of this SnapshotInfo.
        :type: str
        """

        self._relative_snapshot_directory = relative_snapshot_directory

    @property
    def root_path(self):
        """
        Gets the root_path of this SnapshotInfo.
        Specifies the root path where the snapshot is stored, using the following format: \"/ViewBox/ViewName/fs\".

        :return: The root_path of this SnapshotInfo.
        :rtype: str
        """
        return self._root_path

    @root_path.setter
    def root_path(self, root_path):
        """
        Sets the root_path of this SnapshotInfo.
        Specifies the root path where the snapshot is stored, using the following format: \"/ViewBox/ViewName/fs\".

        :param root_path: The root_path of this SnapshotInfo.
        :type: str
        """

        self._root_path = root_path

    @property
    def view_name(self):
        """
        Gets the view_name of this SnapshotInfo.
        Specifies the name of the View that is cloned. NOTE: This field is only populated for View cloning.

        :return: The view_name of this SnapshotInfo.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """
        Sets the view_name of this SnapshotInfo.
        Specifies the name of the View that is cloned. NOTE: This field is only populated for View cloning.

        :param view_name: The view_name of this SnapshotInfo.
        :type: str
        """

        self._view_name = view_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
