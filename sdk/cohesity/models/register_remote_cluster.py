# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RegisterRemoteCluster(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, all_endpoints_reachable=None, bandwidth_limit=None, clear_interfaces=None, clear_vlan_id=None, cluster_id=None, compression_enabled=None, encryption_key=None, network_interface_group=None, network_interface_ids=None, password=None, purpose_remote_access=None, purpose_replication=None, remote_access_credentials=None, remote_ips=None, remote_iris_ports=None, user_name=None, validate_only=None, view_box_pair_info=None, vlan_id=None):
        """
        RegisterRemoteCluster - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'all_endpoints_reachable': 'bool',
            'bandwidth_limit': 'BandwidthLimit',
            'clear_interfaces': 'bool',
            'clear_vlan_id': 'bool',
            'cluster_id': 'int',
            'compression_enabled': 'bool',
            'encryption_key': 'str',
            'network_interface_group': 'str',
            'network_interface_ids': 'list[int]',
            'password': 'str',
            'purpose_remote_access': 'bool',
            'purpose_replication': 'bool',
            'remote_access_credentials': 'AccessTokenCredential',
            'remote_ips': 'list[str]',
            'remote_iris_ports': 'list[int]',
            'user_name': 'str',
            'validate_only': 'bool',
            'view_box_pair_info': 'list[ViewBoxPairInfo]',
            'vlan_id': 'int'
        }

        self.attribute_map = {
            'all_endpoints_reachable': 'allEndpointsReachable',
            'bandwidth_limit': 'bandwidthLimit',
            'clear_interfaces': 'clearInterfaces',
            'clear_vlan_id': 'clearVlanId',
            'cluster_id': 'clusterId',
            'compression_enabled': 'compressionEnabled',
            'encryption_key': 'encryptionKey',
            'network_interface_group': 'networkInterfaceGroup',
            'network_interface_ids': 'networkInterfaceIds',
            'password': 'password',
            'purpose_remote_access': 'purposeRemoteAccess',
            'purpose_replication': 'purposeReplication',
            'remote_access_credentials': 'remoteAccessCredentials',
            'remote_ips': 'remoteIps',
            'remote_iris_ports': 'remoteIrisPorts',
            'user_name': 'userName',
            'validate_only': 'validateOnly',
            'view_box_pair_info': 'viewBoxPairInfo',
            'vlan_id': 'vlanId'
        }

        self._all_endpoints_reachable = all_endpoints_reachable
        self._bandwidth_limit = bandwidth_limit
        self._clear_interfaces = clear_interfaces
        self._clear_vlan_id = clear_vlan_id
        self._cluster_id = cluster_id
        self._compression_enabled = compression_enabled
        self._encryption_key = encryption_key
        self._network_interface_group = network_interface_group
        self._network_interface_ids = network_interface_ids
        self._password = password
        self._purpose_remote_access = purpose_remote_access
        self._purpose_replication = purpose_replication
        self._remote_access_credentials = remote_access_credentials
        self._remote_ips = remote_ips
        self._remote_iris_ports = remote_iris_ports
        self._user_name = user_name
        self._validate_only = validate_only
        self._view_box_pair_info = view_box_pair_info
        self._vlan_id = vlan_id

    @property
    def all_endpoints_reachable(self):
        """
        Gets the all_endpoints_reachable of this RegisterRemoteCluster.
        Specifies whether any endpoint (such as a Node) on the remote Cluster is reachable from this local Cluster. If true, a service running on the local Cluster can communicate directly with any of its peers running on the remote Cluster, without using a proxy.

        :return: The all_endpoints_reachable of this RegisterRemoteCluster.
        :rtype: bool
        """
        return self._all_endpoints_reachable

    @all_endpoints_reachable.setter
    def all_endpoints_reachable(self, all_endpoints_reachable):
        """
        Sets the all_endpoints_reachable of this RegisterRemoteCluster.
        Specifies whether any endpoint (such as a Node) on the remote Cluster is reachable from this local Cluster. If true, a service running on the local Cluster can communicate directly with any of its peers running on the remote Cluster, without using a proxy.

        :param all_endpoints_reachable: The all_endpoints_reachable of this RegisterRemoteCluster.
        :type: bool
        """

        self._all_endpoints_reachable = all_endpoints_reachable

    @property
    def bandwidth_limit(self):
        """
        Gets the bandwidth_limit of this RegisterRemoteCluster.
        Specifies settings for limiting the data transfer rate between the local and remote Clusters.

        :return: The bandwidth_limit of this RegisterRemoteCluster.
        :rtype: BandwidthLimit
        """
        return self._bandwidth_limit

    @bandwidth_limit.setter
    def bandwidth_limit(self, bandwidth_limit):
        """
        Sets the bandwidth_limit of this RegisterRemoteCluster.
        Specifies settings for limiting the data transfer rate between the local and remote Clusters.

        :param bandwidth_limit: The bandwidth_limit of this RegisterRemoteCluster.
        :type: BandwidthLimit
        """

        self._bandwidth_limit = bandwidth_limit

    @property
    def clear_interfaces(self):
        """
        Gets the clear_interfaces of this RegisterRemoteCluster.


        :return: The clear_interfaces of this RegisterRemoteCluster.
        :rtype: bool
        """
        return self._clear_interfaces

    @clear_interfaces.setter
    def clear_interfaces(self, clear_interfaces):
        """
        Sets the clear_interfaces of this RegisterRemoteCluster.


        :param clear_interfaces: The clear_interfaces of this RegisterRemoteCluster.
        :type: bool
        """

        self._clear_interfaces = clear_interfaces

    @property
    def clear_vlan_id(self):
        """
        Gets the clear_vlan_id of this RegisterRemoteCluster.
        Specifies whether to clear the vlanId field, and thus stop using only the IPs in the VLAN for communicating with the remote Cluster.

        :return: The clear_vlan_id of this RegisterRemoteCluster.
        :rtype: bool
        """
        return self._clear_vlan_id

    @clear_vlan_id.setter
    def clear_vlan_id(self, clear_vlan_id):
        """
        Sets the clear_vlan_id of this RegisterRemoteCluster.
        Specifies whether to clear the vlanId field, and thus stop using only the IPs in the VLAN for communicating with the remote Cluster.

        :param clear_vlan_id: The clear_vlan_id of this RegisterRemoteCluster.
        :type: bool
        """

        self._clear_vlan_id = clear_vlan_id

    @property
    def cluster_id(self):
        """
        Gets the cluster_id of this RegisterRemoteCluster.
        Specifies the unique id of the remote Cluster.

        :return: The cluster_id of this RegisterRemoteCluster.
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """
        Sets the cluster_id of this RegisterRemoteCluster.
        Specifies the unique id of the remote Cluster.

        :param cluster_id: The cluster_id of this RegisterRemoteCluster.
        :type: int
        """

        self._cluster_id = cluster_id

    @property
    def compression_enabled(self):
        """
        Gets the compression_enabled of this RegisterRemoteCluster.
        Specifies whether to compress the outbound data when transferring the replication data over the network to the remote Cluster.

        :return: The compression_enabled of this RegisterRemoteCluster.
        :rtype: bool
        """
        return self._compression_enabled

    @compression_enabled.setter
    def compression_enabled(self, compression_enabled):
        """
        Sets the compression_enabled of this RegisterRemoteCluster.
        Specifies whether to compress the outbound data when transferring the replication data over the network to the remote Cluster.

        :param compression_enabled: The compression_enabled of this RegisterRemoteCluster.
        :type: bool
        """

        self._compression_enabled = compression_enabled

    @property
    def encryption_key(self):
        """
        Gets the encryption_key of this RegisterRemoteCluster.
        Specifies the encryption key used for encrypting the replication data from a local Cluster to a remote Cluster. If a key is not specified, replication traffic encryption is disabled. When Snapshots are replicated from a local Cluster to a remote Cluster, the encryption key specified on the local Cluster must be the same as the key specified on the remote Cluster.

        :return: The encryption_key of this RegisterRemoteCluster.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """
        Sets the encryption_key of this RegisterRemoteCluster.
        Specifies the encryption key used for encrypting the replication data from a local Cluster to a remote Cluster. If a key is not specified, replication traffic encryption is disabled. When Snapshots are replicated from a local Cluster to a remote Cluster, the encryption key specified on the local Cluster must be the same as the key specified on the remote Cluster.

        :param encryption_key: The encryption_key of this RegisterRemoteCluster.
        :type: str
        """

        self._encryption_key = encryption_key

    @property
    def network_interface_group(self):
        """
        Gets the network_interface_group of this RegisterRemoteCluster.
        Specifies the group name of the network interfaces to use for communicating with the remote Cluster.

        :return: The network_interface_group of this RegisterRemoteCluster.
        :rtype: str
        """
        return self._network_interface_group

    @network_interface_group.setter
    def network_interface_group(self, network_interface_group):
        """
        Sets the network_interface_group of this RegisterRemoteCluster.
        Specifies the group name of the network interfaces to use for communicating with the remote Cluster.

        :param network_interface_group: The network_interface_group of this RegisterRemoteCluster.
        :type: str
        """

        self._network_interface_group = network_interface_group

    @property
    def network_interface_ids(self):
        """
        Gets the network_interface_ids of this RegisterRemoteCluster.
        Specifies the ids of the network interfaces to use for communicating with the remote Cluster.

        :return: The network_interface_ids of this RegisterRemoteCluster.
        :rtype: list[int]
        """
        return self._network_interface_ids

    @network_interface_ids.setter
    def network_interface_ids(self, network_interface_ids):
        """
        Sets the network_interface_ids of this RegisterRemoteCluster.
        Specifies the ids of the network interfaces to use for communicating with the remote Cluster.

        :param network_interface_ids: The network_interface_ids of this RegisterRemoteCluster.
        :type: list[int]
        """

        self._network_interface_ids = network_interface_ids

    @property
    def password(self):
        """
        Gets the password of this RegisterRemoteCluster.
        Specifies the password for Cohesity user to use when connecting to the remote Cluster.

        :return: The password of this RegisterRemoteCluster.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this RegisterRemoteCluster.
        Specifies the password for Cohesity user to use when connecting to the remote Cluster.

        :param password: The password of this RegisterRemoteCluster.
        :type: str
        """

        self._password = password

    @property
    def purpose_remote_access(self):
        """
        Gets the purpose_remote_access of this RegisterRemoteCluster.
        Whether the remote cluster will be used for remote access for SPOG.

        :return: The purpose_remote_access of this RegisterRemoteCluster.
        :rtype: bool
        """
        return self._purpose_remote_access

    @purpose_remote_access.setter
    def purpose_remote_access(self, purpose_remote_access):
        """
        Sets the purpose_remote_access of this RegisterRemoteCluster.
        Whether the remote cluster will be used for remote access for SPOG.

        :param purpose_remote_access: The purpose_remote_access of this RegisterRemoteCluster.
        :type: bool
        """

        self._purpose_remote_access = purpose_remote_access

    @property
    def purpose_replication(self):
        """
        Gets the purpose_replication of this RegisterRemoteCluster.
        Whether the remote cluster will be used for replication.

        :return: The purpose_replication of this RegisterRemoteCluster.
        :rtype: bool
        """
        return self._purpose_replication

    @purpose_replication.setter
    def purpose_replication(self, purpose_replication):
        """
        Sets the purpose_replication of this RegisterRemoteCluster.
        Whether the remote cluster will be used for replication.

        :param purpose_replication: The purpose_replication of this RegisterRemoteCluster.
        :type: bool
        """

        self._purpose_replication = purpose_replication

    @property
    def remote_access_credentials(self):
        """
        Gets the remote_access_credentials of this RegisterRemoteCluster.
        Optional field for the user credentials to connect to Iris for remote access for SPOG. If this is not specified, then credentials specified for replication set up will be used for remote access for SPOG. Allowing a different user credentials to be set up for SPOG permits having different roles for remote access for SPOG and replication set up.

        :return: The remote_access_credentials of this RegisterRemoteCluster.
        :rtype: AccessTokenCredential
        """
        return self._remote_access_credentials

    @remote_access_credentials.setter
    def remote_access_credentials(self, remote_access_credentials):
        """
        Sets the remote_access_credentials of this RegisterRemoteCluster.
        Optional field for the user credentials to connect to Iris for remote access for SPOG. If this is not specified, then credentials specified for replication set up will be used for remote access for SPOG. Allowing a different user credentials to be set up for SPOG permits having different roles for remote access for SPOG and replication set up.

        :param remote_access_credentials: The remote_access_credentials of this RegisterRemoteCluster.
        :type: AccessTokenCredential
        """

        self._remote_access_credentials = remote_access_credentials

    @property
    def remote_ips(self):
        """
        Gets the remote_ips of this RegisterRemoteCluster.
        Specifies the IP addresses of the Nodes on the remote Cluster to connect with. These IP addresses can also be VIPS. Specifying hostnames is not supported.

        :return: The remote_ips of this RegisterRemoteCluster.
        :rtype: list[str]
        """
        return self._remote_ips

    @remote_ips.setter
    def remote_ips(self, remote_ips):
        """
        Sets the remote_ips of this RegisterRemoteCluster.
        Specifies the IP addresses of the Nodes on the remote Cluster to connect with. These IP addresses can also be VIPS. Specifying hostnames is not supported.

        :param remote_ips: The remote_ips of this RegisterRemoteCluster.
        :type: list[str]
        """

        self._remote_ips = remote_ips

    @property
    def remote_iris_ports(self):
        """
        Gets the remote_iris_ports of this RegisterRemoteCluster.
        Specifies the ports to use when connecting to the Nodes of the remote Cluster.

        :return: The remote_iris_ports of this RegisterRemoteCluster.
        :rtype: list[int]
        """
        return self._remote_iris_ports

    @remote_iris_ports.setter
    def remote_iris_ports(self, remote_iris_ports):
        """
        Sets the remote_iris_ports of this RegisterRemoteCluster.
        Specifies the ports to use when connecting to the Nodes of the remote Cluster.

        :param remote_iris_ports: The remote_iris_ports of this RegisterRemoteCluster.
        :type: list[int]
        """

        self._remote_iris_ports = remote_iris_ports

    @property
    def user_name(self):
        """
        Gets the user_name of this RegisterRemoteCluster.
        Specifies the Cohesity user name used to connect to the remote Cluster.

        :return: The user_name of this RegisterRemoteCluster.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this RegisterRemoteCluster.
        Specifies the Cohesity user name used to connect to the remote Cluster.

        :param user_name: The user_name of this RegisterRemoteCluster.
        :type: str
        """

        self._user_name = user_name

    @property
    def validate_only(self):
        """
        Gets the validate_only of this RegisterRemoteCluster.
        Whether to only validate the credentials without saving the information.

        :return: The validate_only of this RegisterRemoteCluster.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """
        Sets the validate_only of this RegisterRemoteCluster.
        Whether to only validate the credentials without saving the information.

        :param validate_only: The validate_only of this RegisterRemoteCluster.
        :type: bool
        """

        self._validate_only = validate_only

    @property
    def view_box_pair_info(self):
        """
        Gets the view_box_pair_info of this RegisterRemoteCluster.
        Specifies pairings between Storage Domains (View Boxes) on the local Cluster with Storage Domains (View Boxes) on a remote Cluster that are used in replication.

        :return: The view_box_pair_info of this RegisterRemoteCluster.
        :rtype: list[ViewBoxPairInfo]
        """
        return self._view_box_pair_info

    @view_box_pair_info.setter
    def view_box_pair_info(self, view_box_pair_info):
        """
        Sets the view_box_pair_info of this RegisterRemoteCluster.
        Specifies pairings between Storage Domains (View Boxes) on the local Cluster with Storage Domains (View Boxes) on a remote Cluster that are used in replication.

        :param view_box_pair_info: The view_box_pair_info of this RegisterRemoteCluster.
        :type: list[ViewBoxPairInfo]
        """

        self._view_box_pair_info = view_box_pair_info

    @property
    def vlan_id(self):
        """
        Gets the vlan_id of this RegisterRemoteCluster.
        Specifies the Id of the VLAN to use for communicating with the remote Cluster.

        :return: The vlan_id of this RegisterRemoteCluster.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """
        Sets the vlan_id of this RegisterRemoteCluster.
        Specifies the Id of the VLAN to use for communicating with the remote Cluster.

        :param vlan_id: The vlan_id of this RegisterRemoteCluster.
        :type: int
        """

        self._vlan_id = vlan_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
