# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RemoteProtectionJobInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_name=None, environment=None, job_name=None, job_uid=None):
        """
        RemoteProtectionJobInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cluster_name': 'str',
            'environment': 'str',
            'job_name': 'str',
            'job_uid': 'RemoteProtectionJobInformationJobUid'
        }

        self.attribute_map = {
            'cluster_name': 'clusterName',
            'environment': 'environment',
            'job_name': 'jobName',
            'job_uid': 'jobUid'
        }

        self._cluster_name = cluster_name
        self._environment = environment
        self._job_name = job_name
        self._job_uid = job_uid

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this RemoteProtectionJobInformation.
        Specifies the name of the original Cluster that archived the data to the Vault.

        :return: The cluster_name of this RemoteProtectionJobInformation.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this RemoteProtectionJobInformation.
        Specifies the name of the original Cluster that archived the data to the Vault.

        :param cluster_name: The cluster_name of this RemoteProtectionJobInformation.
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def environment(self):
        """
        Gets the environment of this RemoteProtectionJobInformation.
        Specifies the environment type (such as kVMware or kSQL) of the original archived Protection Job. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :return: The environment of this RemoteProtectionJobInformation.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this RemoteProtectionJobInformation.
        Specifies the environment type (such as kVMware or kSQL) of the original archived Protection Job. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :param environment: The environment of this RemoteProtectionJobInformation.
        :type: str
        """
        allowed_values = ["kVMware", "kSQL", "kView", "kPuppeteer", "kPhysical", "kPure", "kNetapp", "kGenericNas", "kHyperV", "kAcropolis", "kAzure"]
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def job_name(self):
        """
        Gets the job_name of this RemoteProtectionJobInformation.
        Specifies the name of the Protection Job on the original Cluster.

        :return: The job_name of this RemoteProtectionJobInformation.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """
        Sets the job_name of this RemoteProtectionJobInformation.
        Specifies the name of the Protection Job on the original Cluster.

        :param job_name: The job_name of this RemoteProtectionJobInformation.
        :type: str
        """

        self._job_name = job_name

    @property
    def job_uid(self):
        """
        Gets the job_uid of this RemoteProtectionJobInformation.


        :return: The job_uid of this RemoteProtectionJobInformation.
        :rtype: RemoteProtectionJobInformationJobUid
        """
        return self._job_uid

    @job_uid.setter
    def job_uid(self, job_uid):
        """
        Sets the job_uid of this RemoteProtectionJobInformation.


        :param job_uid: The job_uid of this RemoteProtectionJobInformation.
        :type: RemoteProtectionJobInformationJobUid
        """

        self._job_uid = job_uid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
