# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ApplicationRestoreObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, application_server_id=None, sql_restore_parameters=None, target_host_id=None, target_root_node_id=None):
        """
        ApplicationRestoreObject - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'application_server_id': 'int',
            'sql_restore_parameters': 'SqlRestoreParameters',
            'target_host_id': 'int',
            'target_root_node_id': 'int'
        }

        self.attribute_map = {
            'application_server_id': 'applicationServerId',
            'sql_restore_parameters': 'sqlRestoreParameters',
            'target_host_id': 'targetHostId',
            'target_root_node_id': 'targetRootNodeId'
        }

        self._application_server_id = application_server_id
        self._sql_restore_parameters = sql_restore_parameters
        self._target_host_id = target_host_id
        self._target_root_node_id = target_root_node_id

    @property
    def application_server_id(self):
        """
        Gets the application_server_id of this ApplicationRestoreObject.
        Specifies the Application Server to restore (for example, kSQL).

        :return: The application_server_id of this ApplicationRestoreObject.
        :rtype: int
        """
        return self._application_server_id

    @application_server_id.setter
    def application_server_id(self, application_server_id):
        """
        Sets the application_server_id of this ApplicationRestoreObject.
        Specifies the Application Server to restore (for example, kSQL).

        :param application_server_id: The application_server_id of this ApplicationRestoreObject.
        :type: int
        """

        self._application_server_id = application_server_id

    @property
    def sql_restore_parameters(self):
        """
        Gets the sql_restore_parameters of this ApplicationRestoreObject.
        Specifies parameters specific to this Application Server.

        :return: The sql_restore_parameters of this ApplicationRestoreObject.
        :rtype: SqlRestoreParameters
        """
        return self._sql_restore_parameters

    @sql_restore_parameters.setter
    def sql_restore_parameters(self, sql_restore_parameters):
        """
        Sets the sql_restore_parameters of this ApplicationRestoreObject.
        Specifies parameters specific to this Application Server.

        :param sql_restore_parameters: The sql_restore_parameters of this ApplicationRestoreObject.
        :type: SqlRestoreParameters
        """

        self._sql_restore_parameters = sql_restore_parameters

    @property
    def target_host_id(self):
        """
        Gets the target_host_id of this ApplicationRestoreObject.
        Specifies the target host if the application is to be restored to a different host. If this is empty, then the application is restored to the original host, which is the hosting Protection Source.

        :return: The target_host_id of this ApplicationRestoreObject.
        :rtype: int
        """
        return self._target_host_id

    @target_host_id.setter
    def target_host_id(self, target_host_id):
        """
        Sets the target_host_id of this ApplicationRestoreObject.
        Specifies the target host if the application is to be restored to a different host. If this is empty, then the application is restored to the original host, which is the hosting Protection Source.

        :param target_host_id: The target_host_id of this ApplicationRestoreObject.
        :type: int
        """

        self._target_host_id = target_host_id

    @property
    def target_root_node_id(self):
        """
        Gets the target_root_node_id of this ApplicationRestoreObject.
        Specifies the registered root node, like vCenter, of targetHost. If this is empty, then it is assumed the root node of the target host is the same as the host Protection Source of the application.

        :return: The target_root_node_id of this ApplicationRestoreObject.
        :rtype: int
        """
        return self._target_root_node_id

    @target_root_node_id.setter
    def target_root_node_id(self, target_root_node_id):
        """
        Sets the target_root_node_id of this ApplicationRestoreObject.
        Specifies the registered root node, like vCenter, of targetHost. If this is empty, then it is assumed the root node of the target host is the same as the host Protection Source of the application.

        :param target_root_node_id: The target_root_node_id of this ApplicationRestoreObject.
        :type: int
        """

        self._target_root_node_id = target_root_node_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
