# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CloneTaskRequestCloneViewParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, access_sids=None, clone_view_name=None, data_lock_expiry_usecs=None, description=None, enable_filer_audit_logging=None, enable_mixed_mode_permissions=None, enable_smb_access_based_enumeration=None, enable_smb_view_discovery=None, file_extension_filter=None, logical_quota=None, protocol_access=None, qos=None, smb_permissions_info=None, source_view_name=None, storage_policy_override=None, subnet_whitelist=None):
        """
        CloneTaskRequestCloneViewParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_sids': 'list[str]',
            'clone_view_name': 'str',
            'data_lock_expiry_usecs': 'int',
            'description': 'str',
            'enable_filer_audit_logging': 'bool',
            'enable_mixed_mode_permissions': 'bool',
            'enable_smb_access_based_enumeration': 'bool',
            'enable_smb_view_discovery': 'bool',
            'file_extension_filter': 'FileExtensionFilter',
            'logical_quota': 'CloneTaskRequestCloneViewParametersLogicalQuota',
            'protocol_access': 'str',
            'qos': 'QoS',
            'smb_permissions_info': 'SmbPermissionsInfo',
            'source_view_name': 'str',
            'storage_policy_override': 'StoragePolicyOverride',
            'subnet_whitelist': 'list[Subnet]'
        }

        self.attribute_map = {
            'access_sids': 'accessSids',
            'clone_view_name': 'cloneViewName',
            'data_lock_expiry_usecs': 'dataLockExpiryUsecs',
            'description': 'description',
            'enable_filer_audit_logging': 'enableFilerAuditLogging',
            'enable_mixed_mode_permissions': 'enableMixedModePermissions',
            'enable_smb_access_based_enumeration': 'enableSmbAccessBasedEnumeration',
            'enable_smb_view_discovery': 'enableSmbViewDiscovery',
            'file_extension_filter': 'fileExtensionFilter',
            'logical_quota': 'logicalQuota',
            'protocol_access': 'protocolAccess',
            'qos': 'qos',
            'smb_permissions_info': 'smbPermissionsInfo',
            'source_view_name': 'sourceViewName',
            'storage_policy_override': 'storagePolicyOverride',
            'subnet_whitelist': 'subnetWhitelist'
        }

        self._access_sids = access_sids
        self._clone_view_name = clone_view_name
        self._data_lock_expiry_usecs = data_lock_expiry_usecs
        self._description = description
        self._enable_filer_audit_logging = enable_filer_audit_logging
        self._enable_mixed_mode_permissions = enable_mixed_mode_permissions
        self._enable_smb_access_based_enumeration = enable_smb_access_based_enumeration
        self._enable_smb_view_discovery = enable_smb_view_discovery
        self._file_extension_filter = file_extension_filter
        self._logical_quota = logical_quota
        self._protocol_access = protocol_access
        self._qos = qos
        self._smb_permissions_info = smb_permissions_info
        self._source_view_name = source_view_name
        self._storage_policy_override = storage_policy_override
        self._subnet_whitelist = subnet_whitelist

    @property
    def access_sids(self):
        """
        Gets the access_sids of this CloneTaskRequestCloneViewParameters.
        Specifies the list of security identifiers (SIDs) for the restricted Principals who have access to this View.

        :return: The access_sids of this CloneTaskRequestCloneViewParameters.
        :rtype: list[str]
        """
        return self._access_sids

    @access_sids.setter
    def access_sids(self, access_sids):
        """
        Sets the access_sids of this CloneTaskRequestCloneViewParameters.
        Specifies the list of security identifiers (SIDs) for the restricted Principals who have access to this View.

        :param access_sids: The access_sids of this CloneTaskRequestCloneViewParameters.
        :type: list[str]
        """

        self._access_sids = access_sids

    @property
    def clone_view_name(self):
        """
        Gets the clone_view_name of this CloneTaskRequestCloneViewParameters.
        Specifies the name of the new View that is cloned from the source View.

        :return: The clone_view_name of this CloneTaskRequestCloneViewParameters.
        :rtype: str
        """
        return self._clone_view_name

    @clone_view_name.setter
    def clone_view_name(self, clone_view_name):
        """
        Sets the clone_view_name of this CloneTaskRequestCloneViewParameters.
        Specifies the name of the new View that is cloned from the source View.

        :param clone_view_name: The clone_view_name of this CloneTaskRequestCloneViewParameters.
        :type: str
        """

        self._clone_view_name = clone_view_name

    @property
    def data_lock_expiry_usecs(self):
        """
        Gets the data_lock_expiry_usecs of this CloneTaskRequestCloneViewParameters.
        DataLock (Write Once Read Many) lock expiry epoch time in microseconds. If specified, a view will be marked as a DataLock view. If a view is marked as a DataLock view, only a Data Security Officer (a user having Data Security Privilege) can delete the view until the lock expiry time.

        :return: The data_lock_expiry_usecs of this CloneTaskRequestCloneViewParameters.
        :rtype: int
        """
        return self._data_lock_expiry_usecs

    @data_lock_expiry_usecs.setter
    def data_lock_expiry_usecs(self, data_lock_expiry_usecs):
        """
        Sets the data_lock_expiry_usecs of this CloneTaskRequestCloneViewParameters.
        DataLock (Write Once Read Many) lock expiry epoch time in microseconds. If specified, a view will be marked as a DataLock view. If a view is marked as a DataLock view, only a Data Security Officer (a user having Data Security Privilege) can delete the view until the lock expiry time.

        :param data_lock_expiry_usecs: The data_lock_expiry_usecs of this CloneTaskRequestCloneViewParameters.
        :type: int
        """

        self._data_lock_expiry_usecs = data_lock_expiry_usecs

    @property
    def description(self):
        """
        Gets the description of this CloneTaskRequestCloneViewParameters.
        Specifies an optional text description about the View.

        :return: The description of this CloneTaskRequestCloneViewParameters.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this CloneTaskRequestCloneViewParameters.
        Specifies an optional text description about the View.

        :param description: The description of this CloneTaskRequestCloneViewParameters.
        :type: str
        """

        self._description = description

    @property
    def enable_filer_audit_logging(self):
        """
        Gets the enable_filer_audit_logging of this CloneTaskRequestCloneViewParameters.
        Specifies if Filer Audit Logging is enabled for this view.

        :return: The enable_filer_audit_logging of this CloneTaskRequestCloneViewParameters.
        :rtype: bool
        """
        return self._enable_filer_audit_logging

    @enable_filer_audit_logging.setter
    def enable_filer_audit_logging(self, enable_filer_audit_logging):
        """
        Sets the enable_filer_audit_logging of this CloneTaskRequestCloneViewParameters.
        Specifies if Filer Audit Logging is enabled for this view.

        :param enable_filer_audit_logging: The enable_filer_audit_logging of this CloneTaskRequestCloneViewParameters.
        :type: bool
        """

        self._enable_filer_audit_logging = enable_filer_audit_logging

    @property
    def enable_mixed_mode_permissions(self):
        """
        Gets the enable_mixed_mode_permissions of this CloneTaskRequestCloneViewParameters.
        If set, mixed mode (NFS and SMB) access is enabled for this view.

        :return: The enable_mixed_mode_permissions of this CloneTaskRequestCloneViewParameters.
        :rtype: bool
        """
        return self._enable_mixed_mode_permissions

    @enable_mixed_mode_permissions.setter
    def enable_mixed_mode_permissions(self, enable_mixed_mode_permissions):
        """
        Sets the enable_mixed_mode_permissions of this CloneTaskRequestCloneViewParameters.
        If set, mixed mode (NFS and SMB) access is enabled for this view.

        :param enable_mixed_mode_permissions: The enable_mixed_mode_permissions of this CloneTaskRequestCloneViewParameters.
        :type: bool
        """

        self._enable_mixed_mode_permissions = enable_mixed_mode_permissions

    @property
    def enable_smb_access_based_enumeration(self):
        """
        Gets the enable_smb_access_based_enumeration of this CloneTaskRequestCloneViewParameters.
        Specifies if access-based enumeration should be enabled. If 'true', only files and folders that the user has permissions to access are visible on the SMB share for that user.

        :return: The enable_smb_access_based_enumeration of this CloneTaskRequestCloneViewParameters.
        :rtype: bool
        """
        return self._enable_smb_access_based_enumeration

    @enable_smb_access_based_enumeration.setter
    def enable_smb_access_based_enumeration(self, enable_smb_access_based_enumeration):
        """
        Sets the enable_smb_access_based_enumeration of this CloneTaskRequestCloneViewParameters.
        Specifies if access-based enumeration should be enabled. If 'true', only files and folders that the user has permissions to access are visible on the SMB share for that user.

        :param enable_smb_access_based_enumeration: The enable_smb_access_based_enumeration of this CloneTaskRequestCloneViewParameters.
        :type: bool
        """

        self._enable_smb_access_based_enumeration = enable_smb_access_based_enumeration

    @property
    def enable_smb_view_discovery(self):
        """
        Gets the enable_smb_view_discovery of this CloneTaskRequestCloneViewParameters.
        If set, it enables discovery of view for SMB.

        :return: The enable_smb_view_discovery of this CloneTaskRequestCloneViewParameters.
        :rtype: bool
        """
        return self._enable_smb_view_discovery

    @enable_smb_view_discovery.setter
    def enable_smb_view_discovery(self, enable_smb_view_discovery):
        """
        Sets the enable_smb_view_discovery of this CloneTaskRequestCloneViewParameters.
        If set, it enables discovery of view for SMB.

        :param enable_smb_view_discovery: The enable_smb_view_discovery of this CloneTaskRequestCloneViewParameters.
        :type: bool
        """

        self._enable_smb_view_discovery = enable_smb_view_discovery

    @property
    def file_extension_filter(self):
        """
        Gets the file_extension_filter of this CloneTaskRequestCloneViewParameters.
        Optional filtering criteria that should be satisfied by all the files created in this view. It does not affect existing files.

        :return: The file_extension_filter of this CloneTaskRequestCloneViewParameters.
        :rtype: FileExtensionFilter
        """
        return self._file_extension_filter

    @file_extension_filter.setter
    def file_extension_filter(self, file_extension_filter):
        """
        Sets the file_extension_filter of this CloneTaskRequestCloneViewParameters.
        Optional filtering criteria that should be satisfied by all the files created in this view. It does not affect existing files.

        :param file_extension_filter: The file_extension_filter of this CloneTaskRequestCloneViewParameters.
        :type: FileExtensionFilter
        """

        self._file_extension_filter = file_extension_filter

    @property
    def logical_quota(self):
        """
        Gets the logical_quota of this CloneTaskRequestCloneViewParameters.


        :return: The logical_quota of this CloneTaskRequestCloneViewParameters.
        :rtype: CloneTaskRequestCloneViewParametersLogicalQuota
        """
        return self._logical_quota

    @logical_quota.setter
    def logical_quota(self, logical_quota):
        """
        Sets the logical_quota of this CloneTaskRequestCloneViewParameters.


        :param logical_quota: The logical_quota of this CloneTaskRequestCloneViewParameters.
        :type: CloneTaskRequestCloneViewParametersLogicalQuota
        """

        self._logical_quota = logical_quota

    @property
    def protocol_access(self):
        """
        Gets the protocol_access of this CloneTaskRequestCloneViewParameters.
        Specifies the supported Protocols for the View.

        :return: The protocol_access of this CloneTaskRequestCloneViewParameters.
        :rtype: str
        """
        return self._protocol_access

    @protocol_access.setter
    def protocol_access(self, protocol_access):
        """
        Sets the protocol_access of this CloneTaskRequestCloneViewParameters.
        Specifies the supported Protocols for the View.

        :param protocol_access: The protocol_access of this CloneTaskRequestCloneViewParameters.
        :type: str
        """
        allowed_values = ["kAll", "kNFSOnly", "kSMBOnly", "kS3Only"]
        if protocol_access not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol_access` ({0}), must be one of {1}"
                .format(protocol_access, allowed_values)
            )

        self._protocol_access = protocol_access

    @property
    def qos(self):
        """
        Gets the qos of this CloneTaskRequestCloneViewParameters.
        Specifies the Quality of Service (QoS) Policy for the View.

        :return: The qos of this CloneTaskRequestCloneViewParameters.
        :rtype: QoS
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """
        Sets the qos of this CloneTaskRequestCloneViewParameters.
        Specifies the Quality of Service (QoS) Policy for the View.

        :param qos: The qos of this CloneTaskRequestCloneViewParameters.
        :type: QoS
        """

        self._qos = qos

    @property
    def smb_permissions_info(self):
        """
        Gets the smb_permissions_info of this CloneTaskRequestCloneViewParameters.
        Specifies the SMB permissions for the View.

        :return: The smb_permissions_info of this CloneTaskRequestCloneViewParameters.
        :rtype: SmbPermissionsInfo
        """
        return self._smb_permissions_info

    @smb_permissions_info.setter
    def smb_permissions_info(self, smb_permissions_info):
        """
        Sets the smb_permissions_info of this CloneTaskRequestCloneViewParameters.
        Specifies the SMB permissions for the View.

        :param smb_permissions_info: The smb_permissions_info of this CloneTaskRequestCloneViewParameters.
        :type: SmbPermissionsInfo
        """

        self._smb_permissions_info = smb_permissions_info

    @property
    def source_view_name(self):
        """
        Gets the source_view_name of this CloneTaskRequestCloneViewParameters.
        Specifies the name of the source View that will be cloned.

        :return: The source_view_name of this CloneTaskRequestCloneViewParameters.
        :rtype: str
        """
        return self._source_view_name

    @source_view_name.setter
    def source_view_name(self, source_view_name):
        """
        Sets the source_view_name of this CloneTaskRequestCloneViewParameters.
        Specifies the name of the source View that will be cloned.

        :param source_view_name: The source_view_name of this CloneTaskRequestCloneViewParameters.
        :type: str
        """

        self._source_view_name = source_view_name

    @property
    def storage_policy_override(self):
        """
        Gets the storage_policy_override of this CloneTaskRequestCloneViewParameters.
        Specifies if inline deduplication and compression settings inherited from the Storage Domain (View Box) should be disabled for this View.

        :return: The storage_policy_override of this CloneTaskRequestCloneViewParameters.
        :rtype: StoragePolicyOverride
        """
        return self._storage_policy_override

    @storage_policy_override.setter
    def storage_policy_override(self, storage_policy_override):
        """
        Sets the storage_policy_override of this CloneTaskRequestCloneViewParameters.
        Specifies if inline deduplication and compression settings inherited from the Storage Domain (View Box) should be disabled for this View.

        :param storage_policy_override: The storage_policy_override of this CloneTaskRequestCloneViewParameters.
        :type: StoragePolicyOverride
        """

        self._storage_policy_override = storage_policy_override

    @property
    def subnet_whitelist(self):
        """
        Gets the subnet_whitelist of this CloneTaskRequestCloneViewParameters.
        Specifies a list of Subnets with IP addresses that have permissions to access the View. (Overrides the Subnets specified at the global Cohesity Cluster level.)

        :return: The subnet_whitelist of this CloneTaskRequestCloneViewParameters.
        :rtype: list[Subnet]
        """
        return self._subnet_whitelist

    @subnet_whitelist.setter
    def subnet_whitelist(self, subnet_whitelist):
        """
        Sets the subnet_whitelist of this CloneTaskRequestCloneViewParameters.
        Specifies a list of Subnets with IP addresses that have permissions to access the View. (Overrides the Subnets specified at the global Cohesity Cluster level.)

        :param subnet_whitelist: The subnet_whitelist of this CloneTaskRequestCloneViewParameters.
        :type: list[Subnet]
        """

        self._subnet_whitelist = subnet_whitelist

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
