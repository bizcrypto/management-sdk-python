# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ValueData(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bytes_value=None, double_value=None, int64_value=None, string_value=None):
        """
        ValueData - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bytes_value': 'list[int]',
            'double_value': 'float',
            'int64_value': 'int',
            'string_value': 'str'
        }

        self.attribute_map = {
            'bytes_value': 'bytesValue',
            'double_value': 'doubleValue',
            'int64_value': 'int64Value',
            'string_value': 'stringValue'
        }

        self._bytes_value = bytes_value
        self._double_value = double_value
        self._int64_value = int64_value
        self._string_value = string_value

    @property
    def bytes_value(self):
        """
        Gets the bytes_value of this ValueData.
        Specifies the field to store an array of bytes if the current data type is bytes. Specify a value for this field when type is equal to 4.

        :return: The bytes_value of this ValueData.
        :rtype: list[int]
        """
        return self._bytes_value

    @bytes_value.setter
    def bytes_value(self, bytes_value):
        """
        Sets the bytes_value of this ValueData.
        Specifies the field to store an array of bytes if the current data type is bytes. Specify a value for this field when type is equal to 4.

        :param bytes_value: The bytes_value of this ValueData.
        :type: list[int]
        """

        self._bytes_value = bytes_value

    @property
    def double_value(self):
        """
        Gets the double_value of this ValueData.
        Specifies the field to store data if the current data type is a double value. Specify a value for this field when type is equal to 2.

        :return: The double_value of this ValueData.
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """
        Sets the double_value of this ValueData.
        Specifies the field to store data if the current data type is a double value. Specify a value for this field when type is equal to 2.

        :param double_value: The double_value of this ValueData.
        :type: float
        """

        self._double_value = double_value

    @property
    def int64_value(self):
        """
        Gets the int64_value of this ValueData.
        Specifies the field to store data if the current data type is a int64 value. Specify a value for this field when type is equal to 1.

        :return: The int64_value of this ValueData.
        :rtype: int
        """
        return self._int64_value

    @int64_value.setter
    def int64_value(self, int64_value):
        """
        Sets the int64_value of this ValueData.
        Specifies the field to store data if the current data type is a int64 value. Specify a value for this field when type is equal to 1.

        :param int64_value: The int64_value of this ValueData.
        :type: int
        """

        self._int64_value = int64_value

    @property
    def string_value(self):
        """
        Gets the string_value of this ValueData.
        Specifies the field to store data if the current data type is a string value. Specify a value for this field when type is equal to 3.

        :return: The string_value of this ValueData.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """
        Sets the string_value of this ValueData.
        Specifies the field to store data if the current data type is a string value. Specify a value for this field when type is equal to 3.

        :param string_value: The string_value of this ValueData.
        :type: str
        """

        self._string_value = string_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
