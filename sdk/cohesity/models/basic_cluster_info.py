# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BasicClusterInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_software_version=None, cluster_type=None, domains=None, language_locale=None, name=None):
        """
        BasicClusterInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cluster_software_version': 'str',
            'cluster_type': 'str',
            'domains': 'list[str]',
            'language_locale': 'str',
            'name': 'str'
        }

        self.attribute_map = {
            'cluster_software_version': 'clusterSoftwareVersion',
            'cluster_type': 'clusterType',
            'domains': 'domains',
            'language_locale': 'languageLocale',
            'name': 'name'
        }

        self._cluster_software_version = cluster_software_version
        self._cluster_type = cluster_type
        self._domains = domains
        self._language_locale = language_locale
        self._name = name

    @property
    def cluster_software_version(self):
        """
        Gets the cluster_software_version of this BasicClusterInfo.
        Specifies the current release of the Cohesity software running on this Cohesity Cluster.

        :return: The cluster_software_version of this BasicClusterInfo.
        :rtype: str
        """
        return self._cluster_software_version

    @cluster_software_version.setter
    def cluster_software_version(self, cluster_software_version):
        """
        Sets the cluster_software_version of this BasicClusterInfo.
        Specifies the current release of the Cohesity software running on this Cohesity Cluster.

        :param cluster_software_version: The cluster_software_version of this BasicClusterInfo.
        :type: str
        """

        self._cluster_software_version = cluster_software_version

    @property
    def cluster_type(self):
        """
        Gets the cluster_type of this BasicClusterInfo.
        Specifies the type of Cohesity Cluster. 'kPhysical' indicates the Cohesity Cluster is hosted directly on hardware. 'kVirtualRobo' indicates the Cohesity Cluster is hosted in a VM on a ESXi Host of a VMware vCenter Server using Cohesity's Virtual Edition. 'kMicrosoftCloud' indicates the Cohesity Cluster is hosed in a VM on Microsoft Azure using Cohesity's Cloud Edition. 'kAmazonCloud' indicates the Cohesity Cluster is hosed in a VM on Amazon S3 using Cohesity's Cloud Edition. 'kGoogleCloud' indicates the Cohesity Cluster is hosed in a VM on Google Cloud Platform using Cohesity's Cloud Edition.

        :return: The cluster_type of this BasicClusterInfo.
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """
        Sets the cluster_type of this BasicClusterInfo.
        Specifies the type of Cohesity Cluster. 'kPhysical' indicates the Cohesity Cluster is hosted directly on hardware. 'kVirtualRobo' indicates the Cohesity Cluster is hosted in a VM on a ESXi Host of a VMware vCenter Server using Cohesity's Virtual Edition. 'kMicrosoftCloud' indicates the Cohesity Cluster is hosed in a VM on Microsoft Azure using Cohesity's Cloud Edition. 'kAmazonCloud' indicates the Cohesity Cluster is hosed in a VM on Amazon S3 using Cohesity's Cloud Edition. 'kGoogleCloud' indicates the Cohesity Cluster is hosed in a VM on Google Cloud Platform using Cohesity's Cloud Edition.

        :param cluster_type: The cluster_type of this BasicClusterInfo.
        :type: str
        """
        allowed_values = ["kPhysical", "kVirtualRobo", "kMicrosoftCloud", "kAmazonCloud", "kGoogleCloud"]
        if cluster_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_type` ({0}), must be one of {1}"
                .format(cluster_type, allowed_values)
            )

        self._cluster_type = cluster_type

    @property
    def domains(self):
        """
        Gets the domains of this BasicClusterInfo.
        Specifies a list of domains joined to the Cohesity Cluster, including the default LOCAL Cohesity domain used to store the local Cohesity users.

        :return: The domains of this BasicClusterInfo.
        :rtype: list[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """
        Sets the domains of this BasicClusterInfo.
        Specifies a list of domains joined to the Cohesity Cluster, including the default LOCAL Cohesity domain used to store the local Cohesity users.

        :param domains: The domains of this BasicClusterInfo.
        :type: list[str]
        """

        self._domains = domains

    @property
    def language_locale(self):
        """
        Gets the language_locale of this BasicClusterInfo.
        Specifies the language and locale for the Cohesity Cluster.

        :return: The language_locale of this BasicClusterInfo.
        :rtype: str
        """
        return self._language_locale

    @language_locale.setter
    def language_locale(self, language_locale):
        """
        Sets the language_locale of this BasicClusterInfo.
        Specifies the language and locale for the Cohesity Cluster.

        :param language_locale: The language_locale of this BasicClusterInfo.
        :type: str
        """

        self._language_locale = language_locale

    @property
    def name(self):
        """
        Gets the name of this BasicClusterInfo.
        Specifies the name of the Cohesity Cluster.

        :return: The name of this BasicClusterInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this BasicClusterInfo.
        Specifies the name of the Cohesity Cluster.

        :param name: The name of this BasicClusterInfo.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
