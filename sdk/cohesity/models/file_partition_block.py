# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class FilePartitionBlock(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, disk_file_name=None, length_bytes=None, number=None, offset_bytes=None):
        """
        FilePartitionBlock - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'disk_file_name': 'str',
            'length_bytes': 'int',
            'number': 'int',
            'offset_bytes': 'int'
        }

        self.attribute_map = {
            'disk_file_name': 'diskFileName',
            'length_bytes': 'lengthBytes',
            'number': 'number',
            'offset_bytes': 'offsetBytes'
        }

        self._disk_file_name = disk_file_name
        self._length_bytes = length_bytes
        self._number = number
        self._offset_bytes = offset_bytes

    @property
    def disk_file_name(self):
        """
        Gets the disk_file_name of this FilePartitionBlock.
        Specifies the disk file name where the logical partition is.

        :return: The disk_file_name of this FilePartitionBlock.
        :rtype: str
        """
        return self._disk_file_name

    @disk_file_name.setter
    def disk_file_name(self, disk_file_name):
        """
        Sets the disk_file_name of this FilePartitionBlock.
        Specifies the disk file name where the logical partition is.

        :param disk_file_name: The disk_file_name of this FilePartitionBlock.
        :type: str
        """

        self._disk_file_name = disk_file_name

    @property
    def length_bytes(self):
        """
        Gets the length_bytes of this FilePartitionBlock.
        Specifies the length of the block in bytes.

        :return: The length_bytes of this FilePartitionBlock.
        :rtype: int
        """
        return self._length_bytes

    @length_bytes.setter
    def length_bytes(self, length_bytes):
        """
        Sets the length_bytes of this FilePartitionBlock.
        Specifies the length of the block in bytes.

        :param length_bytes: The length_bytes of this FilePartitionBlock.
        :type: int
        """

        self._length_bytes = length_bytes

    @property
    def number(self):
        """
        Gets the number of this FilePartitionBlock.
        Specifies a unique number of the partition within the linear disk file.

        :return: The number of this FilePartitionBlock.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this FilePartitionBlock.
        Specifies a unique number of the partition within the linear disk file.

        :param number: The number of this FilePartitionBlock.
        :type: int
        """

        self._number = number

    @property
    def offset_bytes(self):
        """
        Gets the offset_bytes of this FilePartitionBlock.
        Specifies the offset of the block (in bytes) from the beginning of the containing object such as a physical disk or a virtual disk file.

        :return: The offset_bytes of this FilePartitionBlock.
        :rtype: int
        """
        return self._offset_bytes

    @offset_bytes.setter
    def offset_bytes(self, offset_bytes):
        """
        Sets the offset_bytes of this FilePartitionBlock.
        Specifies the offset of the block (in bytes) from the beginning of the containing object such as a physical disk or a virtual disk file.

        :param offset_bytes: The offset_bytes of this FilePartitionBlock.
        :type: int
        """

        self._offset_bytes = offset_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
