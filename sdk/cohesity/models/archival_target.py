# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ArchivalTarget(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, vault_id=None, vault_name=None, vault_type=None):
        """
        ArchivalTarget - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'vault_id': 'int',
            'vault_name': 'str',
            'vault_type': 'str'
        }

        self.attribute_map = {
            'vault_id': 'vaultId',
            'vault_name': 'vaultName',
            'vault_type': 'vaultType'
        }

        self._vault_id = vault_id
        self._vault_name = vault_name
        self._vault_type = vault_type

    @property
    def vault_id(self):
        """
        Gets the vault_id of this ArchivalTarget.
        Specifies the id of Archival Vault assigned by the Cohesity Cluster.

        :return: The vault_id of this ArchivalTarget.
        :rtype: int
        """
        return self._vault_id

    @vault_id.setter
    def vault_id(self, vault_id):
        """
        Sets the vault_id of this ArchivalTarget.
        Specifies the id of Archival Vault assigned by the Cohesity Cluster.

        :param vault_id: The vault_id of this ArchivalTarget.
        :type: int
        """

        self._vault_id = vault_id

    @property
    def vault_name(self):
        """
        Gets the vault_name of this ArchivalTarget.
        Name of the Archival Vault.

        :return: The vault_name of this ArchivalTarget.
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """
        Sets the vault_name of this ArchivalTarget.
        Name of the Archival Vault.

        :param vault_name: The vault_name of this ArchivalTarget.
        :type: str
        """

        self._vault_name = vault_name

    @property
    def vault_type(self):
        """
        Gets the vault_type of this ArchivalTarget.
        Specifies the type of the Archival External Target such as 'kCloud' or 'kTape'.

        :return: The vault_type of this ArchivalTarget.
        :rtype: str
        """
        return self._vault_type

    @vault_type.setter
    def vault_type(self, vault_type):
        """
        Sets the vault_type of this ArchivalTarget.
        Specifies the type of the Archival External Target such as 'kCloud' or 'kTape'.

        :param vault_type: The vault_type of this ArchivalTarget.
        :type: str
        """
        allowed_values = ["kCloud", "kTape"]
        if vault_type not in allowed_values:
            raise ValueError(
                "Invalid value for `vault_type` ({0}), must be one of {1}"
                .format(vault_type, allowed_values)
            )

        self._vault_type = vault_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
