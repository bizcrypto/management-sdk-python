# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SnapshotArchivalCopyPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, copy_partial=None, days_to_keep=None, multiplier=None, periodicity=None, target=None):
        """
        SnapshotArchivalCopyPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'copy_partial': 'bool',
            'days_to_keep': 'int',
            'multiplier': 'int',
            'periodicity': 'str',
            'target': 'SnapshotArchivalCopyPolicyTarget'
        }

        self.attribute_map = {
            'copy_partial': 'copyPartial',
            'days_to_keep': 'daysToKeep',
            'multiplier': 'multiplier',
            'periodicity': 'periodicity',
            'target': 'target'
        }

        self._copy_partial = copy_partial
        self._days_to_keep = days_to_keep
        self._multiplier = multiplier
        self._periodicity = periodicity
        self._target = target

    @property
    def copy_partial(self):
        """
        Gets the copy_partial of this SnapshotArchivalCopyPolicy.
        Specifies if Snapshots are copied from the first completely successful Job Run or the first partially successful Job Run occurring at the start of the replication schedule. If true, Snapshots are copied from the first Job Run occurring at the start of the replication schedule, even if first Job Run was not completely successful i.e. Snapshots were not captured for all Objects in the Job. If false, Snapshots are copied from the first Job Run occurring at the start of the replication schedule that was completely successful i.e. Snapshots for all the Objects in the Job were successfully captured.

        :return: The copy_partial of this SnapshotArchivalCopyPolicy.
        :rtype: bool
        """
        return self._copy_partial

    @copy_partial.setter
    def copy_partial(self, copy_partial):
        """
        Sets the copy_partial of this SnapshotArchivalCopyPolicy.
        Specifies if Snapshots are copied from the first completely successful Job Run or the first partially successful Job Run occurring at the start of the replication schedule. If true, Snapshots are copied from the first Job Run occurring at the start of the replication schedule, even if first Job Run was not completely successful i.e. Snapshots were not captured for all Objects in the Job. If false, Snapshots are copied from the first Job Run occurring at the start of the replication schedule that was completely successful i.e. Snapshots for all the Objects in the Job were successfully captured.

        :param copy_partial: The copy_partial of this SnapshotArchivalCopyPolicy.
        :type: bool
        """

        self._copy_partial = copy_partial

    @property
    def days_to_keep(self):
        """
        Gets the days_to_keep of this SnapshotArchivalCopyPolicy.
        Specifies the number of days to retain copied Snapshots on the target.

        :return: The days_to_keep of this SnapshotArchivalCopyPolicy.
        :rtype: int
        """
        return self._days_to_keep

    @days_to_keep.setter
    def days_to_keep(self, days_to_keep):
        """
        Sets the days_to_keep of this SnapshotArchivalCopyPolicy.
        Specifies the number of days to retain copied Snapshots on the target.

        :param days_to_keep: The days_to_keep of this SnapshotArchivalCopyPolicy.
        :type: int
        """

        self._days_to_keep = days_to_keep

    @property
    def multiplier(self):
        """
        Gets the multiplier of this SnapshotArchivalCopyPolicy.
        Specifies a factor to multiply the periodicity by, to determine the copy schedule. For example if set to 2 and the periodicity is hourly, then Snapshots from the first eligible Job Run for every 2 hour period is copied.

        :return: The multiplier of this SnapshotArchivalCopyPolicy.
        :rtype: int
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """
        Sets the multiplier of this SnapshotArchivalCopyPolicy.
        Specifies a factor to multiply the periodicity by, to determine the copy schedule. For example if set to 2 and the periodicity is hourly, then Snapshots from the first eligible Job Run for every 2 hour period is copied.

        :param multiplier: The multiplier of this SnapshotArchivalCopyPolicy.
        :type: int
        """

        self._multiplier = multiplier

    @property
    def periodicity(self):
        """
        Gets the periodicity of this SnapshotArchivalCopyPolicy.
        Specifies the frequency that Snapshots should be copied to the specified target. Used in combination with multipiler. 'kEvery' means that the Snapshot copy occurs after the number of Job Runs equals the number specified in the multiplier. 'kHour' means that the Snapshot copy occurs hourly at the frequency set in the multiplier, for example if multiplier is 2, the copy occurs every 2 hours. 'kDay' means that the Snapshot copy occurs daily at the frequency set in the multiplier. 'kWeek' means that the Snapshot copy occurs weekly at the frequency set in the multiplier. 'kMonth' means that the Snapshot copy occurs monthly at the frequency set in the multiplier. 'kYear' means that the Snapshot copy occurs yearly at the frequency set in the multiplier.

        :return: The periodicity of this SnapshotArchivalCopyPolicy.
        :rtype: str
        """
        return self._periodicity

    @periodicity.setter
    def periodicity(self, periodicity):
        """
        Sets the periodicity of this SnapshotArchivalCopyPolicy.
        Specifies the frequency that Snapshots should be copied to the specified target. Used in combination with multipiler. 'kEvery' means that the Snapshot copy occurs after the number of Job Runs equals the number specified in the multiplier. 'kHour' means that the Snapshot copy occurs hourly at the frequency set in the multiplier, for example if multiplier is 2, the copy occurs every 2 hours. 'kDay' means that the Snapshot copy occurs daily at the frequency set in the multiplier. 'kWeek' means that the Snapshot copy occurs weekly at the frequency set in the multiplier. 'kMonth' means that the Snapshot copy occurs monthly at the frequency set in the multiplier. 'kYear' means that the Snapshot copy occurs yearly at the frequency set in the multiplier.

        :param periodicity: The periodicity of this SnapshotArchivalCopyPolicy.
        :type: str
        """
        allowed_values = ["kEvery", "kHour", "kDay", "kWeek", "kMonth", "kYear"]
        if periodicity not in allowed_values:
            raise ValueError(
                "Invalid value for `periodicity` ({0}), must be one of {1}"
                .format(periodicity, allowed_values)
            )

        self._periodicity = periodicity

    @property
    def target(self):
        """
        Gets the target of this SnapshotArchivalCopyPolicy.


        :return: The target of this SnapshotArchivalCopyPolicy.
        :rtype: SnapshotArchivalCopyPolicyTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """
        Sets the target of this SnapshotArchivalCopyPolicy.


        :param target: The target of this SnapshotArchivalCopyPolicy.
        :type: SnapshotArchivalCopyPolicyTarget
        """

        self._target = target

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
