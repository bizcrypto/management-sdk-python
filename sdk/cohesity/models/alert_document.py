# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AlertDocument(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alert_cause=None, alert_description=None, alert_help_text=None, alert_name=None):
        """
        AlertDocument - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alert_cause': 'str',
            'alert_description': 'str',
            'alert_help_text': 'str',
            'alert_name': 'str'
        }

        self.attribute_map = {
            'alert_cause': 'alertCause',
            'alert_description': 'alertDescription',
            'alert_help_text': 'alertHelpText',
            'alert_name': 'alertName'
        }

        self._alert_cause = alert_cause
        self._alert_description = alert_description
        self._alert_help_text = alert_help_text
        self._alert_name = alert_name

    @property
    def alert_cause(self):
        """
        Gets the alert_cause of this AlertDocument.
        Cause of the Alert that is included in the body of the email or any other type of notification.

        :return: The alert_cause of this AlertDocument.
        :rtype: str
        """
        return self._alert_cause

    @alert_cause.setter
    def alert_cause(self, alert_cause):
        """
        Sets the alert_cause of this AlertDocument.
        Cause of the Alert that is included in the body of the email or any other type of notification.

        :param alert_cause: The alert_cause of this AlertDocument.
        :type: str
        """

        self._alert_cause = alert_cause

    @property
    def alert_description(self):
        """
        Gets the alert_description of this AlertDocument.
        Brief description about the Alert that is used in the subject line when sending a notification email for an Alert.

        :return: The alert_description of this AlertDocument.
        :rtype: str
        """
        return self._alert_description

    @alert_description.setter
    def alert_description(self, alert_description):
        """
        Sets the alert_description of this AlertDocument.
        Brief description about the Alert that is used in the subject line when sending a notification email for an Alert.

        :param alert_description: The alert_description of this AlertDocument.
        :type: str
        """

        self._alert_description = alert_description

    @property
    def alert_help_text(self):
        """
        Gets the alert_help_text of this AlertDocument.
        Instructions describing how to resolve the Alert that is included in the body of the email or any other type of notification.

        :return: The alert_help_text of this AlertDocument.
        :rtype: str
        """
        return self._alert_help_text

    @alert_help_text.setter
    def alert_help_text(self, alert_help_text):
        """
        Sets the alert_help_text of this AlertDocument.
        Instructions describing how to resolve the Alert that is included in the body of the email or any other type of notification.

        :param alert_help_text: The alert_help_text of this AlertDocument.
        :type: str
        """

        self._alert_help_text = alert_help_text

    @property
    def alert_name(self):
        """
        Gets the alert_name of this AlertDocument.
        Short name that describes the Alert type such as DiskBad, HighCpuUsage, FrequentProcessRestarts, etc.

        :return: The alert_name of this AlertDocument.
        :rtype: str
        """
        return self._alert_name

    @alert_name.setter
    def alert_name(self, alert_name):
        """
        Sets the alert_name of this AlertDocument.
        Short name that describes the Alert type such as DiskBad, HighCpuUsage, FrequentProcessRestarts, etc.

        :param alert_name: The alert_name of this AlertDocument.
        :type: str
        """

        self._alert_name = alert_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
