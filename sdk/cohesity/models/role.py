# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Role(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_time_msecs=None, description=None, is_custom_role=None, label=None, last_updated_time_msecs=None, name=None, privileges=None):
        """
        Role - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_time_msecs': 'int',
            'description': 'str',
            'is_custom_role': 'bool',
            'label': 'str',
            'last_updated_time_msecs': 'int',
            'name': 'str',
            'privileges': 'list[str]'
        }

        self.attribute_map = {
            'created_time_msecs': 'createdTimeMsecs',
            'description': 'description',
            'is_custom_role': 'isCustomRole',
            'label': 'label',
            'last_updated_time_msecs': 'lastUpdatedTimeMsecs',
            'name': 'name',
            'privileges': 'privileges'
        }

        self._created_time_msecs = created_time_msecs
        self._description = description
        self._is_custom_role = is_custom_role
        self._label = label
        self._last_updated_time_msecs = last_updated_time_msecs
        self._name = name
        self._privileges = privileges

    @property
    def created_time_msecs(self):
        """
        Gets the created_time_msecs of this Role.
        Specifies the epoch time in milliseconds when the role was created.

        :return: The created_time_msecs of this Role.
        :rtype: int
        """
        return self._created_time_msecs

    @created_time_msecs.setter
    def created_time_msecs(self, created_time_msecs):
        """
        Sets the created_time_msecs of this Role.
        Specifies the epoch time in milliseconds when the role was created.

        :param created_time_msecs: The created_time_msecs of this Role.
        :type: int
        """

        self._created_time_msecs = created_time_msecs

    @property
    def description(self):
        """
        Gets the description of this Role.
        Specifies a description about the role.

        :return: The description of this Role.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Role.
        Specifies a description about the role.

        :param description: The description of this Role.
        :type: str
        """

        self._description = description

    @property
    def is_custom_role(self):
        """
        Gets the is_custom_role of this Role.
        Specifies if the role is a user-defined custom role. If true, the role is a user-defined custom role that was created using the REST API, the Cohesity Dashboard or the CLI. If false, the role is a default system role that was created during Cluster creation.

        :return: The is_custom_role of this Role.
        :rtype: bool
        """
        return self._is_custom_role

    @is_custom_role.setter
    def is_custom_role(self, is_custom_role):
        """
        Sets the is_custom_role of this Role.
        Specifies if the role is a user-defined custom role. If true, the role is a user-defined custom role that was created using the REST API, the Cohesity Dashboard or the CLI. If false, the role is a default system role that was created during Cluster creation.

        :param is_custom_role: The is_custom_role of this Role.
        :type: bool
        """

        self._is_custom_role = is_custom_role

    @property
    def label(self):
        """
        Gets the label of this Role.
        Specifies the label for the role as displayed on the Cohesity Dashboard such as 'Viewer'.

        :return: The label of this Role.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Role.
        Specifies the label for the role as displayed on the Cohesity Dashboard such as 'Viewer'.

        :param label: The label of this Role.
        :type: str
        """

        self._label = label

    @property
    def last_updated_time_msecs(self):
        """
        Gets the last_updated_time_msecs of this Role.
        Specifies the epoch time in milliseconds when the role was last modified.

        :return: The last_updated_time_msecs of this Role.
        :rtype: int
        """
        return self._last_updated_time_msecs

    @last_updated_time_msecs.setter
    def last_updated_time_msecs(self, last_updated_time_msecs):
        """
        Sets the last_updated_time_msecs of this Role.
        Specifies the epoch time in milliseconds when the role was last modified.

        :param last_updated_time_msecs: The last_updated_time_msecs of this Role.
        :type: int
        """

        self._last_updated_time_msecs = last_updated_time_msecs

    @property
    def name(self):
        """
        Gets the name of this Role.
        Specifies the internal Cluster name for the role such as COHESITY_VIEWER. For custom roles, the name and the label are the same. For default system roles, the name and label are different.

        :return: The name of this Role.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Role.
        Specifies the internal Cluster name for the role such as COHESITY_VIEWER. For custom roles, the name and the label are the same. For default system roles, the name and label are different.

        :param name: The name of this Role.
        :type: str
        """

        self._name = name

    @property
    def privileges(self):
        """
        Gets the privileges of this Role.
        Specifies the privileges assigned to the role. When a user or group is assigned this role, these privileges define the operations the user or group can perform on the Cohesity Cluster.

        :return: The privileges of this Role.
        :rtype: list[str]
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges):
        """
        Sets the privileges of this Role.
        Specifies the privileges assigned to the role. When a user or group is assigned this role, these privileges define the operations the user or group can perform on the Cohesity Cluster.

        :param privileges: The privileges of this Role.
        :type: list[str]
        """

        self._privileges = privileges

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
