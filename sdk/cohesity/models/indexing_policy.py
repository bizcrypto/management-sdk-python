# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class IndexingPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, allow_prefixes=None, deny_prefixes=None, disable_indexing=None):
        """
        IndexingPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'allow_prefixes': 'list[str]',
            'deny_prefixes': 'list[str]',
            'disable_indexing': 'bool'
        }

        self.attribute_map = {
            'allow_prefixes': 'allowPrefixes',
            'deny_prefixes': 'denyPrefixes',
            'disable_indexing': 'disableIndexing'
        }

        self._allow_prefixes = allow_prefixes
        self._deny_prefixes = deny_prefixes
        self._disable_indexing = disable_indexing

    @property
    def allow_prefixes(self):
        """
        Gets the allow_prefixes of this IndexingPolicy.
        Specifies a list of directories to index.

        :return: The allow_prefixes of this IndexingPolicy.
        :rtype: list[str]
        """
        return self._allow_prefixes

    @allow_prefixes.setter
    def allow_prefixes(self, allow_prefixes):
        """
        Sets the allow_prefixes of this IndexingPolicy.
        Specifies a list of directories to index.

        :param allow_prefixes: The allow_prefixes of this IndexingPolicy.
        :type: list[str]
        """

        self._allow_prefixes = allow_prefixes

    @property
    def deny_prefixes(self):
        """
        Gets the deny_prefixes of this IndexingPolicy.
        Specifies a list of directories to exclude from indexing.

        :return: The deny_prefixes of this IndexingPolicy.
        :rtype: list[str]
        """
        return self._deny_prefixes

    @deny_prefixes.setter
    def deny_prefixes(self, deny_prefixes):
        """
        Sets the deny_prefixes of this IndexingPolicy.
        Specifies a list of directories to exclude from indexing.

        :param deny_prefixes: The deny_prefixes of this IndexingPolicy.
        :type: list[str]
        """

        self._deny_prefixes = deny_prefixes

    @property
    def disable_indexing(self):
        """
        Gets the disable_indexing of this IndexingPolicy.
        Specifies if the files found in an Object (such as a VM) should be indexed. If false (the default), files are indexed.

        :return: The disable_indexing of this IndexingPolicy.
        :rtype: bool
        """
        return self._disable_indexing

    @disable_indexing.setter
    def disable_indexing(self, disable_indexing):
        """
        Sets the disable_indexing of this IndexingPolicy.
        Specifies if the files found in an Object (such as a VM) should be indexed. If false (the default), files are indexed.

        :param disable_indexing: The disable_indexing of this IndexingPolicy.
        :type: bool
        """

        self._disable_indexing = disable_indexing

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
