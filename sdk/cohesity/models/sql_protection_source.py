# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SqlProtectionSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, is_available_for_vss_backup=None, created_timestamp=None, database_name=None, db_aag_entity_id=None, db_aag_name=None, db_files=None, id=None, name=None, owner_id=None, recovery_model=None, sql_server_db_state=None, type=None):
        """
        SqlProtectionSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_available_for_vss_backup': 'bool',
            'created_timestamp': 'str',
            'database_name': 'str',
            'db_aag_entity_id': 'int',
            'db_aag_name': 'str',
            'db_files': 'list[DbFileInfo]',
            'id': 'SqlSourceId',
            'name': 'str',
            'owner_id': 'int',
            'recovery_model': 'str',
            'sql_server_db_state': 'int',
            'type': 'str'
        }

        self.attribute_map = {
            'is_available_for_vss_backup': 'IsAvailableForVssBackup',
            'created_timestamp': 'createdTimestamp',
            'database_name': 'databaseName',
            'db_aag_entity_id': 'dbAagEntityId',
            'db_aag_name': 'dbAagName',
            'db_files': 'dbFiles',
            'id': 'id',
            'name': 'name',
            'owner_id': 'ownerId',
            'recovery_model': 'recoveryModel',
            'sql_server_db_state': 'sqlServerDbState',
            'type': 'type'
        }

        self._is_available_for_vss_backup = is_available_for_vss_backup
        self._created_timestamp = created_timestamp
        self._database_name = database_name
        self._db_aag_entity_id = db_aag_entity_id
        self._db_aag_name = db_aag_name
        self._db_files = db_files
        self._id = id
        self._name = name
        self._owner_id = owner_id
        self._recovery_model = recovery_model
        self._sql_server_db_state = sql_server_db_state
        self._type = type

    @property
    def is_available_for_vss_backup(self):
        """
        Gets the is_available_for_vss_backup of this SqlProtectionSource.
        Specifies whether the database is marked as available for backup according to the SQL Server VSS writer. This may be false if either the state of the databases is not online, or if the VSS writer is not online. This field is set only for type 'kDatabase'.

        :return: The is_available_for_vss_backup of this SqlProtectionSource.
        :rtype: bool
        """
        return self._is_available_for_vss_backup

    @is_available_for_vss_backup.setter
    def is_available_for_vss_backup(self, is_available_for_vss_backup):
        """
        Sets the is_available_for_vss_backup of this SqlProtectionSource.
        Specifies whether the database is marked as available for backup according to the SQL Server VSS writer. This may be false if either the state of the databases is not online, or if the VSS writer is not online. This field is set only for type 'kDatabase'.

        :param is_available_for_vss_backup: The is_available_for_vss_backup of this SqlProtectionSource.
        :type: bool
        """

        self._is_available_for_vss_backup = is_available_for_vss_backup

    @property
    def created_timestamp(self):
        """
        Gets the created_timestamp of this SqlProtectionSource.
        Specifies the time when the database was created. It is displayed in the timezone of the SQL server on which this database is running.

        :return: The created_timestamp of this SqlProtectionSource.
        :rtype: str
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """
        Sets the created_timestamp of this SqlProtectionSource.
        Specifies the time when the database was created. It is displayed in the timezone of the SQL server on which this database is running.

        :param created_timestamp: The created_timestamp of this SqlProtectionSource.
        :type: str
        """

        self._created_timestamp = created_timestamp

    @property
    def database_name(self):
        """
        Gets the database_name of this SqlProtectionSource.
        Specifies the database name of the SQL Protection Source, if the type is database.

        :return: The database_name of this SqlProtectionSource.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """
        Sets the database_name of this SqlProtectionSource.
        Specifies the database name of the SQL Protection Source, if the type is database.

        :param database_name: The database_name of this SqlProtectionSource.
        :type: str
        """

        self._database_name = database_name

    @property
    def db_aag_entity_id(self):
        """
        Gets the db_aag_entity_id of this SqlProtectionSource.
        Specifies the AAG entity id if the database is part of an AAG. This field is set only for type 'kDatabase'.

        :return: The db_aag_entity_id of this SqlProtectionSource.
        :rtype: int
        """
        return self._db_aag_entity_id

    @db_aag_entity_id.setter
    def db_aag_entity_id(self, db_aag_entity_id):
        """
        Sets the db_aag_entity_id of this SqlProtectionSource.
        Specifies the AAG entity id if the database is part of an AAG. This field is set only for type 'kDatabase'.

        :param db_aag_entity_id: The db_aag_entity_id of this SqlProtectionSource.
        :type: int
        """

        self._db_aag_entity_id = db_aag_entity_id

    @property
    def db_aag_name(self):
        """
        Gets the db_aag_name of this SqlProtectionSource.
        Specifies the name of the AAG if the database is part of an AAG. This field is set only for type 'kDatabase'.

        :return: The db_aag_name of this SqlProtectionSource.
        :rtype: str
        """
        return self._db_aag_name

    @db_aag_name.setter
    def db_aag_name(self, db_aag_name):
        """
        Sets the db_aag_name of this SqlProtectionSource.
        Specifies the name of the AAG if the database is part of an AAG. This field is set only for type 'kDatabase'.

        :param db_aag_name: The db_aag_name of this SqlProtectionSource.
        :type: str
        """

        self._db_aag_name = db_aag_name

    @property
    def db_files(self):
        """
        Gets the db_files of this SqlProtectionSource.
        Specifies the last known information about the set of database files on the host. This field is set only for type 'kDatabase'.

        :return: The db_files of this SqlProtectionSource.
        :rtype: list[DbFileInfo]
        """
        return self._db_files

    @db_files.setter
    def db_files(self, db_files):
        """
        Sets the db_files of this SqlProtectionSource.
        Specifies the last known information about the set of database files on the host. This field is set only for type 'kDatabase'.

        :param db_files: The db_files of this SqlProtectionSource.
        :type: list[DbFileInfo]
        """

        self._db_files = db_files

    @property
    def id(self):
        """
        Gets the id of this SqlProtectionSource.
        Specifies an id that identifies an SQL Object.

        :return: The id of this SqlProtectionSource.
        :rtype: SqlSourceId
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SqlProtectionSource.
        Specifies an id that identifies an SQL Object.

        :param id: The id of this SqlProtectionSource.
        :type: SqlSourceId
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this SqlProtectionSource.
        Specifies the instance name of the SQL Protection Source

        :return: The name of this SqlProtectionSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SqlProtectionSource.
        Specifies the instance name of the SQL Protection Source

        :param name: The name of this SqlProtectionSource.
        :type: str
        """

        self._name = name

    @property
    def owner_id(self):
        """
        Gets the owner_id of this SqlProtectionSource.
        Specifies the id of the container VM for the SQL Protection Source.

        :return: The owner_id of this SqlProtectionSource.
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """
        Sets the owner_id of this SqlProtectionSource.
        Specifies the id of the container VM for the SQL Protection Source.

        :param owner_id: The owner_id of this SqlProtectionSource.
        :type: int
        """

        self._owner_id = owner_id

    @property
    def recovery_model(self):
        """
        Gets the recovery_model of this SqlProtectionSource.
        Specifies the Recovery Model for the database in SQL environment. Only meaningful for the 'kDatabase' SQL Protection Source. Specifies the Recovery Model set for the Microsoft SQL Server. 'kSimpleRecoveryModel' indicates the Simple SQL Recovery Model which does not utilize log backups. 'kFullRecoveryModel' indicates the Full SQL Recovery Model which requires log backups and allows recovery to a single point in time. 'kBulkLoggedRecoveryModel' indicates the Bulk Logged SQL Recovery Model which requires log backups and allows high-performance bulk copy operations.

        :return: The recovery_model of this SqlProtectionSource.
        :rtype: str
        """
        return self._recovery_model

    @recovery_model.setter
    def recovery_model(self, recovery_model):
        """
        Sets the recovery_model of this SqlProtectionSource.
        Specifies the Recovery Model for the database in SQL environment. Only meaningful for the 'kDatabase' SQL Protection Source. Specifies the Recovery Model set for the Microsoft SQL Server. 'kSimpleRecoveryModel' indicates the Simple SQL Recovery Model which does not utilize log backups. 'kFullRecoveryModel' indicates the Full SQL Recovery Model which requires log backups and allows recovery to a single point in time. 'kBulkLoggedRecoveryModel' indicates the Bulk Logged SQL Recovery Model which requires log backups and allows high-performance bulk copy operations.

        :param recovery_model: The recovery_model of this SqlProtectionSource.
        :type: str
        """
        allowed_values = ["kSimpleRecoveryModel", "kFullRecoveryModel", "kBulkLoggedRecoveryModel"]
        if recovery_model not in allowed_values:
            raise ValueError(
                "Invalid value for `recovery_model` ({0}), must be one of {1}"
                .format(recovery_model, allowed_values)
            )

        self._recovery_model = recovery_model

    @property
    def sql_server_db_state(self):
        """
        Gets the sql_server_db_state of this SqlProtectionSource.
        The state of the database as returned by SQL Server.

        :return: The sql_server_db_state of this SqlProtectionSource.
        :rtype: int
        """
        return self._sql_server_db_state

    @sql_server_db_state.setter
    def sql_server_db_state(self, sql_server_db_state):
        """
        Sets the sql_server_db_state of this SqlProtectionSource.
        The state of the database as returned by SQL Server.

        :param sql_server_db_state: The sql_server_db_state of this SqlProtectionSource.
        :type: int
        """

        self._sql_server_db_state = sql_server_db_state

    @property
    def type(self):
        """
        Gets the type of this SqlProtectionSource.
        Specifies the type of the managed Object in a SQL Protection Source. Examples of SQL Objects include 'kInstance' and 'kDatabase'.

        :return: The type of this SqlProtectionSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SqlProtectionSource.
        Specifies the type of the managed Object in a SQL Protection Source. Examples of SQL Objects include 'kInstance' and 'kDatabase'.

        :param type: The type of this SqlProtectionSource.
        :type: str
        """
        allowed_values = ["kInstance", "kDatabase"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
