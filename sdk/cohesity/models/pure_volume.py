# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PureVolume(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_time=None, parent_volume=None, serial_number=None, size_bytes=None, used_bytes=None):
        """
        PureVolume - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_time': 'str',
            'parent_volume': 'str',
            'serial_number': 'str',
            'size_bytes': 'int',
            'used_bytes': 'int'
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'parent_volume': 'parentVolume',
            'serial_number': 'serialNumber',
            'size_bytes': 'sizeBytes',
            'used_bytes': 'usedBytes'
        }

        self._created_time = created_time
        self._parent_volume = parent_volume
        self._serial_number = serial_number
        self._size_bytes = size_bytes
        self._used_bytes = used_bytes

    @property
    def created_time(self):
        """
        Gets the created_time of this PureVolume.
        Specifies the created time (e.g., \"2015-07-21T17:59:41Z\") of the volume.

        :return: The created_time of this PureVolume.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """
        Sets the created_time of this PureVolume.
        Specifies the created time (e.g., \"2015-07-21T17:59:41Z\") of the volume.

        :param created_time: The created_time of this PureVolume.
        :type: str
        """

        self._created_time = created_time

    @property
    def parent_volume(self):
        """
        Gets the parent_volume of this PureVolume.
        Specifies the name of the source volume, if this volume was copied or cloned from it.

        :return: The parent_volume of this PureVolume.
        :rtype: str
        """
        return self._parent_volume

    @parent_volume.setter
    def parent_volume(self, parent_volume):
        """
        Sets the parent_volume of this PureVolume.
        Specifies the name of the source volume, if this volume was copied or cloned from it.

        :param parent_volume: The parent_volume of this PureVolume.
        :type: str
        """

        self._parent_volume = parent_volume

    @property
    def serial_number(self):
        """
        Gets the serial_number of this PureVolume.
        Specifies the serial number of the volume.

        :return: The serial_number of this PureVolume.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """
        Sets the serial_number of this PureVolume.
        Specifies the serial number of the volume.

        :param serial_number: The serial_number of this PureVolume.
        :type: str
        """

        self._serial_number = serial_number

    @property
    def size_bytes(self):
        """
        Gets the size_bytes of this PureVolume.
        Specifies the provisioned size in bytes of the volume.

        :return: The size_bytes of this PureVolume.
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """
        Sets the size_bytes of this PureVolume.
        Specifies the provisioned size in bytes of the volume.

        :param size_bytes: The size_bytes of this PureVolume.
        :type: int
        """

        self._size_bytes = size_bytes

    @property
    def used_bytes(self):
        """
        Gets the used_bytes of this PureVolume.
        Specifies the total space actually used by the volume.

        :return: The used_bytes of this PureVolume.
        :rtype: int
        """
        return self._used_bytes

    @used_bytes.setter
    def used_bytes(self, used_bytes):
        """
        Sets the used_bytes of this PureVolume.
        Specifies the total space actually used by the volume.

        :param used_bytes: The used_bytes of this PureVolume.
        :type: int
        """

        self._used_bytes = used_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
