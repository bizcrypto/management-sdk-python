# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SnapshotTarget(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, archival_target=None, replication_target=None, type=None):
        """
        SnapshotTarget - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'archival_target': 'ArchivalTarget',
            'replication_target': 'ReplicationTarget',
            'type': 'str'
        }

        self.attribute_map = {
            'archival_target': 'archivalTarget',
            'replication_target': 'replicationTarget',
            'type': 'type'
        }

        self._archival_target = archival_target
        self._replication_target = replication_target
        self._type = type

    @property
    def archival_target(self):
        """
        Gets the archival_target of this SnapshotTarget.
        Specifies the Archival External Target for storing a copied Snapshot. If the type is not 'kLocal', either a replicationTarget or archivalTarget must be specified.

        :return: The archival_target of this SnapshotTarget.
        :rtype: ArchivalTarget
        """
        return self._archival_target

    @archival_target.setter
    def archival_target(self, archival_target):
        """
        Sets the archival_target of this SnapshotTarget.
        Specifies the Archival External Target for storing a copied Snapshot. If the type is not 'kLocal', either a replicationTarget or archivalTarget must be specified.

        :param archival_target: The archival_target of this SnapshotTarget.
        :type: ArchivalTarget
        """

        self._archival_target = archival_target

    @property
    def replication_target(self):
        """
        Gets the replication_target of this SnapshotTarget.
        Specifies the replication target (Remote Cluster) for storing a copied Snapshot. If the type is not 'kLocal', either a replicationTarget or archivalTarget must be specified.

        :return: The replication_target of this SnapshotTarget.
        :rtype: ReplicationTarget
        """
        return self._replication_target

    @replication_target.setter
    def replication_target(self, replication_target):
        """
        Sets the replication_target of this SnapshotTarget.
        Specifies the replication target (Remote Cluster) for storing a copied Snapshot. If the type is not 'kLocal', either a replicationTarget or archivalTarget must be specified.

        :param replication_target: The replication_target of this SnapshotTarget.
        :type: ReplicationTarget
        """

        self._replication_target = replication_target

    @property
    def type(self):
        """
        Gets the type of this SnapshotTarget.
        Specifies the type of a Snapshot target such as 'kLocal', 'kRemote' or 'kArchival'. 'kLocal' means the Snapshot is stored on a local Cohesity Cluster. 'kRemote' means the Snapshot is stored on a Remote Cohesity Cluster. (It was copied to the Remote Cohesity Cluster using replication.) 'kArchival' means the Snapshot is stored on a Archival External Target (such as Tape or AWS).

        :return: The type of this SnapshotTarget.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SnapshotTarget.
        Specifies the type of a Snapshot target such as 'kLocal', 'kRemote' or 'kArchival'. 'kLocal' means the Snapshot is stored on a local Cohesity Cluster. 'kRemote' means the Snapshot is stored on a Remote Cohesity Cluster. (It was copied to the Remote Cohesity Cluster using replication.) 'kArchival' means the Snapshot is stored on a Archival External Target (such as Tape or AWS).

        :param type: The type of this SnapshotTarget.
        :type: str
        """
        allowed_values = ["kLocal", "kRemote", "kArchival"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
