# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RegisterProtectionSourceParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, endpoint=None, environment=None, force_register=None, host_type=None, nas_mount_credentials=None, netapp_type=None, password=None, physical_type=None, pure_type=None, source_side_dedup_enabled=None, throttling_policy=None, throttling_policy_overrides=None, username=None, vmware_type=None):
        """
        RegisterProtectionSourceParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'endpoint': 'str',
            'environment': 'str',
            'force_register': 'bool',
            'host_type': 'str',
            'nas_mount_credentials': 'RegisterProtectionSourceParametersNasMountCredentials',
            'netapp_type': 'str',
            'password': 'str',
            'physical_type': 'str',
            'pure_type': 'str',
            'source_side_dedup_enabled': 'bool',
            'throttling_policy': 'RegisterProtectionSourceParametersThrottlingPolicy',
            'throttling_policy_overrides': 'list[ThrottlingPolicyOverride]',
            'username': 'str',
            'vmware_type': 'str'
        }

        self.attribute_map = {
            'endpoint': 'endpoint',
            'environment': 'environment',
            'force_register': 'forceRegister',
            'host_type': 'hostType',
            'nas_mount_credentials': 'nasMountCredentials',
            'netapp_type': 'netappType',
            'password': 'password',
            'physical_type': 'physicalType',
            'pure_type': 'pureType',
            'source_side_dedup_enabled': 'sourceSideDedupEnabled',
            'throttling_policy': 'throttlingPolicy',
            'throttling_policy_overrides': 'throttlingPolicyOverrides',
            'username': 'username',
            'vmware_type': 'vmwareType'
        }

        self._endpoint = endpoint
        self._environment = environment
        self._force_register = force_register
        self._host_type = host_type
        self._nas_mount_credentials = nas_mount_credentials
        self._netapp_type = netapp_type
        self._password = password
        self._physical_type = physical_type
        self._pure_type = pure_type
        self._source_side_dedup_enabled = source_side_dedup_enabled
        self._throttling_policy = throttling_policy
        self._throttling_policy_overrides = throttling_policy_overrides
        self._username = username
        self._vmware_type = vmware_type

    @property
    def endpoint(self):
        """
        Gets the endpoint of this RegisterProtectionSourceParameters.
        Specifies the network endpoint of the Protection Source where it is reachable. It could be an URL or hostname or an IP address of the Protection Source.

        :return: The endpoint of this RegisterProtectionSourceParameters.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """
        Sets the endpoint of this RegisterProtectionSourceParameters.
        Specifies the network endpoint of the Protection Source where it is reachable. It could be an URL or hostname or an IP address of the Protection Source.

        :param endpoint: The endpoint of this RegisterProtectionSourceParameters.
        :type: str
        """

        self._endpoint = endpoint

    @property
    def environment(self):
        """
        Gets the environment of this RegisterProtectionSourceParameters.
        Specifies the environment such as 'kPhysical' or 'kVMware' of the Protection Source. overrideDescription: true Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :return: The environment of this RegisterProtectionSourceParameters.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this RegisterProtectionSourceParameters.
        Specifies the environment such as 'kPhysical' or 'kVMware' of the Protection Source. overrideDescription: true Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :param environment: The environment of this RegisterProtectionSourceParameters.
        :type: str
        """
        allowed_values = ["kVMware", "kSQL", "kView", "kPuppeteer", "kPhysical", "kPure", "kNetapp", "kGenericNas", "kHyperV", "kAcropolis", "kAzure"]
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def force_register(self):
        """
        Gets the force_register of this RegisterProtectionSourceParameters.


        :return: The force_register of this RegisterProtectionSourceParameters.
        :rtype: bool
        """
        return self._force_register

    @force_register.setter
    def force_register(self, force_register):
        """
        Sets the force_register of this RegisterProtectionSourceParameters.


        :param force_register: The force_register of this RegisterProtectionSourceParameters.
        :type: bool
        """

        self._force_register = force_register

    @property
    def host_type(self):
        """
        Gets the host_type of this RegisterProtectionSourceParameters.
        Specifies the optional OS type of the Protection Source (such as kWindows or kLinux). overrideDescription: true 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system.

        :return: The host_type of this RegisterProtectionSourceParameters.
        :rtype: str
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """
        Sets the host_type of this RegisterProtectionSourceParameters.
        Specifies the optional OS type of the Protection Source (such as kWindows or kLinux). overrideDescription: true 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system.

        :param host_type: The host_type of this RegisterProtectionSourceParameters.
        :type: str
        """
        allowed_values = ["kLinux", "kWindows"]
        if host_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_type` ({0}), must be one of {1}"
                .format(host_type, allowed_values)
            )

        self._host_type = host_type

    @property
    def nas_mount_credentials(self):
        """
        Gets the nas_mount_credentials of this RegisterProtectionSourceParameters.


        :return: The nas_mount_credentials of this RegisterProtectionSourceParameters.
        :rtype: RegisterProtectionSourceParametersNasMountCredentials
        """
        return self._nas_mount_credentials

    @nas_mount_credentials.setter
    def nas_mount_credentials(self, nas_mount_credentials):
        """
        Sets the nas_mount_credentials of this RegisterProtectionSourceParameters.


        :param nas_mount_credentials: The nas_mount_credentials of this RegisterProtectionSourceParameters.
        :type: RegisterProtectionSourceParametersNasMountCredentials
        """

        self._nas_mount_credentials = nas_mount_credentials

    @property
    def netapp_type(self):
        """
        Gets the netapp_type of this RegisterProtectionSourceParameters.
        Specifies the entity type such as 'kCluster,' if the environment is kNetapp.

        :return: The netapp_type of this RegisterProtectionSourceParameters.
        :rtype: str
        """
        return self._netapp_type

    @netapp_type.setter
    def netapp_type(self, netapp_type):
        """
        Sets the netapp_type of this RegisterProtectionSourceParameters.
        Specifies the entity type such as 'kCluster,' if the environment is kNetapp.

        :param netapp_type: The netapp_type of this RegisterProtectionSourceParameters.
        :type: str
        """
        allowed_values = ["kCluster", "kVserver", "kVolume"]
        if netapp_type not in allowed_values:
            raise ValueError(
                "Invalid value for `netapp_type` ({0}), must be one of {1}"
                .format(netapp_type, allowed_values)
            )

        self._netapp_type = netapp_type

    @property
    def password(self):
        """
        Gets the password of this RegisterProtectionSourceParameters.
        Specifies password of the username to access the target source.

        :return: The password of this RegisterProtectionSourceParameters.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this RegisterProtectionSourceParameters.
        Specifies password of the username to access the target source.

        :param password: The password of this RegisterProtectionSourceParameters.
        :type: str
        """

        self._password = password

    @property
    def physical_type(self):
        """
        Gets the physical_type of this RegisterProtectionSourceParameters.
        Specifies the entity type such as 'kPhysicalHost' if the environment is kPhysical. overrideDescription: true 'kHost' indicates a single physical server. 'kWindowsCluster' indicates a Microsoft Windows cluster.

        :return: The physical_type of this RegisterProtectionSourceParameters.
        :rtype: str
        """
        return self._physical_type

    @physical_type.setter
    def physical_type(self, physical_type):
        """
        Sets the physical_type of this RegisterProtectionSourceParameters.
        Specifies the entity type such as 'kPhysicalHost' if the environment is kPhysical. overrideDescription: true 'kHost' indicates a single physical server. 'kWindowsCluster' indicates a Microsoft Windows cluster.

        :param physical_type: The physical_type of this RegisterProtectionSourceParameters.
        :type: str
        """
        allowed_values = ["kHost", "kWindowsCluster"]
        if physical_type not in allowed_values:
            raise ValueError(
                "Invalid value for `physical_type` ({0}), must be one of {1}"
                .format(physical_type, allowed_values)
            )

        self._physical_type = physical_type

    @property
    def pure_type(self):
        """
        Gets the pure_type of this RegisterProtectionSourceParameters.
        Specifies the entity type such as 'kStorageArray' if the environment is kPure. overrideDescription: true Examples of Pure Objects include 'kStorageArray' and 'kVolume'.

        :return: The pure_type of this RegisterProtectionSourceParameters.
        :rtype: str
        """
        return self._pure_type

    @pure_type.setter
    def pure_type(self, pure_type):
        """
        Sets the pure_type of this RegisterProtectionSourceParameters.
        Specifies the entity type such as 'kStorageArray' if the environment is kPure. overrideDescription: true Examples of Pure Objects include 'kStorageArray' and 'kVolume'.

        :param pure_type: The pure_type of this RegisterProtectionSourceParameters.
        :type: str
        """
        allowed_values = ["kStorageArray", "kVolume"]
        if pure_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pure_type` ({0}), must be one of {1}"
                .format(pure_type, allowed_values)
            )

        self._pure_type = pure_type

    @property
    def source_side_dedup_enabled(self):
        """
        Gets the source_side_dedup_enabled of this RegisterProtectionSourceParameters.
        This controls whether to use source side dedup on the source or not. This is only applicable to Protection Sources which support source side dedup (e.g., Linux physical servers).

        :return: The source_side_dedup_enabled of this RegisterProtectionSourceParameters.
        :rtype: bool
        """
        return self._source_side_dedup_enabled

    @source_side_dedup_enabled.setter
    def source_side_dedup_enabled(self, source_side_dedup_enabled):
        """
        Sets the source_side_dedup_enabled of this RegisterProtectionSourceParameters.
        This controls whether to use source side dedup on the source or not. This is only applicable to Protection Sources which support source side dedup (e.g., Linux physical servers).

        :param source_side_dedup_enabled: The source_side_dedup_enabled of this RegisterProtectionSourceParameters.
        :type: bool
        """

        self._source_side_dedup_enabled = source_side_dedup_enabled

    @property
    def throttling_policy(self):
        """
        Gets the throttling_policy of this RegisterProtectionSourceParameters.


        :return: The throttling_policy of this RegisterProtectionSourceParameters.
        :rtype: RegisterProtectionSourceParametersThrottlingPolicy
        """
        return self._throttling_policy

    @throttling_policy.setter
    def throttling_policy(self, throttling_policy):
        """
        Sets the throttling_policy of this RegisterProtectionSourceParameters.


        :param throttling_policy: The throttling_policy of this RegisterProtectionSourceParameters.
        :type: RegisterProtectionSourceParametersThrottlingPolicy
        """

        self._throttling_policy = throttling_policy

    @property
    def throttling_policy_overrides(self):
        """
        Gets the throttling_policy_overrides of this RegisterProtectionSourceParameters.
        Specifies a list of Throttling Policy for datastores that override the common throttling policy specified for the registered Protection Source. For datastores not in this list, common policy will still apply.

        :return: The throttling_policy_overrides of this RegisterProtectionSourceParameters.
        :rtype: list[ThrottlingPolicyOverride]
        """
        return self._throttling_policy_overrides

    @throttling_policy_overrides.setter
    def throttling_policy_overrides(self, throttling_policy_overrides):
        """
        Sets the throttling_policy_overrides of this RegisterProtectionSourceParameters.
        Specifies a list of Throttling Policy for datastores that override the common throttling policy specified for the registered Protection Source. For datastores not in this list, common policy will still apply.

        :param throttling_policy_overrides: The throttling_policy_overrides of this RegisterProtectionSourceParameters.
        :type: list[ThrottlingPolicyOverride]
        """

        self._throttling_policy_overrides = throttling_policy_overrides

    @property
    def username(self):
        """
        Gets the username of this RegisterProtectionSourceParameters.
        Specifies username to access the target source.

        :return: The username of this RegisterProtectionSourceParameters.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this RegisterProtectionSourceParameters.
        Specifies username to access the target source.

        :param username: The username of this RegisterProtectionSourceParameters.
        :type: str
        """

        self._username = username

    @property
    def vmware_type(self):
        """
        Gets the vmware_type of this RegisterProtectionSourceParameters.
        Specifies the entity type such as 'kVCenter' if the environment is kKMware. overrideDescription: true Examples of VMware Objects include 'kVCenter', 'kFolder', 'kDatacenter', 'kResourcePool', 'kDatastore', 'kVirtualMachine', etc.

        :return: The vmware_type of this RegisterProtectionSourceParameters.
        :rtype: str
        """
        return self._vmware_type

    @vmware_type.setter
    def vmware_type(self, vmware_type):
        """
        Sets the vmware_type of this RegisterProtectionSourceParameters.
        Specifies the entity type such as 'kVCenter' if the environment is kKMware. overrideDescription: true Examples of VMware Objects include 'kVCenter', 'kFolder', 'kDatacenter', 'kResourcePool', 'kDatastore', 'kVirtualMachine', etc.

        :param vmware_type: The vmware_type of this RegisterProtectionSourceParameters.
        :type: str
        """
        allowed_values = ["kVCenter", "kFolder", "kDatacenter", "kComputeResource", "kClusterComputeResource", "kResourcePool", "kDatastore", "kHostSystem", "kVirtualMachine", "kVirtualApp", "kStandaloneHost", "kStoragePod", "kNetwork", "kDistributedVirtualPortgroup", "kTagCategory", "kTag"]
        if vmware_type not in allowed_values:
            raise ValueError(
                "Invalid value for `vmware_type` ({0}), must be one of {1}"
                .format(vmware_type, allowed_values)
            )

        self._vmware_type = vmware_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
