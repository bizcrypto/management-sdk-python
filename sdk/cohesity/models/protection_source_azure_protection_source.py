# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProtectionSourceAzureProtectionSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, host_type=None, ip_addresses=None, location=None, memory_mbytes=None, name=None, num_cores=None, resource_id=None, type=None):
        """
        ProtectionSourceAzureProtectionSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'host_type': 'str',
            'ip_addresses': 'list[str]',
            'location': 'str',
            'memory_mbytes': 'int',
            'name': 'str',
            'num_cores': 'int',
            'resource_id': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'host_type': 'hostType',
            'ip_addresses': 'ipAddresses',
            'location': 'location',
            'memory_mbytes': 'memoryMbytes',
            'name': 'name',
            'num_cores': 'numCores',
            'resource_id': 'resourceId',
            'type': 'type'
        }

        self._host_type = host_type
        self._ip_addresses = ip_addresses
        self._location = location
        self._memory_mbytes = memory_mbytes
        self._name = name
        self._num_cores = num_cores
        self._resource_id = resource_id
        self._type = type

    @property
    def host_type(self):
        """
        Gets the host_type of this ProtectionSourceAzureProtectionSource.
        Specifies the OS type of the Protection Source of type 'kVirtualMachine' such as 'kWindows' or 'kLinux'. overrideDescription: true 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system.

        :return: The host_type of this ProtectionSourceAzureProtectionSource.
        :rtype: str
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """
        Sets the host_type of this ProtectionSourceAzureProtectionSource.
        Specifies the OS type of the Protection Source of type 'kVirtualMachine' such as 'kWindows' or 'kLinux'. overrideDescription: true 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system.

        :param host_type: The host_type of this ProtectionSourceAzureProtectionSource.
        :type: str
        """
        allowed_values = ["kLinux", "kWindows"]
        if host_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_type` ({0}), must be one of {1}"
                .format(host_type, allowed_values)
            )

        self._host_type = host_type

    @property
    def ip_addresses(self):
        """
        Gets the ip_addresses of this ProtectionSourceAzureProtectionSource.


        :return: The ip_addresses of this ProtectionSourceAzureProtectionSource.
        :rtype: list[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """
        Sets the ip_addresses of this ProtectionSourceAzureProtectionSource.


        :param ip_addresses: The ip_addresses of this ProtectionSourceAzureProtectionSource.
        :type: list[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def location(self):
        """
        Gets the location of this ProtectionSourceAzureProtectionSource.
        Specifies the physical location of the resource group.

        :return: The location of this ProtectionSourceAzureProtectionSource.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this ProtectionSourceAzureProtectionSource.
        Specifies the physical location of the resource group.

        :param location: The location of this ProtectionSourceAzureProtectionSource.
        :type: str
        """

        self._location = location

    @property
    def memory_mbytes(self):
        """
        Gets the memory_mbytes of this ProtectionSourceAzureProtectionSource.
        Specifies the amount of memory in MegaBytes of the Azure resource of type 'kComputeOptions'.

        :return: The memory_mbytes of this ProtectionSourceAzureProtectionSource.
        :rtype: int
        """
        return self._memory_mbytes

    @memory_mbytes.setter
    def memory_mbytes(self, memory_mbytes):
        """
        Sets the memory_mbytes of this ProtectionSourceAzureProtectionSource.
        Specifies the amount of memory in MegaBytes of the Azure resource of type 'kComputeOptions'.

        :param memory_mbytes: The memory_mbytes of this ProtectionSourceAzureProtectionSource.
        :type: int
        """

        self._memory_mbytes = memory_mbytes

    @property
    def name(self):
        """
        Gets the name of this ProtectionSourceAzureProtectionSource.
        Specifies the name of the Azure Object set by the Cloud Provider. If the provider did not set a name for the object, this field is not set.

        :return: The name of this ProtectionSourceAzureProtectionSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProtectionSourceAzureProtectionSource.
        Specifies the name of the Azure Object set by the Cloud Provider. If the provider did not set a name for the object, this field is not set.

        :param name: The name of this ProtectionSourceAzureProtectionSource.
        :type: str
        """

        self._name = name

    @property
    def num_cores(self):
        """
        Gets the num_cores of this ProtectionSourceAzureProtectionSource.
        Specifies the number of CPU cores of the Azure resource of type 'kComputeOptions'.

        :return: The num_cores of this ProtectionSourceAzureProtectionSource.
        :rtype: int
        """
        return self._num_cores

    @num_cores.setter
    def num_cores(self, num_cores):
        """
        Sets the num_cores of this ProtectionSourceAzureProtectionSource.
        Specifies the number of CPU cores of the Azure resource of type 'kComputeOptions'.

        :param num_cores: The num_cores of this ProtectionSourceAzureProtectionSource.
        :type: int
        """

        self._num_cores = num_cores

    @property
    def resource_id(self):
        """
        Gets the resource_id of this ProtectionSourceAzureProtectionSource.
        Specifies the unique Id of the resource in Azure environment.

        :return: The resource_id of this ProtectionSourceAzureProtectionSource.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """
        Sets the resource_id of this ProtectionSourceAzureProtectionSource.
        Specifies the unique Id of the resource in Azure environment.

        :param resource_id: The resource_id of this ProtectionSourceAzureProtectionSource.
        :type: str
        """

        self._resource_id = resource_id

    @property
    def type(self):
        """
        Gets the type of this ProtectionSourceAzureProtectionSource.
        Specifies the type of an Azure Protection Source Object such as 'kStorageContainer', 'kVirtualMachine', 'kVirtualNetwork', etc. Specifies the type of an Azure source entity. 'kSubscription' indicates a billing unit within Azure account. 'kResourceGroup' indicates a container that holds related resources. 'kVirtualMachine' indicates a Virtual Machine in Azure environment. 'kStorageAccount' represents a collection of storage containers. 'kStorageKey' indicates a key required to access the storage account. 'kStorageContainer' represents a storage container within a storage account. 'kStorageBlob' represents a storage blog within a storage container. 'kNetworkSecurityGroup' represents a network security group. 'kVirtualNetwork' represents a virtual network. 'kSubnet' represents a subnet within the virtual network. 'kComputeOptions' indicates the number of CPU cores and memory size available for a type of a Virtual Machine.

        :return: The type of this ProtectionSourceAzureProtectionSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ProtectionSourceAzureProtectionSource.
        Specifies the type of an Azure Protection Source Object such as 'kStorageContainer', 'kVirtualMachine', 'kVirtualNetwork', etc. Specifies the type of an Azure source entity. 'kSubscription' indicates a billing unit within Azure account. 'kResourceGroup' indicates a container that holds related resources. 'kVirtualMachine' indicates a Virtual Machine in Azure environment. 'kStorageAccount' represents a collection of storage containers. 'kStorageKey' indicates a key required to access the storage account. 'kStorageContainer' represents a storage container within a storage account. 'kStorageBlob' represents a storage blog within a storage container. 'kNetworkSecurityGroup' represents a network security group. 'kVirtualNetwork' represents a virtual network. 'kSubnet' represents a subnet within the virtual network. 'kComputeOptions' indicates the number of CPU cores and memory size available for a type of a Virtual Machine.

        :param type: The type of this ProtectionSourceAzureProtectionSource.
        :type: str
        """
        allowed_values = ["kSubscription", "kResourceGroup", "kVirtualMachine", "kStorageAccount", "kStorageKey", "kStorageContainer", "kStorageBlob", "kNetworkSecurityGroup", "kVirtualNetwork", "kSubnet", "kComputeOptions"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
