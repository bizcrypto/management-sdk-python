# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RemoteJobScript(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, full_backup_script=None, incremental_backup_script=None, log_backup_script=None, remote_host=None, username=None):
        """
        RemoteJobScript - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'full_backup_script': 'ProtectionJobRemoteScriptFullBackupScript',
            'incremental_backup_script': 'ProtectionJobRemoteScriptIncrementalBackupScript',
            'log_backup_script': 'ProtectionJobRemoteScriptLogBackupScript',
            'remote_host': 'ProtectionJobRemoteScriptRemoteHost',
            'username': 'str'
        }

        self.attribute_map = {
            'full_backup_script': 'fullBackupScript',
            'incremental_backup_script': 'incrementalBackupScript',
            'log_backup_script': 'logBackupScript',
            'remote_host': 'remoteHost',
            'username': 'username'
        }

        self._full_backup_script = full_backup_script
        self._incremental_backup_script = incremental_backup_script
        self._log_backup_script = log_backup_script
        self._remote_host = remote_host
        self._username = username

    @property
    def full_backup_script(self):
        """
        Gets the full_backup_script of this RemoteJobScript.


        :return: The full_backup_script of this RemoteJobScript.
        :rtype: ProtectionJobRemoteScriptFullBackupScript
        """
        return self._full_backup_script

    @full_backup_script.setter
    def full_backup_script(self, full_backup_script):
        """
        Sets the full_backup_script of this RemoteJobScript.


        :param full_backup_script: The full_backup_script of this RemoteJobScript.
        :type: ProtectionJobRemoteScriptFullBackupScript
        """

        self._full_backup_script = full_backup_script

    @property
    def incremental_backup_script(self):
        """
        Gets the incremental_backup_script of this RemoteJobScript.


        :return: The incremental_backup_script of this RemoteJobScript.
        :rtype: ProtectionJobRemoteScriptIncrementalBackupScript
        """
        return self._incremental_backup_script

    @incremental_backup_script.setter
    def incremental_backup_script(self, incremental_backup_script):
        """
        Sets the incremental_backup_script of this RemoteJobScript.


        :param incremental_backup_script: The incremental_backup_script of this RemoteJobScript.
        :type: ProtectionJobRemoteScriptIncrementalBackupScript
        """

        self._incremental_backup_script = incremental_backup_script

    @property
    def log_backup_script(self):
        """
        Gets the log_backup_script of this RemoteJobScript.


        :return: The log_backup_script of this RemoteJobScript.
        :rtype: ProtectionJobRemoteScriptLogBackupScript
        """
        return self._log_backup_script

    @log_backup_script.setter
    def log_backup_script(self, log_backup_script):
        """
        Sets the log_backup_script of this RemoteJobScript.


        :param log_backup_script: The log_backup_script of this RemoteJobScript.
        :type: ProtectionJobRemoteScriptLogBackupScript
        """

        self._log_backup_script = log_backup_script

    @property
    def remote_host(self):
        """
        Gets the remote_host of this RemoteJobScript.


        :return: The remote_host of this RemoteJobScript.
        :rtype: ProtectionJobRemoteScriptRemoteHost
        """
        return self._remote_host

    @remote_host.setter
    def remote_host(self, remote_host):
        """
        Sets the remote_host of this RemoteJobScript.


        :param remote_host: The remote_host of this RemoteJobScript.
        :type: ProtectionJobRemoteScriptRemoteHost
        """

        self._remote_host = remote_host

    @property
    def username(self):
        """
        Gets the username of this RemoteJobScript.
        Specifies the username that will be used to login to the remote host. For host type 'kLinux', it is expected that user has setup the password-less access. So only username field is required.

        :return: The username of this RemoteJobScript.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this RemoteJobScript.
        Specifies the username that will be used to login to the remote host. For host type 'kLinux', it is expected that user has setup the password-less access. So only username field is required.

        :param username: The username of this RemoteJobScript.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
