# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class FileRestoreInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, error=None, filename=None, filesystem_volume=None, is_folder=None):
        """
        FileRestoreInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'error': 'RequestError',
            'filename': 'str',
            'filesystem_volume': 'FilesystemVolume',
            'is_folder': 'bool'
        }

        self.attribute_map = {
            'error': 'error',
            'filename': 'filename',
            'filesystem_volume': 'filesystemVolume',
            'is_folder': 'isFolder'
        }

        self._error = error
        self._filename = filename
        self._filesystem_volume = filesystem_volume
        self._is_folder = is_folder

    @property
    def error(self):
        """
        Gets the error of this FileRestoreInfo.
        Specifies any error status for the file. If this error is set, it means we fail to get information for this file or file is not present in this instance id.

        :return: The error of this FileRestoreInfo.
        :rtype: RequestError
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this FileRestoreInfo.
        Specifies any error status for the file. If this error is set, it means we fail to get information for this file or file is not present in this instance id.

        :param error: The error of this FileRestoreInfo.
        :type: RequestError
        """

        self._error = error

    @property
    def filename(self):
        """
        Gets the filename of this FileRestoreInfo.
        Specifies the path of the file/directory.

        :return: The filename of this FileRestoreInfo.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """
        Sets the filename of this FileRestoreInfo.
        Specifies the path of the file/directory.

        :param filename: The filename of this FileRestoreInfo.
        :type: str
        """

        self._filename = filename

    @property
    def filesystem_volume(self):
        """
        Gets the filesystem_volume of this FileRestoreInfo.
        Specifies the filesystem volume information.

        :return: The filesystem_volume of this FileRestoreInfo.
        :rtype: FilesystemVolume
        """
        return self._filesystem_volume

    @filesystem_volume.setter
    def filesystem_volume(self, filesystem_volume):
        """
        Sets the filesystem_volume of this FileRestoreInfo.
        Specifies the filesystem volume information.

        :param filesystem_volume: The filesystem_volume of this FileRestoreInfo.
        :type: FilesystemVolume
        """

        self._filesystem_volume = filesystem_volume

    @property
    def is_folder(self):
        """
        Gets the is_folder of this FileRestoreInfo.
        Specifies whether the file path is a folder.

        :return: The is_folder of this FileRestoreInfo.
        :rtype: bool
        """
        return self._is_folder

    @is_folder.setter
    def is_folder(self, is_folder):
        """
        Sets the is_folder of this FileRestoreInfo.
        Specifies whether the file path is a folder.

        :param is_folder: The is_folder of this FileRestoreInfo.
        :type: bool
        """

        self._is_folder = is_folder

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
