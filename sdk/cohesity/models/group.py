# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Group(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_time_msecs=None, description=None, domain=None, last_updated_time_msecs=None, name=None, restricted=None, roles=None, sid=None):
        """
        Group - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_time_msecs': 'int',
            'description': 'str',
            'domain': 'str',
            'last_updated_time_msecs': 'int',
            'name': 'str',
            'restricted': 'bool',
            'roles': 'list[str]',
            'sid': 'str'
        }

        self.attribute_map = {
            'created_time_msecs': 'createdTimeMsecs',
            'description': 'description',
            'domain': 'domain',
            'last_updated_time_msecs': 'lastUpdatedTimeMsecs',
            'name': 'name',
            'restricted': 'restricted',
            'roles': 'roles',
            'sid': 'sid'
        }

        self._created_time_msecs = created_time_msecs
        self._description = description
        self._domain = domain
        self._last_updated_time_msecs = last_updated_time_msecs
        self._name = name
        self._restricted = restricted
        self._roles = roles
        self._sid = sid

    @property
    def created_time_msecs(self):
        """
        Gets the created_time_msecs of this Group.
        Specifies the epoch time in milliseconds when the group was created/added.

        :return: The created_time_msecs of this Group.
        :rtype: int
        """
        return self._created_time_msecs

    @created_time_msecs.setter
    def created_time_msecs(self, created_time_msecs):
        """
        Sets the created_time_msecs of this Group.
        Specifies the epoch time in milliseconds when the group was created/added.

        :param created_time_msecs: The created_time_msecs of this Group.
        :type: int
        """

        self._created_time_msecs = created_time_msecs

    @property
    def description(self):
        """
        Gets the description of this Group.
        Specifies a description of the group.

        :return: The description of this Group.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Group.
        Specifies a description of the group.

        :param description: The description of this Group.
        :type: str
        """

        self._description = description

    @property
    def domain(self):
        """
        Gets the domain of this Group.
        Specifies the domain of the group.

        :return: The domain of this Group.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this Group.
        Specifies the domain of the group.

        :param domain: The domain of this Group.
        :type: str
        """

        self._domain = domain

    @property
    def last_updated_time_msecs(self):
        """
        Gets the last_updated_time_msecs of this Group.
        Specifies the epoch time in milliseconds when the group was last modified.

        :return: The last_updated_time_msecs of this Group.
        :rtype: int
        """
        return self._last_updated_time_msecs

    @last_updated_time_msecs.setter
    def last_updated_time_msecs(self, last_updated_time_msecs):
        """
        Sets the last_updated_time_msecs of this Group.
        Specifies the epoch time in milliseconds when the group was last modified.

        :param last_updated_time_msecs: The last_updated_time_msecs of this Group.
        :type: int
        """

        self._last_updated_time_msecs = last_updated_time_msecs

    @property
    def name(self):
        """
        Gets the name of this Group.
        Specifies the name of the group.

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Group.
        Specifies the name of the group.

        :param name: The name of this Group.
        :type: str
        """

        self._name = name

    @property
    def restricted(self):
        """
        Gets the restricted of this Group.
        Whether the group is a restricted group. Users belonging to a restricted group can only view objects they have permissions to.

        :return: The restricted of this Group.
        :rtype: bool
        """
        return self._restricted

    @restricted.setter
    def restricted(self, restricted):
        """
        Sets the restricted of this Group.
        Whether the group is a restricted group. Users belonging to a restricted group can only view objects they have permissions to.

        :param restricted: The restricted of this Group.
        :type: bool
        """

        self._restricted = restricted

    @property
    def roles(self):
        """
        Gets the roles of this Group.
        Specifies the Cohesity roles to associate with the group such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for all the users in this group.

        :return: The roles of this Group.
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """
        Sets the roles of this Group.
        Specifies the Cohesity roles to associate with the group such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for all the users in this group.

        :param roles: The roles of this Group.
        :type: list[str]
        """

        self._roles = roles

    @property
    def sid(self):
        """
        Gets the sid of this Group.
        Specifies the unique Security ID (SID) of the group.

        :return: The sid of this Group.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """
        Sets the sid of this Group.
        Specifies the unique Security ID (SID) of the group.

        :param sid: The sid of this Group.
        :type: str
        """

        self._sid = sid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
