# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RemoteVaultSearchJobResults(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_count=None, cluster_match_string=None, cookie=None, end_time_usecs=None, error=None, job_count=None, job_match_string=None, protection_jobs=None, search_job_status=None, search_job_uid=None, start_time_usecs=None, vault_id=None, vault_name=None):
        """
        RemoteVaultSearchJobResults - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cluster_count': 'int',
            'cluster_match_string': 'str',
            'cookie': 'str',
            'end_time_usecs': 'int',
            'error': 'str',
            'job_count': 'int',
            'job_match_string': 'str',
            'protection_jobs': 'list[RemoteProtectionJobRunInformation]',
            'search_job_status': 'str',
            'search_job_uid': 'RemoteVaultSearchJobResultsSearchJobUid',
            'start_time_usecs': 'int',
            'vault_id': 'int',
            'vault_name': 'str'
        }

        self.attribute_map = {
            'cluster_count': 'clusterCount',
            'cluster_match_string': 'clusterMatchString',
            'cookie': 'cookie',
            'end_time_usecs': 'endTimeUsecs',
            'error': 'error',
            'job_count': 'jobCount',
            'job_match_string': 'jobMatchString',
            'protection_jobs': 'protectionJobs',
            'search_job_status': 'searchJobStatus',
            'search_job_uid': 'searchJobUid',
            'start_time_usecs': 'startTimeUsecs',
            'vault_id': 'vaultId',
            'vault_name': 'vaultName'
        }

        self._cluster_count = cluster_count
        self._cluster_match_string = cluster_match_string
        self._cookie = cookie
        self._end_time_usecs = end_time_usecs
        self._error = error
        self._job_count = job_count
        self._job_match_string = job_match_string
        self._protection_jobs = protection_jobs
        self._search_job_status = search_job_status
        self._search_job_uid = search_job_uid
        self._start_time_usecs = start_time_usecs
        self._vault_id = vault_id
        self._vault_name = vault_name

    @property
    def cluster_count(self):
        """
        Gets the cluster_count of this RemoteVaultSearchJobResults.
        Specifies number of Clusters that have archived to the remote Vault that match the criteria specified in the search Job, up to this point in the search. If the search is complete, the total number of Clusters that have archived to the remote Vault and that match the search criteria for the search Job, are reported. If the search was not complete, a partial number is reported.

        :return: The cluster_count of this RemoteVaultSearchJobResults.
        :rtype: int
        """
        return self._cluster_count

    @cluster_count.setter
    def cluster_count(self, cluster_count):
        """
        Sets the cluster_count of this RemoteVaultSearchJobResults.
        Specifies number of Clusters that have archived to the remote Vault that match the criteria specified in the search Job, up to this point in the search. If the search is complete, the total number of Clusters that have archived to the remote Vault and that match the search criteria for the search Job, are reported. If the search was not complete, a partial number is reported.

        :param cluster_count: The cluster_count of this RemoteVaultSearchJobResults.
        :type: int
        """

        self._cluster_count = cluster_count

    @property
    def cluster_match_string(self):
        """
        Gets the cluster_match_string of this RemoteVaultSearchJobResults.
        Specifies the value of the clusterMatchSting if it was set in the original search Job.

        :return: The cluster_match_string of this RemoteVaultSearchJobResults.
        :rtype: str
        """
        return self._cluster_match_string

    @cluster_match_string.setter
    def cluster_match_string(self, cluster_match_string):
        """
        Sets the cluster_match_string of this RemoteVaultSearchJobResults.
        Specifies the value of the clusterMatchSting if it was set in the original search Job.

        :param cluster_match_string: The cluster_match_string of this RemoteVaultSearchJobResults.
        :type: str
        """

        self._cluster_match_string = cluster_match_string

    @property
    def cookie(self):
        """
        Gets the cookie of this RemoteVaultSearchJobResults.
        Specifies an opaque string to pass to the next request to get the next set of search results. This is provided to support pagination. If null, this is the last set of search results.

        :return: The cookie of this RemoteVaultSearchJobResults.
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """
        Sets the cookie of this RemoteVaultSearchJobResults.
        Specifies an opaque string to pass to the next request to get the next set of search results. This is provided to support pagination. If null, this is the last set of search results.

        :param cookie: The cookie of this RemoteVaultSearchJobResults.
        :type: str
        """

        self._cookie = cookie

    @property
    def end_time_usecs(self):
        """
        Gets the end_time_usecs of this RemoteVaultSearchJobResults.
        Specifies the value of endTimeUsecs if it was set in the original search Job. End time is recorded as a Unix epoch Timestamp (in microseconds).

        :return: The end_time_usecs of this RemoteVaultSearchJobResults.
        :rtype: int
        """
        return self._end_time_usecs

    @end_time_usecs.setter
    def end_time_usecs(self, end_time_usecs):
        """
        Sets the end_time_usecs of this RemoteVaultSearchJobResults.
        Specifies the value of endTimeUsecs if it was set in the original search Job. End time is recorded as a Unix epoch Timestamp (in microseconds).

        :param end_time_usecs: The end_time_usecs of this RemoteVaultSearchJobResults.
        :type: int
        """

        self._end_time_usecs = end_time_usecs

    @property
    def error(self):
        """
        Gets the error of this RemoteVaultSearchJobResults.
        Specifies the error message if the search fails.

        :return: The error of this RemoteVaultSearchJobResults.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this RemoteVaultSearchJobResults.
        Specifies the error message if the search fails.

        :param error: The error of this RemoteVaultSearchJobResults.
        :type: str
        """

        self._error = error

    @property
    def job_count(self):
        """
        Gets the job_count of this RemoteVaultSearchJobResults.
        Specifies number of Protection Jobs that have archived to the remote Vault that match the criteria specified in the search Job. If the search is complete, the total number of Protection Jobs that have archived to the remote Vault and match the search criteria for the search Job, are reported. If the search is not complete, a partial number is reported.

        :return: The job_count of this RemoteVaultSearchJobResults.
        :rtype: int
        """
        return self._job_count

    @job_count.setter
    def job_count(self, job_count):
        """
        Sets the job_count of this RemoteVaultSearchJobResults.
        Specifies number of Protection Jobs that have archived to the remote Vault that match the criteria specified in the search Job. If the search is complete, the total number of Protection Jobs that have archived to the remote Vault and match the search criteria for the search Job, are reported. If the search is not complete, a partial number is reported.

        :param job_count: The job_count of this RemoteVaultSearchJobResults.
        :type: int
        """

        self._job_count = job_count

    @property
    def job_match_string(self):
        """
        Gets the job_match_string of this RemoteVaultSearchJobResults.
        Specifies the value of the jobMatchSting if it was set in the original search Job.

        :return: The job_match_string of this RemoteVaultSearchJobResults.
        :rtype: str
        """
        return self._job_match_string

    @job_match_string.setter
    def job_match_string(self, job_match_string):
        """
        Sets the job_match_string of this RemoteVaultSearchJobResults.
        Specifies the value of the jobMatchSting if it was set in the original search Job.

        :param job_match_string: The job_match_string of this RemoteVaultSearchJobResults.
        :type: str
        """

        self._job_match_string = job_match_string

    @property
    def protection_jobs(self):
        """
        Gets the protection_jobs of this RemoteVaultSearchJobResults.
        Specifies a list of Protection Jobs that have archived data to a remote Vault and that also match the filter criteria.

        :return: The protection_jobs of this RemoteVaultSearchJobResults.
        :rtype: list[RemoteProtectionJobRunInformation]
        """
        return self._protection_jobs

    @protection_jobs.setter
    def protection_jobs(self, protection_jobs):
        """
        Sets the protection_jobs of this RemoteVaultSearchJobResults.
        Specifies a list of Protection Jobs that have archived data to a remote Vault and that also match the filter criteria.

        :param protection_jobs: The protection_jobs of this RemoteVaultSearchJobResults.
        :type: list[RemoteProtectionJobRunInformation]
        """

        self._protection_jobs = protection_jobs

    @property
    def search_job_status(self):
        """
        Gets the search_job_status of this RemoteVaultSearchJobResults.
        Specifies the status of the search Job. 'kJobRunning' indicates that the Job/task is currently running. 'kJobFinished' indicates that the Job/task completed and finished. 'kJobFailed' indicates that the Job/task failed and did not complete. 'kJobCanceled' indicates that the Job/task was canceled. 'kJobPaused' indicates the Job/task is paused.

        :return: The search_job_status of this RemoteVaultSearchJobResults.
        :rtype: str
        """
        return self._search_job_status

    @search_job_status.setter
    def search_job_status(self, search_job_status):
        """
        Sets the search_job_status of this RemoteVaultSearchJobResults.
        Specifies the status of the search Job. 'kJobRunning' indicates that the Job/task is currently running. 'kJobFinished' indicates that the Job/task completed and finished. 'kJobFailed' indicates that the Job/task failed and did not complete. 'kJobCanceled' indicates that the Job/task was canceled. 'kJobPaused' indicates the Job/task is paused.

        :param search_job_status: The search_job_status of this RemoteVaultSearchJobResults.
        :type: str
        """
        allowed_values = ["kJobRunning", "kJobFinished", "kJobFailed", "kJobCanceled", "kJobPaused"]
        if search_job_status not in allowed_values:
            raise ValueError(
                "Invalid value for `search_job_status` ({0}), must be one of {1}"
                .format(search_job_status, allowed_values)
            )

        self._search_job_status = search_job_status

    @property
    def search_job_uid(self):
        """
        Gets the search_job_uid of this RemoteVaultSearchJobResults.


        :return: The search_job_uid of this RemoteVaultSearchJobResults.
        :rtype: RemoteVaultSearchJobResultsSearchJobUid
        """
        return self._search_job_uid

    @search_job_uid.setter
    def search_job_uid(self, search_job_uid):
        """
        Sets the search_job_uid of this RemoteVaultSearchJobResults.


        :param search_job_uid: The search_job_uid of this RemoteVaultSearchJobResults.
        :type: RemoteVaultSearchJobResultsSearchJobUid
        """

        self._search_job_uid = search_job_uid

    @property
    def start_time_usecs(self):
        """
        Gets the start_time_usecs of this RemoteVaultSearchJobResults.
        Specifies the value of startTimeUsecs if it was set in the original search Job. Start time is recorded as a Unix epoch Timestamp (in microseconds).

        :return: The start_time_usecs of this RemoteVaultSearchJobResults.
        :rtype: int
        """
        return self._start_time_usecs

    @start_time_usecs.setter
    def start_time_usecs(self, start_time_usecs):
        """
        Sets the start_time_usecs of this RemoteVaultSearchJobResults.
        Specifies the value of startTimeUsecs if it was set in the original search Job. Start time is recorded as a Unix epoch Timestamp (in microseconds).

        :param start_time_usecs: The start_time_usecs of this RemoteVaultSearchJobResults.
        :type: int
        """

        self._start_time_usecs = start_time_usecs

    @property
    def vault_id(self):
        """
        Gets the vault_id of this RemoteVaultSearchJobResults.
        Specifies the id of the remote Vault that was searched.

        :return: The vault_id of this RemoteVaultSearchJobResults.
        :rtype: int
        """
        return self._vault_id

    @vault_id.setter
    def vault_id(self, vault_id):
        """
        Sets the vault_id of this RemoteVaultSearchJobResults.
        Specifies the id of the remote Vault that was searched.

        :param vault_id: The vault_id of this RemoteVaultSearchJobResults.
        :type: int
        """

        self._vault_id = vault_id

    @property
    def vault_name(self):
        """
        Gets the vault_name of this RemoteVaultSearchJobResults.
        Specifies the name of the remote Vault that was searched.

        :return: The vault_name of this RemoteVaultSearchJobResults.
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """
        Sets the vault_name of this RemoteVaultSearchJobResults.
        Specifies the name of the remote Vault that was searched.

        :param vault_name: The vault_name of this RemoteVaultSearchJobResults.
        :type: str
        """

        self._vault_name = vault_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
