# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Vlan(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, add_to_cluster_partition=None, description=None, gateway=None, hostname=None, id=None, ips=None, subnet=None):
        """
        Vlan - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'add_to_cluster_partition': 'bool',
            'description': 'str',
            'gateway': 'str',
            'hostname': 'str',
            'id': 'int',
            'ips': 'list[str]',
            'subnet': 'VlanSubnet'
        }

        self.attribute_map = {
            'add_to_cluster_partition': 'addToClusterPartition',
            'description': 'description',
            'gateway': 'gateway',
            'hostname': 'hostname',
            'id': 'id',
            'ips': 'ips',
            'subnet': 'subnet'
        }

        self._add_to_cluster_partition = add_to_cluster_partition
        self._description = description
        self._gateway = gateway
        self._hostname = hostname
        self._id = id
        self._ips = ips
        self._subnet = subnet

    @property
    def add_to_cluster_partition(self):
        """
        Gets the add_to_cluster_partition of this Vlan.
        Specifies whether to add the VLAN IPs to the cluster partition that already has one or more IPs from this VLAN.

        :return: The add_to_cluster_partition of this Vlan.
        :rtype: bool
        """
        return self._add_to_cluster_partition

    @add_to_cluster_partition.setter
    def add_to_cluster_partition(self, add_to_cluster_partition):
        """
        Sets the add_to_cluster_partition of this Vlan.
        Specifies whether to add the VLAN IPs to the cluster partition that already has one or more IPs from this VLAN.

        :param add_to_cluster_partition: The add_to_cluster_partition of this Vlan.
        :type: bool
        """

        self._add_to_cluster_partition = add_to_cluster_partition

    @property
    def description(self):
        """
        Gets the description of this Vlan.
        Specifies a description of the VLAN.

        :return: The description of this Vlan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Vlan.
        Specifies a description of the VLAN.

        :param description: The description of this Vlan.
        :type: str
        """

        self._description = description

    @property
    def gateway(self):
        """
        Gets the gateway of this Vlan.
        Specifies the Gateway of the VLAN.

        :return: The gateway of this Vlan.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this Vlan.
        Specifies the Gateway of the VLAN.

        :param gateway: The gateway of this Vlan.
        :type: str
        """

        self._gateway = gateway

    @property
    def hostname(self):
        """
        Gets the hostname of this Vlan.
        Specifies the hostname of the VLAN.

        :return: The hostname of this Vlan.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """
        Sets the hostname of this Vlan.
        Specifies the hostname of the VLAN.

        :param hostname: The hostname of this Vlan.
        :type: str
        """

        self._hostname = hostname

    @property
    def id(self):
        """
        Gets the id of this Vlan.
        Specifies the id of the VLAN.

        :return: The id of this Vlan.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Vlan.
        Specifies the id of the VLAN.

        :param id: The id of this Vlan.
        :type: int
        """

        self._id = id

    @property
    def ips(self):
        """
        Gets the ips of this Vlan.
        Specifies a list of IPs in the VLAN.

        :return: The ips of this Vlan.
        :rtype: list[str]
        """
        return self._ips

    @ips.setter
    def ips(self, ips):
        """
        Sets the ips of this Vlan.
        Specifies a list of IPs in the VLAN.

        :param ips: The ips of this Vlan.
        :type: list[str]
        """

        self._ips = ips

    @property
    def subnet(self):
        """
        Gets the subnet of this Vlan.


        :return: The subnet of this Vlan.
        :rtype: VlanSubnet
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """
        Sets the subnet of this Vlan.


        :param subnet: The subnet of this Vlan.
        :type: VlanSubnet
        """

        self._subnet = subnet

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
