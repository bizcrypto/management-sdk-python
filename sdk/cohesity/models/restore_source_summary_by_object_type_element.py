# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RestoreSourceSummaryByObjectTypeElement(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, datastore_id=None, file_restore_info=None, name=None, objects=None, protection_source_name=None, start_time_usecs=None, type=None, username=None):
        """
        RestoreSourceSummaryByObjectTypeElement - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'datastore_id': 'int',
            'file_restore_info': 'list[FileRestoreInfo]',
            'name': 'str',
            'objects': 'list[RestoreObject]',
            'protection_source_name': 'str',
            'start_time_usecs': 'int',
            'type': 'str',
            'username': 'str'
        }

        self.attribute_map = {
            'datastore_id': 'datastoreId',
            'file_restore_info': 'fileRestoreInfo',
            'name': 'name',
            'objects': 'objects',
            'protection_source_name': 'protectionSourceName',
            'start_time_usecs': 'startTimeUsecs',
            'type': 'type',
            'username': 'username'
        }

        self._datastore_id = datastore_id
        self._file_restore_info = file_restore_info
        self._name = name
        self._objects = objects
        self._protection_source_name = protection_source_name
        self._start_time_usecs = start_time_usecs
        self._type = type
        self._username = username

    @property
    def datastore_id(self):
        """
        Gets the datastore_id of this RestoreSourceSummaryByObjectTypeElement.
        Specifies the datastore where the object's files are recovered to. This field is populated when objects are recovered to a different resource pool or to a different parent source. This field is not populated when objects are recovered to their original datastore locations in the original parent source.

        :return: The datastore_id of this RestoreSourceSummaryByObjectTypeElement.
        :rtype: int
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """
        Sets the datastore_id of this RestoreSourceSummaryByObjectTypeElement.
        Specifies the datastore where the object's files are recovered to. This field is populated when objects are recovered to a different resource pool or to a different parent source. This field is not populated when objects are recovered to their original datastore locations in the original parent source.

        :param datastore_id: The datastore_id of this RestoreSourceSummaryByObjectTypeElement.
        :type: int
        """

        self._datastore_id = datastore_id

    @property
    def file_restore_info(self):
        """
        Gets the file_restore_info of this RestoreSourceSummaryByObjectTypeElement.


        :return: The file_restore_info of this RestoreSourceSummaryByObjectTypeElement.
        :rtype: list[FileRestoreInfo]
        """
        return self._file_restore_info

    @file_restore_info.setter
    def file_restore_info(self, file_restore_info):
        """
        Sets the file_restore_info of this RestoreSourceSummaryByObjectTypeElement.


        :param file_restore_info: The file_restore_info of this RestoreSourceSummaryByObjectTypeElement.
        :type: list[FileRestoreInfo]
        """

        self._file_restore_info = file_restore_info

    @property
    def name(self):
        """
        Gets the name of this RestoreSourceSummaryByObjectTypeElement.
        Specifies the name of the Restore Task. This field must be set and must be a unique name.

        :return: The name of this RestoreSourceSummaryByObjectTypeElement.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestoreSourceSummaryByObjectTypeElement.
        Specifies the name of the Restore Task. This field must be set and must be a unique name.

        :param name: The name of this RestoreSourceSummaryByObjectTypeElement.
        :type: str
        """

        self._name = name

    @property
    def objects(self):
        """
        Gets the objects of this RestoreSourceSummaryByObjectTypeElement.
        Specifies a list of Protection Source objects or Protection Job objects (with specified Protection Source objects).

        :return: The objects of this RestoreSourceSummaryByObjectTypeElement.
        :rtype: list[RestoreObject]
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """
        Sets the objects of this RestoreSourceSummaryByObjectTypeElement.
        Specifies a list of Protection Source objects or Protection Job objects (with specified Protection Source objects).

        :param objects: The objects of this RestoreSourceSummaryByObjectTypeElement.
        :type: list[RestoreObject]
        """

        self._objects = objects

    @property
    def protection_source_name(self):
        """
        Gets the protection_source_name of this RestoreSourceSummaryByObjectTypeElement.
        The protection source name.

        :return: The protection_source_name of this RestoreSourceSummaryByObjectTypeElement.
        :rtype: str
        """
        return self._protection_source_name

    @protection_source_name.setter
    def protection_source_name(self, protection_source_name):
        """
        Sets the protection_source_name of this RestoreSourceSummaryByObjectTypeElement.
        The protection source name.

        :param protection_source_name: The protection_source_name of this RestoreSourceSummaryByObjectTypeElement.
        :type: str
        """

        self._protection_source_name = protection_source_name

    @property
    def start_time_usecs(self):
        """
        Gets the start_time_usecs of this RestoreSourceSummaryByObjectTypeElement.
        Specifies the start time of the Restore Task as a Unix epoch Timestamp (in microseconds).

        :return: The start_time_usecs of this RestoreSourceSummaryByObjectTypeElement.
        :rtype: int
        """
        return self._start_time_usecs

    @start_time_usecs.setter
    def start_time_usecs(self, start_time_usecs):
        """
        Sets the start_time_usecs of this RestoreSourceSummaryByObjectTypeElement.
        Specifies the start time of the Restore Task as a Unix epoch Timestamp (in microseconds).

        :param start_time_usecs: The start_time_usecs of this RestoreSourceSummaryByObjectTypeElement.
        :type: int
        """

        self._start_time_usecs = start_time_usecs

    @property
    def type(self):
        """
        Gets the type of this RestoreSourceSummaryByObjectTypeElement.
        Specify the object type to filter with. Specifies the type of Restore Task.  'kRecoverVMs' specifies a Restore Task that recovers VMs. 'kCloneVMs' specifies a Restore Task that clones VMs. 'kCloneView' specifies a Restore Task that clones a View. 'kMountVolumes' specifies a Restore Task that mounts volumes. 'kRestoreFiles' specifies a Restore Task that recovers files and folders.

        :return: The type of this RestoreSourceSummaryByObjectTypeElement.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this RestoreSourceSummaryByObjectTypeElement.
        Specify the object type to filter with. Specifies the type of Restore Task.  'kRecoverVMs' specifies a Restore Task that recovers VMs. 'kCloneVMs' specifies a Restore Task that clones VMs. 'kCloneView' specifies a Restore Task that clones a View. 'kMountVolumes' specifies a Restore Task that mounts volumes. 'kRestoreFiles' specifies a Restore Task that recovers files and folders.

        :param type: The type of this RestoreSourceSummaryByObjectTypeElement.
        :type: str
        """
        allowed_values = ["kRecoverVMs", "kCloneVMs", "kCloneView", "kMountVolumes", "kRestoreFiles"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def username(self):
        """
        Gets the username of this RestoreSourceSummaryByObjectTypeElement.
        Specifies the Cohesity user who requested this Restore Task.

        :return: The username of this RestoreSourceSummaryByObjectTypeElement.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this RestoreSourceSummaryByObjectTypeElement.
        Specifies the Cohesity user who requested this Restore Task.

        :param username: The username of this RestoreSourceSummaryByObjectTypeElement.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
