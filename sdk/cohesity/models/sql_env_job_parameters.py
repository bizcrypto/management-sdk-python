# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SqlEnvJobParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, aag_preference=None, aag_preference_from_sql_server=None, backup_system_databases=None, backup_type=None, backup_volumes_only=None, is_copy_only_full=None, user_database_preference=None):
        """
        SqlEnvJobParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'aag_preference': 'str',
            'aag_preference_from_sql_server': 'bool',
            'backup_system_databases': 'bool',
            'backup_type': 'str',
            'backup_volumes_only': 'bool',
            'is_copy_only_full': 'bool',
            'user_database_preference': 'str'
        }

        self.attribute_map = {
            'aag_preference': 'aagPreference',
            'aag_preference_from_sql_server': 'aagPreferenceFromSqlServer',
            'backup_system_databases': 'backupSystemDatabases',
            'backup_type': 'backupType',
            'backup_volumes_only': 'backupVolumesOnly',
            'is_copy_only_full': 'isCopyOnlyFull',
            'user_database_preference': 'userDatabasePreference'
        }

        self._aag_preference = aag_preference
        self._aag_preference_from_sql_server = aag_preference_from_sql_server
        self._backup_system_databases = backup_system_databases
        self._backup_type = backup_type
        self._backup_volumes_only = backup_volumes_only
        self._is_copy_only_full = is_copy_only_full
        self._user_database_preference = user_database_preference

    @property
    def aag_preference(self):
        """
        Gets the aag_preference of this SqlEnvJobParameters.
        kPrimaryReplicaOnly implies backups should always occur on the primary replica. kSecondaryReplicaOnly implies backups should always occur on the secondary replica. kPreferSecondaryReplica implies secondary replica is preferred for backups. kAnyReplica implies no preference of about whether backups are performed on the primary replica or on a secondary replica. If no secondary replica is available, then performing backups on the primary replica is acceptable.

        :return: The aag_preference of this SqlEnvJobParameters.
        :rtype: str
        """
        return self._aag_preference

    @aag_preference.setter
    def aag_preference(self, aag_preference):
        """
        Sets the aag_preference of this SqlEnvJobParameters.
        kPrimaryReplicaOnly implies backups should always occur on the primary replica. kSecondaryReplicaOnly implies backups should always occur on the secondary replica. kPreferSecondaryReplica implies secondary replica is preferred for backups. kAnyReplica implies no preference of about whether backups are performed on the primary replica or on a secondary replica. If no secondary replica is available, then performing backups on the primary replica is acceptable.

        :param aag_preference: The aag_preference of this SqlEnvJobParameters.
        :type: str
        """
        allowed_values = ["kPrimaryReplicaOnly", "kSecondaryReplicaOnly", "kPreferSecondaryReplica", "kAnyReplica"]
        if aag_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `aag_preference` ({0}), must be one of {1}"
                .format(aag_preference, allowed_values)
            )

        self._aag_preference = aag_preference

    @property
    def aag_preference_from_sql_server(self):
        """
        Gets the aag_preference_from_sql_server of this SqlEnvJobParameters.
        If true, AAG preferences are taken from the SQL server host. If this is set to false or not given, preferences can be overridden by aagBackupPreference.

        :return: The aag_preference_from_sql_server of this SqlEnvJobParameters.
        :rtype: bool
        """
        return self._aag_preference_from_sql_server

    @aag_preference_from_sql_server.setter
    def aag_preference_from_sql_server(self, aag_preference_from_sql_server):
        """
        Sets the aag_preference_from_sql_server of this SqlEnvJobParameters.
        If true, AAG preferences are taken from the SQL server host. If this is set to false or not given, preferences can be overridden by aagBackupPreference.

        :param aag_preference_from_sql_server: The aag_preference_from_sql_server of this SqlEnvJobParameters.
        :type: bool
        """

        self._aag_preference_from_sql_server = aag_preference_from_sql_server

    @property
    def backup_system_databases(self):
        """
        Gets the backup_system_databases of this SqlEnvJobParameters.
        If true, system databases are backed up. If this is set to false, system databases are not backed up. If this field is not specified, default value is true.

        :return: The backup_system_databases of this SqlEnvJobParameters.
        :rtype: bool
        """
        return self._backup_system_databases

    @backup_system_databases.setter
    def backup_system_databases(self, backup_system_databases):
        """
        Sets the backup_system_databases of this SqlEnvJobParameters.
        If true, system databases are backed up. If this is set to false, system databases are not backed up. If this field is not specified, default value is true.

        :param backup_system_databases: The backup_system_databases of this SqlEnvJobParameters.
        :type: bool
        """

        self._backup_system_databases = backup_system_databases

    @property
    def backup_type(self):
        """
        Gets the backup_type of this SqlEnvJobParameters.
        kSqlVSSVolume implies volume based VSS full backup. kSqlVSSFile implies file based VSS full backup.

        :return: The backup_type of this SqlEnvJobParameters.
        :rtype: str
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """
        Sets the backup_type of this SqlEnvJobParameters.
        kSqlVSSVolume implies volume based VSS full backup. kSqlVSSFile implies file based VSS full backup.

        :param backup_type: The backup_type of this SqlEnvJobParameters.
        :type: str
        """
        allowed_values = ["kSqlVSSVolume", "kSqlVSSFile"]
        if backup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_type` ({0}), must be one of {1}"
                .format(backup_type, allowed_values)
            )

        self._backup_type = backup_type

    @property
    def backup_volumes_only(self):
        """
        Gets the backup_volumes_only of this SqlEnvJobParameters.
        If set to true, only the volumes associated with databases should be backed up. The user cannot select additional volumes at host level for backup.  If set to false, all the volumes on the host machine will be backed up. In this case, the user can further select the exact set of volumes using host level params.  Note that the volumes associated with selected databases will always be included in the backup.

        :return: The backup_volumes_only of this SqlEnvJobParameters.
        :rtype: bool
        """
        return self._backup_volumes_only

    @backup_volumes_only.setter
    def backup_volumes_only(self, backup_volumes_only):
        """
        Sets the backup_volumes_only of this SqlEnvJobParameters.
        If set to true, only the volumes associated with databases should be backed up. The user cannot select additional volumes at host level for backup.  If set to false, all the volumes on the host machine will be backed up. In this case, the user can further select the exact set of volumes using host level params.  Note that the volumes associated with selected databases will always be included in the backup.

        :param backup_volumes_only: The backup_volumes_only of this SqlEnvJobParameters.
        :type: bool
        """

        self._backup_volumes_only = backup_volumes_only

    @property
    def is_copy_only_full(self):
        """
        Gets the is_copy_only_full of this SqlEnvJobParameters.
        If true, the backup is a full backup with the copy-only option specified.

        :return: The is_copy_only_full of this SqlEnvJobParameters.
        :rtype: bool
        """
        return self._is_copy_only_full

    @is_copy_only_full.setter
    def is_copy_only_full(self, is_copy_only_full):
        """
        Sets the is_copy_only_full of this SqlEnvJobParameters.
        If true, the backup is a full backup with the copy-only option specified.

        :param is_copy_only_full: The is_copy_only_full of this SqlEnvJobParameters.
        :type: bool
        """

        self._is_copy_only_full = is_copy_only_full

    @property
    def user_database_preference(self):
        """
        Gets the user_database_preference of this SqlEnvJobParameters.
        kBackupAllDatabases implies to backup all databases. kBackupAllExceptAAGDatabases implies not to backup AAG databases. kBackupOnlyAAGDatabases implies to backup only AAG databases.

        :return: The user_database_preference of this SqlEnvJobParameters.
        :rtype: str
        """
        return self._user_database_preference

    @user_database_preference.setter
    def user_database_preference(self, user_database_preference):
        """
        Sets the user_database_preference of this SqlEnvJobParameters.
        kBackupAllDatabases implies to backup all databases. kBackupAllExceptAAGDatabases implies not to backup AAG databases. kBackupOnlyAAGDatabases implies to backup only AAG databases.

        :param user_database_preference: The user_database_preference of this SqlEnvJobParameters.
        :type: str
        """
        allowed_values = ["kBackupAllDatabases", "kBackupAllExceptAAGDatabases", "kBackupOnlyAAGDatabases"]
        if user_database_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `user_database_preference` ({0}), must be one of {1}"
                .format(user_database_preference, allowed_values)
            )

        self._user_database_preference = user_database_preference

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
