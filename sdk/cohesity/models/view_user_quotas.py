# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ViewUserQuotas(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cookie=None, quota_and_usage_in_all_views=None, summary_for_user=None, summary_for_view=None, user_quota_settings=None, users_quota_and_usage=None):
        """
        ViewUserQuotas - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cookie': 'str',
            'quota_and_usage_in_all_views': 'list[QuotaAndUsageInView]',
            'summary_for_user': 'UserQuotaSummaryForUser',
            'summary_for_view': 'UserQuotaSummaryForView',
            'user_quota_settings': 'UserQuotaSettings',
            'users_quota_and_usage': 'list[UserQuotaAndUsage]'
        }

        self.attribute_map = {
            'cookie': 'cookie',
            'quota_and_usage_in_all_views': 'quotaAndUsageInAllViews',
            'summary_for_user': 'summaryForUser',
            'summary_for_view': 'summaryForView',
            'user_quota_settings': 'userQuotaSettings',
            'users_quota_and_usage': 'usersQuotaAndUsage'
        }

        self._cookie = cookie
        self._quota_and_usage_in_all_views = quota_and_usage_in_all_views
        self._summary_for_user = summary_for_user
        self._summary_for_view = summary_for_view
        self._user_quota_settings = user_quota_settings
        self._users_quota_and_usage = users_quota_and_usage

    @property
    def cookie(self):
        """
        Gets the cookie of this ViewUserQuotas.
        This cookie can be used in the succeeding call to list user quotas and usages to get the next set of user quota overrides. If set to nil, it means that there's no more results that the server could provide.

        :return: The cookie of this ViewUserQuotas.
        :rtype: str
        """
        return self._cookie

    @cookie.setter
    def cookie(self, cookie):
        """
        Sets the cookie of this ViewUserQuotas.
        This cookie can be used in the succeeding call to list user quotas and usages to get the next set of user quota overrides. If set to nil, it means that there's no more results that the server could provide.

        :param cookie: The cookie of this ViewUserQuotas.
        :type: str
        """

        self._cookie = cookie

    @property
    def quota_and_usage_in_all_views(self):
        """
        Gets the quota_and_usage_in_all_views of this ViewUserQuotas.


        :return: The quota_and_usage_in_all_views of this ViewUserQuotas.
        :rtype: list[QuotaAndUsageInView]
        """
        return self._quota_and_usage_in_all_views

    @quota_and_usage_in_all_views.setter
    def quota_and_usage_in_all_views(self, quota_and_usage_in_all_views):
        """
        Sets the quota_and_usage_in_all_views of this ViewUserQuotas.


        :param quota_and_usage_in_all_views: The quota_and_usage_in_all_views of this ViewUserQuotas.
        :type: list[QuotaAndUsageInView]
        """

        self._quota_and_usage_in_all_views = quota_and_usage_in_all_views

    @property
    def summary_for_user(self):
        """
        Gets the summary_for_user of this ViewUserQuotas.
        UserQuotaSummaryForUser is the summary for user quotas in all views for a user.

        :return: The summary_for_user of this ViewUserQuotas.
        :rtype: UserQuotaSummaryForUser
        """
        return self._summary_for_user

    @summary_for_user.setter
    def summary_for_user(self, summary_for_user):
        """
        Sets the summary_for_user of this ViewUserQuotas.
        UserQuotaSummaryForUser is the summary for user quotas in all views for a user.

        :param summary_for_user: The summary_for_user of this ViewUserQuotas.
        :type: UserQuotaSummaryForUser
        """

        self._summary_for_user = summary_for_user

    @property
    def summary_for_view(self):
        """
        Gets the summary_for_view of this ViewUserQuotas.
        UserQuotaSummaryForView is the summary for user quotas in a view.

        :return: The summary_for_view of this ViewUserQuotas.
        :rtype: UserQuotaSummaryForView
        """
        return self._summary_for_view

    @summary_for_view.setter
    def summary_for_view(self, summary_for_view):
        """
        Sets the summary_for_view of this ViewUserQuotas.
        UserQuotaSummaryForView is the summary for user quotas in a view.

        :param summary_for_view: The summary_for_view of this ViewUserQuotas.
        :type: UserQuotaSummaryForView
        """

        self._summary_for_view = summary_for_view

    @property
    def user_quota_settings(self):
        """
        Gets the user_quota_settings of this ViewUserQuotas.
        The default user quota policy for this view.

        :return: The user_quota_settings of this ViewUserQuotas.
        :rtype: UserQuotaSettings
        """
        return self._user_quota_settings

    @user_quota_settings.setter
    def user_quota_settings(self, user_quota_settings):
        """
        Sets the user_quota_settings of this ViewUserQuotas.
        The default user quota policy for this view.

        :param user_quota_settings: The user_quota_settings of this ViewUserQuotas.
        :type: UserQuotaSettings
        """

        self._user_quota_settings = user_quota_settings

    @property
    def users_quota_and_usage(self):
        """
        Gets the users_quota_and_usage of this ViewUserQuotas.


        :return: The users_quota_and_usage of this ViewUserQuotas.
        :rtype: list[UserQuotaAndUsage]
        """
        return self._users_quota_and_usage

    @users_quota_and_usage.setter
    def users_quota_and_usage(self, users_quota_and_usage):
        """
        Sets the users_quota_and_usage of this ViewUserQuotas.


        :param users_quota_and_usage: The users_quota_and_usage of this ViewUserQuotas.
        :type: list[UserQuotaAndUsage]
        """

        self._users_quota_and_usage = users_quota_and_usage

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
