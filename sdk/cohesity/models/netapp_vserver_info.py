# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class NetappVserverInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, data_protocols=None, interfaces=None, root_cifs_share=None, type=None):
        """
        NetappVserverInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data_protocols': 'list[str]',
            'interfaces': 'list[VserverNetworkInterface]',
            'root_cifs_share': 'CifsShareInfo',
            'type': 'str'
        }

        self.attribute_map = {
            'data_protocols': 'dataProtocols',
            'interfaces': 'interfaces',
            'root_cifs_share': 'rootCifsShare',
            'type': 'type'
        }

        self._data_protocols = data_protocols
        self._interfaces = interfaces
        self._root_cifs_share = root_cifs_share
        self._type = type

    @property
    def data_protocols(self):
        """
        Gets the data_protocols of this NetappVserverInfo.
        Specifies the set of data protocols supported by this Vserver. The kManagement protocol is not supported for this case. 'kNfs' indicates NFS connections. 'kCifs' indicates SMB (CIFS) connections. 'kIscsi' indicates iSCSI connections. 'kFc' indicates Fiber Channel connections. 'kFcache' indicates Flex Cache connections. 'kHttp' indicates HTTP connections. 'kNdmp' indicates NDMP connections. 'kManagement' indicates non-data connections used for management purposes.

        :return: The data_protocols of this NetappVserverInfo.
        :rtype: list[str]
        """
        return self._data_protocols

    @data_protocols.setter
    def data_protocols(self, data_protocols):
        """
        Sets the data_protocols of this NetappVserverInfo.
        Specifies the set of data protocols supported by this Vserver. The kManagement protocol is not supported for this case. 'kNfs' indicates NFS connections. 'kCifs' indicates SMB (CIFS) connections. 'kIscsi' indicates iSCSI connections. 'kFc' indicates Fiber Channel connections. 'kFcache' indicates Flex Cache connections. 'kHttp' indicates HTTP connections. 'kNdmp' indicates NDMP connections. 'kManagement' indicates non-data connections used for management purposes.

        :param data_protocols: The data_protocols of this NetappVserverInfo.
        :type: list[str]
        """
        allowed_values = ["kNfs", "kCifs", "kIscsi", "kFc", "kFcache", "kHttp", "kNdmp", "kManagement"]
        if data_protocols not in allowed_values:
            raise ValueError(
                "Invalid value for `data_protocols` ({0}), must be one of {1}"
                .format(data_protocols, allowed_values)
            )

        self._data_protocols = data_protocols

    @property
    def interfaces(self):
        """
        Gets the interfaces of this NetappVserverInfo.
        Specifies information about all interfaces on this Vserver.

        :return: The interfaces of this NetappVserverInfo.
        :rtype: list[VserverNetworkInterface]
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces):
        """
        Sets the interfaces of this NetappVserverInfo.
        Specifies information about all interfaces on this Vserver.

        :param interfaces: The interfaces of this NetappVserverInfo.
        :type: list[VserverNetworkInterface]
        """

        self._interfaces = interfaces

    @property
    def root_cifs_share(self):
        """
        Gets the root_cifs_share of this NetappVserverInfo.
        Specifies the root 'c$' CIFS share of this Vserver. If it exists, it can be used to mount all CIFS volumes that are junctioned under '/' on this Vserver.

        :return: The root_cifs_share of this NetappVserverInfo.
        :rtype: CifsShareInfo
        """
        return self._root_cifs_share

    @root_cifs_share.setter
    def root_cifs_share(self, root_cifs_share):
        """
        Sets the root_cifs_share of this NetappVserverInfo.
        Specifies the root 'c$' CIFS share of this Vserver. If it exists, it can be used to mount all CIFS volumes that are junctioned under '/' on this Vserver.

        :param root_cifs_share: The root_cifs_share of this NetappVserverInfo.
        :type: CifsShareInfo
        """

        self._root_cifs_share = root_cifs_share

    @property
    def type(self):
        """
        Gets the type of this NetappVserverInfo.
        Specifies the type of this Vserver. Specifies the type of the NetApp Vserver. 'kData' indicates the Vserver is used for data backup and restore. 'kAdmin' indicates the Vserver is used for cluster-wide management. 'kSystem' indicates the Vserver is used for cluster-scoped communications in an IPspace. 'kNode' indicates the Vserver is used as the physical controller. 'kUnknown' indicates the Vserver is used for an unknown purpose.

        :return: The type of this NetappVserverInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this NetappVserverInfo.
        Specifies the type of this Vserver. Specifies the type of the NetApp Vserver. 'kData' indicates the Vserver is used for data backup and restore. 'kAdmin' indicates the Vserver is used for cluster-wide management. 'kSystem' indicates the Vserver is used for cluster-scoped communications in an IPspace. 'kNode' indicates the Vserver is used as the physical controller. 'kUnknown' indicates the Vserver is used for an unknown purpose.

        :param type: The type of this NetappVserverInfo.
        :type: str
        """
        allowed_values = ["kData", "kAdmin", "kSystem", "kNode", "kUnknown"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
