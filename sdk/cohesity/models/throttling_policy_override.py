# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ThrottlingPolicyOverride(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, datastore_id=None, datastore_name=None, throttling_policy=None):
        """
        ThrottlingPolicyOverride - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'datastore_id': 'int',
            'datastore_name': 'str',
            'throttling_policy': 'ThrottlingPolicy'
        }

        self.attribute_map = {
            'datastore_id': 'datastoreId',
            'datastore_name': 'datastoreName',
            'throttling_policy': 'throttlingPolicy'
        }

        self._datastore_id = datastore_id
        self._datastore_name = datastore_name
        self._throttling_policy = throttling_policy

    @property
    def datastore_id(self):
        """
        Gets the datastore_id of this ThrottlingPolicyOverride.
        Specifies the Protection Source id of the Datastore.

        :return: The datastore_id of this ThrottlingPolicyOverride.
        :rtype: int
        """
        return self._datastore_id

    @datastore_id.setter
    def datastore_id(self, datastore_id):
        """
        Sets the datastore_id of this ThrottlingPolicyOverride.
        Specifies the Protection Source id of the Datastore.

        :param datastore_id: The datastore_id of this ThrottlingPolicyOverride.
        :type: int
        """

        self._datastore_id = datastore_id

    @property
    def datastore_name(self):
        """
        Gets the datastore_name of this ThrottlingPolicyOverride.
        Specifies the display name of the Datastore.

        :return: The datastore_name of this ThrottlingPolicyOverride.
        :rtype: str
        """
        return self._datastore_name

    @datastore_name.setter
    def datastore_name(self, datastore_name):
        """
        Sets the datastore_name of this ThrottlingPolicyOverride.
        Specifies the display name of the Datastore.

        :param datastore_name: The datastore_name of this ThrottlingPolicyOverride.
        :type: str
        """

        self._datastore_name = datastore_name

    @property
    def throttling_policy(self):
        """
        Gets the throttling_policy of this ThrottlingPolicyOverride.
        Specifies the throttling policy that should be applied to this Source.

        :return: The throttling_policy of this ThrottlingPolicyOverride.
        :rtype: ThrottlingPolicy
        """
        return self._throttling_policy

    @throttling_policy.setter
    def throttling_policy(self, throttling_policy):
        """
        Sets the throttling_policy of this ThrottlingPolicyOverride.
        Specifies the throttling policy that should be applied to this Source.

        :param throttling_policy: The throttling_policy of this ThrottlingPolicyOverride.
        :type: ThrottlingPolicy
        """

        self._throttling_policy = throttling_policy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
