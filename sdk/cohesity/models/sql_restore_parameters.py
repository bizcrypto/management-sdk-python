# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SqlRestoreParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, capture_tail_logs=None, keep_offline=None, new_database_name=None, new_instance_name=None, restore_time_secs=None, target_data_files_directory=None, target_log_files_directory=None, target_secondary_data_files_directory_list=None):
        """
        SqlRestoreParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'capture_tail_logs': 'bool',
            'keep_offline': 'bool',
            'new_database_name': 'str',
            'new_instance_name': 'str',
            'restore_time_secs': 'int',
            'target_data_files_directory': 'str',
            'target_log_files_directory': 'str',
            'target_secondary_data_files_directory_list': 'list[FilenamePatternToDirectory]'
        }

        self.attribute_map = {
            'capture_tail_logs': 'captureTailLogs',
            'keep_offline': 'keepOffline',
            'new_database_name': 'newDatabaseName',
            'new_instance_name': 'newInstanceName',
            'restore_time_secs': 'restoreTimeSecs',
            'target_data_files_directory': 'targetDataFilesDirectory',
            'target_log_files_directory': 'targetLogFilesDirectory',
            'target_secondary_data_files_directory_list': 'targetSecondaryDataFilesDirectoryList'
        }

        self._capture_tail_logs = capture_tail_logs
        self._keep_offline = keep_offline
        self._new_database_name = new_database_name
        self._new_instance_name = new_instance_name
        self._restore_time_secs = restore_time_secs
        self._target_data_files_directory = target_data_files_directory
        self._target_log_files_directory = target_log_files_directory
        self._target_secondary_data_files_directory_list = target_secondary_data_files_directory_list

    @property
    def capture_tail_logs(self):
        """
        Gets the capture_tail_logs of this SqlRestoreParameters.
        Set this to true if tail logs are to be captured before the restore operation. This is only applicable if we are restoring the SQL database to its hosting Protection Source, and the database is not being renamed.

        :return: The capture_tail_logs of this SqlRestoreParameters.
        :rtype: bool
        """
        return self._capture_tail_logs

    @capture_tail_logs.setter
    def capture_tail_logs(self, capture_tail_logs):
        """
        Sets the capture_tail_logs of this SqlRestoreParameters.
        Set this to true if tail logs are to be captured before the restore operation. This is only applicable if we are restoring the SQL database to its hosting Protection Source, and the database is not being renamed.

        :param capture_tail_logs: The capture_tail_logs of this SqlRestoreParameters.
        :type: bool
        """

        self._capture_tail_logs = capture_tail_logs

    @property
    def keep_offline(self):
        """
        Gets the keep_offline of this SqlRestoreParameters.
        Set this to true if we want to restore the database and do not want to bring it online after restore.  This is only applicable if we are restoring the database back to its original location.

        :return: The keep_offline of this SqlRestoreParameters.
        :rtype: bool
        """
        return self._keep_offline

    @keep_offline.setter
    def keep_offline(self, keep_offline):
        """
        Sets the keep_offline of this SqlRestoreParameters.
        Set this to true if we want to restore the database and do not want to bring it online after restore.  This is only applicable if we are restoring the database back to its original location.

        :param keep_offline: The keep_offline of this SqlRestoreParameters.
        :type: bool
        """

        self._keep_offline = keep_offline

    @property
    def new_database_name(self):
        """
        Gets the new_database_name of this SqlRestoreParameters.
        Specifies optionally a new name for the restored database.

        :return: The new_database_name of this SqlRestoreParameters.
        :rtype: str
        """
        return self._new_database_name

    @new_database_name.setter
    def new_database_name(self, new_database_name):
        """
        Sets the new_database_name of this SqlRestoreParameters.
        Specifies optionally a new name for the restored database.

        :param new_database_name: The new_database_name of this SqlRestoreParameters.
        :type: str
        """

        self._new_database_name = new_database_name

    @property
    def new_instance_name(self):
        """
        Gets the new_instance_name of this SqlRestoreParameters.
        Specifies an instance name of the SQL Server that should be restored. SQL application has many instances. Each instance has a unique name. One of the instances that should be restored must be set in this field.

        :return: The new_instance_name of this SqlRestoreParameters.
        :rtype: str
        """
        return self._new_instance_name

    @new_instance_name.setter
    def new_instance_name(self, new_instance_name):
        """
        Sets the new_instance_name of this SqlRestoreParameters.
        Specifies an instance name of the SQL Server that should be restored. SQL application has many instances. Each instance has a unique name. One of the instances that should be restored must be set in this field.

        :param new_instance_name: The new_instance_name of this SqlRestoreParameters.
        :type: str
        """

        self._new_instance_name = new_instance_name

    @property
    def restore_time_secs(self):
        """
        Gets the restore_time_secs of this SqlRestoreParameters.
        Specifies the time in the past to which the SQL database needs to be restored. This allows for granular recovery of SQL databases. If this is not set, the SQL database will be restored from the full/incremental snapshot.

        :return: The restore_time_secs of this SqlRestoreParameters.
        :rtype: int
        """
        return self._restore_time_secs

    @restore_time_secs.setter
    def restore_time_secs(self, restore_time_secs):
        """
        Sets the restore_time_secs of this SqlRestoreParameters.
        Specifies the time in the past to which the SQL database needs to be restored. This allows for granular recovery of SQL databases. If this is not set, the SQL database will be restored from the full/incremental snapshot.

        :param restore_time_secs: The restore_time_secs of this SqlRestoreParameters.
        :type: int
        """

        self._restore_time_secs = restore_time_secs

    @property
    def target_data_files_directory(self):
        """
        Gets the target_data_files_directory of this SqlRestoreParameters.
        Specifies the directory where to put the database data files. Missing directory will be automatically created. This field must be set if restoring to a different target host.

        :return: The target_data_files_directory of this SqlRestoreParameters.
        :rtype: str
        """
        return self._target_data_files_directory

    @target_data_files_directory.setter
    def target_data_files_directory(self, target_data_files_directory):
        """
        Sets the target_data_files_directory of this SqlRestoreParameters.
        Specifies the directory where to put the database data files. Missing directory will be automatically created. This field must be set if restoring to a different target host.

        :param target_data_files_directory: The target_data_files_directory of this SqlRestoreParameters.
        :type: str
        """

        self._target_data_files_directory = target_data_files_directory

    @property
    def target_log_files_directory(self):
        """
        Gets the target_log_files_directory of this SqlRestoreParameters.
        Specifies the directory where to put the database log files. Missing directory will be automatically created. This field must be set if restoring to a different target host.

        :return: The target_log_files_directory of this SqlRestoreParameters.
        :rtype: str
        """
        return self._target_log_files_directory

    @target_log_files_directory.setter
    def target_log_files_directory(self, target_log_files_directory):
        """
        Sets the target_log_files_directory of this SqlRestoreParameters.
        Specifies the directory where to put the database log files. Missing directory will be automatically created. This field must be set if restoring to a different target host.

        :param target_log_files_directory: The target_log_files_directory of this SqlRestoreParameters.
        :type: str
        """

        self._target_log_files_directory = target_log_files_directory

    @property
    def target_secondary_data_files_directory_list(self):
        """
        Gets the target_secondary_data_files_directory_list of this SqlRestoreParameters.
        If this option is specified and the destination folders do not exist they will be automatically created.

        :return: The target_secondary_data_files_directory_list of this SqlRestoreParameters.
        :rtype: list[FilenamePatternToDirectory]
        """
        return self._target_secondary_data_files_directory_list

    @target_secondary_data_files_directory_list.setter
    def target_secondary_data_files_directory_list(self, target_secondary_data_files_directory_list):
        """
        Sets the target_secondary_data_files_directory_list of this SqlRestoreParameters.
        If this option is specified and the destination folders do not exist they will be automatically created.

        :param target_secondary_data_files_directory_list: The target_secondary_data_files_directory_list of this SqlRestoreParameters.
        :type: list[FilenamePatternToDirectory]
        """

        self._target_secondary_data_files_directory_list = target_secondary_data_files_directory_list

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
