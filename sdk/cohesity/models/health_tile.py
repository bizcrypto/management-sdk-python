# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class HealthTile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, capacity_bytes=None, cluster_cloud_usage_bytes=None, last_day_alerts=None, last_day_num_criticals=None, last_day_num_warnings=None, num_nodes=None, num_nodes_with_issues=None, percent_full=None, raw_used_bytes=None):
        """
        HealthTile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'capacity_bytes': 'int',
            'cluster_cloud_usage_bytes': 'int',
            'last_day_alerts': 'list[Alert]',
            'last_day_num_criticals': 'int',
            'last_day_num_warnings': 'int',
            'num_nodes': 'int',
            'num_nodes_with_issues': 'int',
            'percent_full': 'float',
            'raw_used_bytes': 'int'
        }

        self.attribute_map = {
            'capacity_bytes': 'capacityBytes',
            'cluster_cloud_usage_bytes': 'clusterCloudUsageBytes',
            'last_day_alerts': 'lastDayAlerts',
            'last_day_num_criticals': 'lastDayNumCriticals',
            'last_day_num_warnings': 'lastDayNumWarnings',
            'num_nodes': 'numNodes',
            'num_nodes_with_issues': 'numNodesWithIssues',
            'percent_full': 'percentFull',
            'raw_used_bytes': 'rawUsedBytes'
        }

        self._capacity_bytes = capacity_bytes
        self._cluster_cloud_usage_bytes = cluster_cloud_usage_bytes
        self._last_day_alerts = last_day_alerts
        self._last_day_num_criticals = last_day_num_criticals
        self._last_day_num_warnings = last_day_num_warnings
        self._num_nodes = num_nodes
        self._num_nodes_with_issues = num_nodes_with_issues
        self._percent_full = percent_full
        self._raw_used_bytes = raw_used_bytes

    @property
    def capacity_bytes(self):
        """
        Gets the capacity_bytes of this HealthTile.
        Raw Cluster Capacity in Bytes. This is not usable capacity and does not take replication factor into account.

        :return: The capacity_bytes of this HealthTile.
        :rtype: int
        """
        return self._capacity_bytes

    @capacity_bytes.setter
    def capacity_bytes(self, capacity_bytes):
        """
        Sets the capacity_bytes of this HealthTile.
        Raw Cluster Capacity in Bytes. This is not usable capacity and does not take replication factor into account.

        :param capacity_bytes: The capacity_bytes of this HealthTile.
        :type: int
        """

        self._capacity_bytes = capacity_bytes

    @property
    def cluster_cloud_usage_bytes(self):
        """
        Gets the cluster_cloud_usage_bytes of this HealthTile.
        Usage in Bytes on the cloud.

        :return: The cluster_cloud_usage_bytes of this HealthTile.
        :rtype: int
        """
        return self._cluster_cloud_usage_bytes

    @cluster_cloud_usage_bytes.setter
    def cluster_cloud_usage_bytes(self, cluster_cloud_usage_bytes):
        """
        Sets the cluster_cloud_usage_bytes of this HealthTile.
        Usage in Bytes on the cloud.

        :param cluster_cloud_usage_bytes: The cluster_cloud_usage_bytes of this HealthTile.
        :type: int
        """

        self._cluster_cloud_usage_bytes = cluster_cloud_usage_bytes

    @property
    def last_day_alerts(self):
        """
        Gets the last_day_alerts of this HealthTile.


        :return: The last_day_alerts of this HealthTile.
        :rtype: list[Alert]
        """
        return self._last_day_alerts

    @last_day_alerts.setter
    def last_day_alerts(self, last_day_alerts):
        """
        Sets the last_day_alerts of this HealthTile.


        :param last_day_alerts: The last_day_alerts of this HealthTile.
        :type: list[Alert]
        """

        self._last_day_alerts = last_day_alerts

    @property
    def last_day_num_criticals(self):
        """
        Gets the last_day_num_criticals of this HealthTile.
        Number of Critical Alerts.

        :return: The last_day_num_criticals of this HealthTile.
        :rtype: int
        """
        return self._last_day_num_criticals

    @last_day_num_criticals.setter
    def last_day_num_criticals(self, last_day_num_criticals):
        """
        Sets the last_day_num_criticals of this HealthTile.
        Number of Critical Alerts.

        :param last_day_num_criticals: The last_day_num_criticals of this HealthTile.
        :type: int
        """

        self._last_day_num_criticals = last_day_num_criticals

    @property
    def last_day_num_warnings(self):
        """
        Gets the last_day_num_warnings of this HealthTile.
        Number of Warning Alerts.

        :return: The last_day_num_warnings of this HealthTile.
        :rtype: int
        """
        return self._last_day_num_warnings

    @last_day_num_warnings.setter
    def last_day_num_warnings(self, last_day_num_warnings):
        """
        Sets the last_day_num_warnings of this HealthTile.
        Number of Warning Alerts.

        :param last_day_num_warnings: The last_day_num_warnings of this HealthTile.
        :type: int
        """

        self._last_day_num_warnings = last_day_num_warnings

    @property
    def num_nodes(self):
        """
        Gets the num_nodes of this HealthTile.
        Number of nodes in the cluster.

        :return: The num_nodes of this HealthTile.
        :rtype: int
        """
        return self._num_nodes

    @num_nodes.setter
    def num_nodes(self, num_nodes):
        """
        Sets the num_nodes of this HealthTile.
        Number of nodes in the cluster.

        :param num_nodes: The num_nodes of this HealthTile.
        :type: int
        """

        self._num_nodes = num_nodes

    @property
    def num_nodes_with_issues(self):
        """
        Gets the num_nodes_with_issues of this HealthTile.
        Number of nodes in the cluster that are unhealthy.

        :return: The num_nodes_with_issues of this HealthTile.
        :rtype: int
        """
        return self._num_nodes_with_issues

    @num_nodes_with_issues.setter
    def num_nodes_with_issues(self, num_nodes_with_issues):
        """
        Sets the num_nodes_with_issues of this HealthTile.
        Number of nodes in the cluster that are unhealthy.

        :param num_nodes_with_issues: The num_nodes_with_issues of this HealthTile.
        :type: int
        """

        self._num_nodes_with_issues = num_nodes_with_issues

    @property
    def percent_full(self):
        """
        Gets the percent_full of this HealthTile.
        Percent the cluster is full.

        :return: The percent_full of this HealthTile.
        :rtype: float
        """
        return self._percent_full

    @percent_full.setter
    def percent_full(self, percent_full):
        """
        Sets the percent_full of this HealthTile.
        Percent the cluster is full.

        :param percent_full: The percent_full of this HealthTile.
        :type: float
        """

        self._percent_full = percent_full

    @property
    def raw_used_bytes(self):
        """
        Gets the raw_used_bytes of this HealthTile.
        Raw Bytes used in the cluster.

        :return: The raw_used_bytes of this HealthTile.
        :rtype: int
        """
        return self._raw_used_bytes

    @raw_used_bytes.setter
    def raw_used_bytes(self, raw_used_bytes):
        """
        Sets the raw_used_bytes of this HealthTile.
        Raw Bytes used in the cluster.

        :param raw_used_bytes: The raw_used_bytes of this HealthTile.
        :type: int
        """

        self._raw_used_bytes = raw_used_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
