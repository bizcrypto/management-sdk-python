# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RemoteRestoreIndexingStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, end_time_usecs=None, error=None, indexing_task_end_time_usecs=None, indexing_task_start_time_usecs=None, indexing_task_status=None, indexing_task_uid=None, latest_expiry_time_usecs=None, progress_monitor_task=None, start_time_usecs=None):
        """
        RemoteRestoreIndexingStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'end_time_usecs': 'int',
            'error': 'str',
            'indexing_task_end_time_usecs': 'int',
            'indexing_task_start_time_usecs': 'int',
            'indexing_task_status': 'str',
            'indexing_task_uid': 'RemoteRestoreIndexingStatusIndexingTaskUid',
            'latest_expiry_time_usecs': 'int',
            'progress_monitor_task': 'str',
            'start_time_usecs': 'int'
        }

        self.attribute_map = {
            'end_time_usecs': 'endTimeUsecs',
            'error': 'error',
            'indexing_task_end_time_usecs': 'indexingTaskEndTimeUsecs',
            'indexing_task_start_time_usecs': 'indexingTaskStartTimeUsecs',
            'indexing_task_status': 'indexingTaskStatus',
            'indexing_task_uid': 'indexingTaskUid',
            'latest_expiry_time_usecs': 'latestExpiryTimeUsecs',
            'progress_monitor_task': 'progressMonitorTask',
            'start_time_usecs': 'startTimeUsecs'
        }

        self._end_time_usecs = end_time_usecs
        self._error = error
        self._indexing_task_end_time_usecs = indexing_task_end_time_usecs
        self._indexing_task_start_time_usecs = indexing_task_start_time_usecs
        self._indexing_task_status = indexing_task_status
        self._indexing_task_uid = indexing_task_uid
        self._latest_expiry_time_usecs = latest_expiry_time_usecs
        self._progress_monitor_task = progress_monitor_task
        self._start_time_usecs = start_time_usecs

    @property
    def end_time_usecs(self):
        """
        Gets the end_time_usecs of this RemoteRestoreIndexingStatus.
        Specifies the end time of the time range that is being indexed. The indexing task is creating an index of the Job Runs that occurred between the startTimeUsecs and this endTimeUsecs. This field is recorded as a Unix epoch Timestamp (in microseconds).

        :return: The end_time_usecs of this RemoteRestoreIndexingStatus.
        :rtype: int
        """
        return self._end_time_usecs

    @end_time_usecs.setter
    def end_time_usecs(self, end_time_usecs):
        """
        Sets the end_time_usecs of this RemoteRestoreIndexingStatus.
        Specifies the end time of the time range that is being indexed. The indexing task is creating an index of the Job Runs that occurred between the startTimeUsecs and this endTimeUsecs. This field is recorded as a Unix epoch Timestamp (in microseconds).

        :param end_time_usecs: The end_time_usecs of this RemoteRestoreIndexingStatus.
        :type: int
        """

        self._end_time_usecs = end_time_usecs

    @property
    def error(self):
        """
        Gets the error of this RemoteRestoreIndexingStatus.
        Specifies the error message if the indexing Job/task fails.

        :return: The error of this RemoteRestoreIndexingStatus.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this RemoteRestoreIndexingStatus.
        Specifies the error message if the indexing Job/task fails.

        :param error: The error of this RemoteRestoreIndexingStatus.
        :type: str
        """

        self._error = error

    @property
    def indexing_task_end_time_usecs(self):
        """
        Gets the indexing_task_end_time_usecs of this RemoteRestoreIndexingStatus.
        Specifies when the indexing task completed. This time is recorded as a Unix epoch Timestamp (in microseconds). This field is not set if the indexing task is still in progress.

        :return: The indexing_task_end_time_usecs of this RemoteRestoreIndexingStatus.
        :rtype: int
        """
        return self._indexing_task_end_time_usecs

    @indexing_task_end_time_usecs.setter
    def indexing_task_end_time_usecs(self, indexing_task_end_time_usecs):
        """
        Sets the indexing_task_end_time_usecs of this RemoteRestoreIndexingStatus.
        Specifies when the indexing task completed. This time is recorded as a Unix epoch Timestamp (in microseconds). This field is not set if the indexing task is still in progress.

        :param indexing_task_end_time_usecs: The indexing_task_end_time_usecs of this RemoteRestoreIndexingStatus.
        :type: int
        """

        self._indexing_task_end_time_usecs = indexing_task_end_time_usecs

    @property
    def indexing_task_start_time_usecs(self):
        """
        Gets the indexing_task_start_time_usecs of this RemoteRestoreIndexingStatus.
        Specifies when the indexing task started. This time is recorded as a Unix epoch Timestamp (in microseconds).

        :return: The indexing_task_start_time_usecs of this RemoteRestoreIndexingStatus.
        :rtype: int
        """
        return self._indexing_task_start_time_usecs

    @indexing_task_start_time_usecs.setter
    def indexing_task_start_time_usecs(self, indexing_task_start_time_usecs):
        """
        Sets the indexing_task_start_time_usecs of this RemoteRestoreIndexingStatus.
        Specifies when the indexing task started. This time is recorded as a Unix epoch Timestamp (in microseconds).

        :param indexing_task_start_time_usecs: The indexing_task_start_time_usecs of this RemoteRestoreIndexingStatus.
        :type: int
        """

        self._indexing_task_start_time_usecs = indexing_task_start_time_usecs

    @property
    def indexing_task_status(self):
        """
        Gets the indexing_task_status of this RemoteRestoreIndexingStatus.
        Specifies the status of the indexing Job/task. 'kJobRunning' indicates that the Job/task is currently running. 'kJobFinished' indicates that the Job/task completed and finished. 'kJobFailed' indicates that the Job/task failed and did not complete. 'kJobCanceled' indicates that the Job/task was canceled. 'kJobPaused' indicates the Job/task is paused.

        :return: The indexing_task_status of this RemoteRestoreIndexingStatus.
        :rtype: str
        """
        return self._indexing_task_status

    @indexing_task_status.setter
    def indexing_task_status(self, indexing_task_status):
        """
        Sets the indexing_task_status of this RemoteRestoreIndexingStatus.
        Specifies the status of the indexing Job/task. 'kJobRunning' indicates that the Job/task is currently running. 'kJobFinished' indicates that the Job/task completed and finished. 'kJobFailed' indicates that the Job/task failed and did not complete. 'kJobCanceled' indicates that the Job/task was canceled. 'kJobPaused' indicates the Job/task is paused.

        :param indexing_task_status: The indexing_task_status of this RemoteRestoreIndexingStatus.
        :type: str
        """
        allowed_values = ["kJobRunning", "kJobFinished", "kJobFailed", "kJobCanceled", "kJobPaused"]
        if indexing_task_status not in allowed_values:
            raise ValueError(
                "Invalid value for `indexing_task_status` ({0}), must be one of {1}"
                .format(indexing_task_status, allowed_values)
            )

        self._indexing_task_status = indexing_task_status

    @property
    def indexing_task_uid(self):
        """
        Gets the indexing_task_uid of this RemoteRestoreIndexingStatus.


        :return: The indexing_task_uid of this RemoteRestoreIndexingStatus.
        :rtype: RemoteRestoreIndexingStatusIndexingTaskUid
        """
        return self._indexing_task_uid

    @indexing_task_uid.setter
    def indexing_task_uid(self, indexing_task_uid):
        """
        Sets the indexing_task_uid of this RemoteRestoreIndexingStatus.


        :param indexing_task_uid: The indexing_task_uid of this RemoteRestoreIndexingStatus.
        :type: RemoteRestoreIndexingStatusIndexingTaskUid
        """

        self._indexing_task_uid = indexing_task_uid

    @property
    def latest_expiry_time_usecs(self):
        """
        Gets the latest_expiry_time_usecs of this RemoteRestoreIndexingStatus.
        For all the Snapshots retrieved by this Job, specifies the latest time when a Snapshot expires.

        :return: The latest_expiry_time_usecs of this RemoteRestoreIndexingStatus.
        :rtype: int
        """
        return self._latest_expiry_time_usecs

    @latest_expiry_time_usecs.setter
    def latest_expiry_time_usecs(self, latest_expiry_time_usecs):
        """
        Sets the latest_expiry_time_usecs of this RemoteRestoreIndexingStatus.
        For all the Snapshots retrieved by this Job, specifies the latest time when a Snapshot expires.

        :param latest_expiry_time_usecs: The latest_expiry_time_usecs of this RemoteRestoreIndexingStatus.
        :type: int
        """

        self._latest_expiry_time_usecs = latest_expiry_time_usecs

    @property
    def progress_monitor_task(self):
        """
        Gets the progress_monitor_task of this RemoteRestoreIndexingStatus.
        Specifies the path to progress monitor task to track the progress of building the index.

        :return: The progress_monitor_task of this RemoteRestoreIndexingStatus.
        :rtype: str
        """
        return self._progress_monitor_task

    @progress_monitor_task.setter
    def progress_monitor_task(self, progress_monitor_task):
        """
        Sets the progress_monitor_task of this RemoteRestoreIndexingStatus.
        Specifies the path to progress monitor task to track the progress of building the index.

        :param progress_monitor_task: The progress_monitor_task of this RemoteRestoreIndexingStatus.
        :type: str
        """

        self._progress_monitor_task = progress_monitor_task

    @property
    def start_time_usecs(self):
        """
        Gets the start_time_usecs of this RemoteRestoreIndexingStatus.
        Specifies the start time of the time range that is being indexed. The indexing task is creating an index of the Job Runs that occurred between this startTimeUsecs and the endTimeUsecs. This field is recorded as a Unix epoch Timestamp (in microseconds).

        :return: The start_time_usecs of this RemoteRestoreIndexingStatus.
        :rtype: int
        """
        return self._start_time_usecs

    @start_time_usecs.setter
    def start_time_usecs(self, start_time_usecs):
        """
        Sets the start_time_usecs of this RemoteRestoreIndexingStatus.
        Specifies the start time of the time range that is being indexed. The indexing task is creating an index of the Job Runs that occurred between this startTimeUsecs and the endTimeUsecs. This field is recorded as a Unix epoch Timestamp (in microseconds).

        :param start_time_usecs: The start_time_usecs of this RemoteRestoreIndexingStatus.
        :type: int
        """

        self._start_time_usecs = start_time_usecs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
