# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DeviceTree(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, combine_method=None, device_length=None, device_nodes=None, stripe_size=None):
        """
        DeviceTree - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'combine_method': 'str',
            'device_length': 'int',
            'device_nodes': 'list[DeviceNode]',
            'stripe_size': 'int'
        }

        self.attribute_map = {
            'combine_method': 'combineMethod',
            'device_length': 'deviceLength',
            'device_nodes': 'deviceNodes',
            'stripe_size': 'stripeSize'
        }

        self._combine_method = combine_method
        self._device_length = device_length
        self._device_nodes = device_nodes
        self._stripe_size = stripe_size

    @property
    def combine_method(self):
        """
        Gets the combine_method of this DeviceTree.
        Specifies how to combine the children of this node. The combining strategy for child devices. Some of these strategies imply constraint on the number of child devices. e.g. RAID5 will have 5 children. 'LINEAR' indicates children are juxtaposed to form this device. 'STRIPE' indicates children are striped. 'MIRROR' indicates children are mirrored. 'RAID5' 'RAID6' 'ZERO' 'THIN' 'THINPOOL' 'SNAPSHOT' 'CACHE' 'CACHEPOOL'

        :return: The combine_method of this DeviceTree.
        :rtype: str
        """
        return self._combine_method

    @combine_method.setter
    def combine_method(self, combine_method):
        """
        Sets the combine_method of this DeviceTree.
        Specifies how to combine the children of this node. The combining strategy for child devices. Some of these strategies imply constraint on the number of child devices. e.g. RAID5 will have 5 children. 'LINEAR' indicates children are juxtaposed to form this device. 'STRIPE' indicates children are striped. 'MIRROR' indicates children are mirrored. 'RAID5' 'RAID6' 'ZERO' 'THIN' 'THINPOOL' 'SNAPSHOT' 'CACHE' 'CACHEPOOL'

        :param combine_method: The combine_method of this DeviceTree.
        :type: str
        """
        allowed_values = ["LINEAR", "STRIPE", "MIRROR", "RAID5", "RAID6", "ZERO", "THIN", "THINPOOL", "SNAPSHOT", "CACHE", "CACHEPOOL"]
        if combine_method not in allowed_values:
            raise ValueError(
                "Invalid value for `combine_method` ({0}), must be one of {1}"
                .format(combine_method, allowed_values)
            )

        self._combine_method = combine_method

    @property
    def device_length(self):
        """
        Gets the device_length of this DeviceTree.
        Specifies the length of this device. This number should match the length that is calculated from the children and combining method.

        :return: The device_length of this DeviceTree.
        :rtype: int
        """
        return self._device_length

    @device_length.setter
    def device_length(self, device_length):
        """
        Sets the device_length of this DeviceTree.
        Specifies the length of this device. This number should match the length that is calculated from the children and combining method.

        :param device_length: The device_length of this DeviceTree.
        :type: int
        """

        self._device_length = device_length

    @property
    def device_nodes(self):
        """
        Gets the device_nodes of this DeviceTree.


        :return: The device_nodes of this DeviceTree.
        :rtype: list[DeviceNode]
        """
        return self._device_nodes

    @device_nodes.setter
    def device_nodes(self, device_nodes):
        """
        Sets the device_nodes of this DeviceTree.


        :param device_nodes: The device_nodes of this DeviceTree.
        :type: list[DeviceNode]
        """

        self._device_nodes = device_nodes

    @property
    def stripe_size(self):
        """
        Gets the stripe_size of this DeviceTree.
        Specifies the size of the striped data if the data is striped.

        :return: The stripe_size of this DeviceTree.
        :rtype: int
        """
        return self._stripe_size

    @stripe_size.setter
    def stripe_size(self, stripe_size):
        """
        Sets the stripe_size of this DeviceTree.
        Specifies the size of the striped data if the data is striped.

        :param stripe_size: The stripe_size of this DeviceTree.
        :type: int
        """

        self._stripe_size = stripe_size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
