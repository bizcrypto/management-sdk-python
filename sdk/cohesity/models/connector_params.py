# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ConnectorParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, endpoint=None, environment=None, id=None, version=None):
        """
        ConnectorParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'endpoint': 'str',
            'environment': 'str',
            'id': 'int',
            'version': 'int'
        }

        self.attribute_map = {
            'endpoint': 'endpoint',
            'environment': 'environment',
            'id': 'id',
            'version': 'version'
        }

        self._endpoint = endpoint
        self._environment = environment
        self._id = id
        self._version = version

    @property
    def endpoint(self):
        """
        Gets the endpoint of this ConnectorParams.
        Specify an IP address or URL of the environment. (such as the IP address of the vCenter Server for a VMware environment).

        :return: The endpoint of this ConnectorParams.
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """
        Sets the endpoint of this ConnectorParams.
        Specify an IP address or URL of the environment. (such as the IP address of the vCenter Server for a VMware environment).

        :param endpoint: The endpoint of this ConnectorParams.
        :type: str
        """

        self._endpoint = endpoint

    @property
    def environment(self):
        """
        Gets the environment of this ConnectorParams.
        Specifies the environment like VMware, SQL, where the Protection Source exists. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :return: The environment of this ConnectorParams.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this ConnectorParams.
        Specifies the environment like VMware, SQL, where the Protection Source exists. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :param environment: The environment of this ConnectorParams.
        :type: str
        """
        allowed_values = ["kVMware", "kSQL", "kView", "kPuppeteer", "kPhysical", "kPure", "kNetapp", "kGenericNas", "kHyperV", "kAcropolis", "kAzure"]
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def id(self):
        """
        Gets the id of this ConnectorParams.
        Specifies a Unique id that is generated when the Source is registered. This is a convenience field that is used to maintain an index to different connection params.

        :return: The id of this ConnectorParams.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ConnectorParams.
        Specifies a Unique id that is generated when the Source is registered. This is a convenience field that is used to maintain an index to different connection params.

        :param id: The id of this ConnectorParams.
        :type: int
        """

        self._id = id

    @property
    def version(self):
        """
        Gets the version of this ConnectorParams.
        Version is updated each time the connector parameters are updated. This is used to discard older connector parameters.

        :return: The version of this ConnectorParams.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ConnectorParams.
        Version is updated each time the connector parameters are updated. This is used to discard older connector parameters.

        :param version: The version of this ConnectorParams.
        :type: int
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
