# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ViewProtectionInfoView(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, access_sids=None, aliases=None, all_smb_mount_paths=None, basic_mount_path=None, case_insensitive_names_enabled=None, create_time_msecs=None, data_lock_expiry_usecs=None, description=None, enable_filer_audit_logging=None, enable_mixed_mode_permissions=None, enable_smb_access_based_enumeration=None, enable_smb_view_discovery=None, file_extension_filter=None, logical_quota=None, logical_usage_bytes=None, name=None, nfs_mount_path=None, protocol_access=None, qos=None, smb_mount_path=None, smb_permissions_info=None, storage_policy_override=None, subnet_whitelist=None, view_box_id=None, view_box_name=None, view_id=None, view_protection=None):
        """
        ViewProtectionInfoView - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access_sids': 'list[str]',
            'aliases': 'list[ViewAliasInfo]',
            'all_smb_mount_paths': 'list[str]',
            'basic_mount_path': 'str',
            'case_insensitive_names_enabled': 'bool',
            'create_time_msecs': 'int',
            'data_lock_expiry_usecs': 'int',
            'description': 'str',
            'enable_filer_audit_logging': 'bool',
            'enable_mixed_mode_permissions': 'bool',
            'enable_smb_access_based_enumeration': 'bool',
            'enable_smb_view_discovery': 'bool',
            'file_extension_filter': 'FileExtensionFilter',
            'logical_quota': 'CloneTaskRequestCloneViewParametersLogicalQuota',
            'logical_usage_bytes': 'int',
            'name': 'str',
            'nfs_mount_path': 'str',
            'protocol_access': 'str',
            'qos': 'QoS',
            'smb_mount_path': 'str',
            'smb_permissions_info': 'SmbPermissionsInfo',
            'storage_policy_override': 'StoragePolicyOverride',
            'subnet_whitelist': 'list[Subnet]',
            'view_box_id': 'int',
            'view_box_name': 'str',
            'view_id': 'int',
            'view_protection': 'ViewProtection'
        }

        self.attribute_map = {
            'access_sids': 'accessSids',
            'aliases': 'aliases',
            'all_smb_mount_paths': 'allSmbMountPaths',
            'basic_mount_path': 'basicMountPath',
            'case_insensitive_names_enabled': 'caseInsensitiveNamesEnabled',
            'create_time_msecs': 'createTimeMsecs',
            'data_lock_expiry_usecs': 'dataLockExpiryUsecs',
            'description': 'description',
            'enable_filer_audit_logging': 'enableFilerAuditLogging',
            'enable_mixed_mode_permissions': 'enableMixedModePermissions',
            'enable_smb_access_based_enumeration': 'enableSmbAccessBasedEnumeration',
            'enable_smb_view_discovery': 'enableSmbViewDiscovery',
            'file_extension_filter': 'fileExtensionFilter',
            'logical_quota': 'logicalQuota',
            'logical_usage_bytes': 'logicalUsageBytes',
            'name': 'name',
            'nfs_mount_path': 'nfsMountPath',
            'protocol_access': 'protocolAccess',
            'qos': 'qos',
            'smb_mount_path': 'smbMountPath',
            'smb_permissions_info': 'smbPermissionsInfo',
            'storage_policy_override': 'storagePolicyOverride',
            'subnet_whitelist': 'subnetWhitelist',
            'view_box_id': 'viewBoxId',
            'view_box_name': 'viewBoxName',
            'view_id': 'viewId',
            'view_protection': 'viewProtection'
        }

        self._access_sids = access_sids
        self._aliases = aliases
        self._all_smb_mount_paths = all_smb_mount_paths
        self._basic_mount_path = basic_mount_path
        self._case_insensitive_names_enabled = case_insensitive_names_enabled
        self._create_time_msecs = create_time_msecs
        self._data_lock_expiry_usecs = data_lock_expiry_usecs
        self._description = description
        self._enable_filer_audit_logging = enable_filer_audit_logging
        self._enable_mixed_mode_permissions = enable_mixed_mode_permissions
        self._enable_smb_access_based_enumeration = enable_smb_access_based_enumeration
        self._enable_smb_view_discovery = enable_smb_view_discovery
        self._file_extension_filter = file_extension_filter
        self._logical_quota = logical_quota
        self._logical_usage_bytes = logical_usage_bytes
        self._name = name
        self._nfs_mount_path = nfs_mount_path
        self._protocol_access = protocol_access
        self._qos = qos
        self._smb_mount_path = smb_mount_path
        self._smb_permissions_info = smb_permissions_info
        self._storage_policy_override = storage_policy_override
        self._subnet_whitelist = subnet_whitelist
        self._view_box_id = view_box_id
        self._view_box_name = view_box_name
        self._view_id = view_id
        self._view_protection = view_protection

    @property
    def access_sids(self):
        """
        Gets the access_sids of this ViewProtectionInfoView.
        Specifies the list of security identifiers (SIDs) for the restricted Principals who have access to this View.

        :return: The access_sids of this ViewProtectionInfoView.
        :rtype: list[str]
        """
        return self._access_sids

    @access_sids.setter
    def access_sids(self, access_sids):
        """
        Sets the access_sids of this ViewProtectionInfoView.
        Specifies the list of security identifiers (SIDs) for the restricted Principals who have access to this View.

        :param access_sids: The access_sids of this ViewProtectionInfoView.
        :type: list[str]
        """

        self._access_sids = access_sids

    @property
    def aliases(self):
        """
        Gets the aliases of this ViewProtectionInfoView.
        Aliases created for the view. A view alias allows a directory path inside a view to be mounted using the alias name.

        :return: The aliases of this ViewProtectionInfoView.
        :rtype: list[ViewAliasInfo]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """
        Sets the aliases of this ViewProtectionInfoView.
        Aliases created for the view. A view alias allows a directory path inside a view to be mounted using the alias name.

        :param aliases: The aliases of this ViewProtectionInfoView.
        :type: list[ViewAliasInfo]
        """

        self._aliases = aliases

    @property
    def all_smb_mount_paths(self):
        """
        Gets the all_smb_mount_paths of this ViewProtectionInfoView.
        Specifies the possible paths that can be used to mount this View as a SMB share. If Active Directory has multiple account names; each machine account has its own path.

        :return: The all_smb_mount_paths of this ViewProtectionInfoView.
        :rtype: list[str]
        """
        return self._all_smb_mount_paths

    @all_smb_mount_paths.setter
    def all_smb_mount_paths(self, all_smb_mount_paths):
        """
        Sets the all_smb_mount_paths of this ViewProtectionInfoView.
        Specifies the possible paths that can be used to mount this View as a SMB share. If Active Directory has multiple account names; each machine account has its own path.

        :param all_smb_mount_paths: The all_smb_mount_paths of this ViewProtectionInfoView.
        :type: list[str]
        """

        self._all_smb_mount_paths = all_smb_mount_paths

    @property
    def basic_mount_path(self):
        """
        Gets the basic_mount_path of this ViewProtectionInfoView.
        Specifies the NFS mount path of the View (without the hostname information). This path is used to support NFS mounting of the paths specified in the nfsExportPathList on Windows systems.

        :return: The basic_mount_path of this ViewProtectionInfoView.
        :rtype: str
        """
        return self._basic_mount_path

    @basic_mount_path.setter
    def basic_mount_path(self, basic_mount_path):
        """
        Sets the basic_mount_path of this ViewProtectionInfoView.
        Specifies the NFS mount path of the View (without the hostname information). This path is used to support NFS mounting of the paths specified in the nfsExportPathList on Windows systems.

        :param basic_mount_path: The basic_mount_path of this ViewProtectionInfoView.
        :type: str
        """

        self._basic_mount_path = basic_mount_path

    @property
    def case_insensitive_names_enabled(self):
        """
        Gets the case_insensitive_names_enabled of this ViewProtectionInfoView.
        Specifies whether to support case insensitive file/folder names. This parameter can only be set during create and cannot be changed.

        :return: The case_insensitive_names_enabled of this ViewProtectionInfoView.
        :rtype: bool
        """
        return self._case_insensitive_names_enabled

    @case_insensitive_names_enabled.setter
    def case_insensitive_names_enabled(self, case_insensitive_names_enabled):
        """
        Sets the case_insensitive_names_enabled of this ViewProtectionInfoView.
        Specifies whether to support case insensitive file/folder names. This parameter can only be set during create and cannot be changed.

        :param case_insensitive_names_enabled: The case_insensitive_names_enabled of this ViewProtectionInfoView.
        :type: bool
        """

        self._case_insensitive_names_enabled = case_insensitive_names_enabled

    @property
    def create_time_msecs(self):
        """
        Gets the create_time_msecs of this ViewProtectionInfoView.
        Specifies the time that the View was created in milliseconds.

        :return: The create_time_msecs of this ViewProtectionInfoView.
        :rtype: int
        """
        return self._create_time_msecs

    @create_time_msecs.setter
    def create_time_msecs(self, create_time_msecs):
        """
        Sets the create_time_msecs of this ViewProtectionInfoView.
        Specifies the time that the View was created in milliseconds.

        :param create_time_msecs: The create_time_msecs of this ViewProtectionInfoView.
        :type: int
        """

        self._create_time_msecs = create_time_msecs

    @property
    def data_lock_expiry_usecs(self):
        """
        Gets the data_lock_expiry_usecs of this ViewProtectionInfoView.
        DataLock (Write Once Read Many) lock expiry epoch time in microseconds. If a view is marked as a DataLock view, only a Data Security Officer (a user having Data Security Privilege) can delete the view until the lock expiry time.

        :return: The data_lock_expiry_usecs of this ViewProtectionInfoView.
        :rtype: int
        """
        return self._data_lock_expiry_usecs

    @data_lock_expiry_usecs.setter
    def data_lock_expiry_usecs(self, data_lock_expiry_usecs):
        """
        Sets the data_lock_expiry_usecs of this ViewProtectionInfoView.
        DataLock (Write Once Read Many) lock expiry epoch time in microseconds. If a view is marked as a DataLock view, only a Data Security Officer (a user having Data Security Privilege) can delete the view until the lock expiry time.

        :param data_lock_expiry_usecs: The data_lock_expiry_usecs of this ViewProtectionInfoView.
        :type: int
        """

        self._data_lock_expiry_usecs = data_lock_expiry_usecs

    @property
    def description(self):
        """
        Gets the description of this ViewProtectionInfoView.
        Specifies an optional text description about the View.

        :return: The description of this ViewProtectionInfoView.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ViewProtectionInfoView.
        Specifies an optional text description about the View.

        :param description: The description of this ViewProtectionInfoView.
        :type: str
        """

        self._description = description

    @property
    def enable_filer_audit_logging(self):
        """
        Gets the enable_filer_audit_logging of this ViewProtectionInfoView.
        Specifies if Filer Audit Logging is enabled for this view.

        :return: The enable_filer_audit_logging of this ViewProtectionInfoView.
        :rtype: bool
        """
        return self._enable_filer_audit_logging

    @enable_filer_audit_logging.setter
    def enable_filer_audit_logging(self, enable_filer_audit_logging):
        """
        Sets the enable_filer_audit_logging of this ViewProtectionInfoView.
        Specifies if Filer Audit Logging is enabled for this view.

        :param enable_filer_audit_logging: The enable_filer_audit_logging of this ViewProtectionInfoView.
        :type: bool
        """

        self._enable_filer_audit_logging = enable_filer_audit_logging

    @property
    def enable_mixed_mode_permissions(self):
        """
        Gets the enable_mixed_mode_permissions of this ViewProtectionInfoView.
        If set, mixed mode (NFS and SMB) access is enabled for this view.

        :return: The enable_mixed_mode_permissions of this ViewProtectionInfoView.
        :rtype: bool
        """
        return self._enable_mixed_mode_permissions

    @enable_mixed_mode_permissions.setter
    def enable_mixed_mode_permissions(self, enable_mixed_mode_permissions):
        """
        Sets the enable_mixed_mode_permissions of this ViewProtectionInfoView.
        If set, mixed mode (NFS and SMB) access is enabled for this view.

        :param enable_mixed_mode_permissions: The enable_mixed_mode_permissions of this ViewProtectionInfoView.
        :type: bool
        """

        self._enable_mixed_mode_permissions = enable_mixed_mode_permissions

    @property
    def enable_smb_access_based_enumeration(self):
        """
        Gets the enable_smb_access_based_enumeration of this ViewProtectionInfoView.
        Specifies if access-based enumeration should be enabled. If 'true', only files and folders that the user has permissions to access are visible on the SMB share for that user.

        :return: The enable_smb_access_based_enumeration of this ViewProtectionInfoView.
        :rtype: bool
        """
        return self._enable_smb_access_based_enumeration

    @enable_smb_access_based_enumeration.setter
    def enable_smb_access_based_enumeration(self, enable_smb_access_based_enumeration):
        """
        Sets the enable_smb_access_based_enumeration of this ViewProtectionInfoView.
        Specifies if access-based enumeration should be enabled. If 'true', only files and folders that the user has permissions to access are visible on the SMB share for that user.

        :param enable_smb_access_based_enumeration: The enable_smb_access_based_enumeration of this ViewProtectionInfoView.
        :type: bool
        """

        self._enable_smb_access_based_enumeration = enable_smb_access_based_enumeration

    @property
    def enable_smb_view_discovery(self):
        """
        Gets the enable_smb_view_discovery of this ViewProtectionInfoView.
        If set, it enables discovery of view for SMB.

        :return: The enable_smb_view_discovery of this ViewProtectionInfoView.
        :rtype: bool
        """
        return self._enable_smb_view_discovery

    @enable_smb_view_discovery.setter
    def enable_smb_view_discovery(self, enable_smb_view_discovery):
        """
        Sets the enable_smb_view_discovery of this ViewProtectionInfoView.
        If set, it enables discovery of view for SMB.

        :param enable_smb_view_discovery: The enable_smb_view_discovery of this ViewProtectionInfoView.
        :type: bool
        """

        self._enable_smb_view_discovery = enable_smb_view_discovery

    @property
    def file_extension_filter(self):
        """
        Gets the file_extension_filter of this ViewProtectionInfoView.
        Optional filtering criteria that should be satisfied by all the files created in this view. It does not affect existing files.

        :return: The file_extension_filter of this ViewProtectionInfoView.
        :rtype: FileExtensionFilter
        """
        return self._file_extension_filter

    @file_extension_filter.setter
    def file_extension_filter(self, file_extension_filter):
        """
        Sets the file_extension_filter of this ViewProtectionInfoView.
        Optional filtering criteria that should be satisfied by all the files created in this view. It does not affect existing files.

        :param file_extension_filter: The file_extension_filter of this ViewProtectionInfoView.
        :type: FileExtensionFilter
        """

        self._file_extension_filter = file_extension_filter

    @property
    def logical_quota(self):
        """
        Gets the logical_quota of this ViewProtectionInfoView.


        :return: The logical_quota of this ViewProtectionInfoView.
        :rtype: CloneTaskRequestCloneViewParametersLogicalQuota
        """
        return self._logical_quota

    @logical_quota.setter
    def logical_quota(self, logical_quota):
        """
        Sets the logical_quota of this ViewProtectionInfoView.


        :param logical_quota: The logical_quota of this ViewProtectionInfoView.
        :type: CloneTaskRequestCloneViewParametersLogicalQuota
        """

        self._logical_quota = logical_quota

    @property
    def logical_usage_bytes(self):
        """
        Gets the logical_usage_bytes of this ViewProtectionInfoView.
        LogicalUsageBytes is the logical usage in bytes for the view.

        :return: The logical_usage_bytes of this ViewProtectionInfoView.
        :rtype: int
        """
        return self._logical_usage_bytes

    @logical_usage_bytes.setter
    def logical_usage_bytes(self, logical_usage_bytes):
        """
        Sets the logical_usage_bytes of this ViewProtectionInfoView.
        LogicalUsageBytes is the logical usage in bytes for the view.

        :param logical_usage_bytes: The logical_usage_bytes of this ViewProtectionInfoView.
        :type: int
        """

        self._logical_usage_bytes = logical_usage_bytes

    @property
    def name(self):
        """
        Gets the name of this ViewProtectionInfoView.
        Specifies the name of the View.

        :return: The name of this ViewProtectionInfoView.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ViewProtectionInfoView.
        Specifies the name of the View.

        :param name: The name of this ViewProtectionInfoView.
        :type: str
        """

        self._name = name

    @property
    def nfs_mount_path(self):
        """
        Gets the nfs_mount_path of this ViewProtectionInfoView.
        Specifies the path for mounting this View as an NFS share.

        :return: The nfs_mount_path of this ViewProtectionInfoView.
        :rtype: str
        """
        return self._nfs_mount_path

    @nfs_mount_path.setter
    def nfs_mount_path(self, nfs_mount_path):
        """
        Sets the nfs_mount_path of this ViewProtectionInfoView.
        Specifies the path for mounting this View as an NFS share.

        :param nfs_mount_path: The nfs_mount_path of this ViewProtectionInfoView.
        :type: str
        """

        self._nfs_mount_path = nfs_mount_path

    @property
    def protocol_access(self):
        """
        Gets the protocol_access of this ViewProtectionInfoView.
        Specifies the supported Protocols for the View.

        :return: The protocol_access of this ViewProtectionInfoView.
        :rtype: str
        """
        return self._protocol_access

    @protocol_access.setter
    def protocol_access(self, protocol_access):
        """
        Sets the protocol_access of this ViewProtectionInfoView.
        Specifies the supported Protocols for the View.

        :param protocol_access: The protocol_access of this ViewProtectionInfoView.
        :type: str
        """
        allowed_values = ["kAll", "kNFSOnly", "kSMBOnly", "kS3Only"]
        if protocol_access not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol_access` ({0}), must be one of {1}"
                .format(protocol_access, allowed_values)
            )

        self._protocol_access = protocol_access

    @property
    def qos(self):
        """
        Gets the qos of this ViewProtectionInfoView.
        Specifies the Quality of Service (QoS) Policy for the View.

        :return: The qos of this ViewProtectionInfoView.
        :rtype: QoS
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """
        Sets the qos of this ViewProtectionInfoView.
        Specifies the Quality of Service (QoS) Policy for the View.

        :param qos: The qos of this ViewProtectionInfoView.
        :type: QoS
        """

        self._qos = qos

    @property
    def smb_mount_path(self):
        """
        Gets the smb_mount_path of this ViewProtectionInfoView.
        Specifies the main path for mounting this View as an SMB share.

        :return: The smb_mount_path of this ViewProtectionInfoView.
        :rtype: str
        """
        return self._smb_mount_path

    @smb_mount_path.setter
    def smb_mount_path(self, smb_mount_path):
        """
        Sets the smb_mount_path of this ViewProtectionInfoView.
        Specifies the main path for mounting this View as an SMB share.

        :param smb_mount_path: The smb_mount_path of this ViewProtectionInfoView.
        :type: str
        """

        self._smb_mount_path = smb_mount_path

    @property
    def smb_permissions_info(self):
        """
        Gets the smb_permissions_info of this ViewProtectionInfoView.
        Specifies the SMB permissions for the View.

        :return: The smb_permissions_info of this ViewProtectionInfoView.
        :rtype: SmbPermissionsInfo
        """
        return self._smb_permissions_info

    @smb_permissions_info.setter
    def smb_permissions_info(self, smb_permissions_info):
        """
        Sets the smb_permissions_info of this ViewProtectionInfoView.
        Specifies the SMB permissions for the View.

        :param smb_permissions_info: The smb_permissions_info of this ViewProtectionInfoView.
        :type: SmbPermissionsInfo
        """

        self._smb_permissions_info = smb_permissions_info

    @property
    def storage_policy_override(self):
        """
        Gets the storage_policy_override of this ViewProtectionInfoView.
        Specifies if inline deduplication and compression settings inherited from the Storage Domain (View Box) should be disabled for this View.

        :return: The storage_policy_override of this ViewProtectionInfoView.
        :rtype: StoragePolicyOverride
        """
        return self._storage_policy_override

    @storage_policy_override.setter
    def storage_policy_override(self, storage_policy_override):
        """
        Sets the storage_policy_override of this ViewProtectionInfoView.
        Specifies if inline deduplication and compression settings inherited from the Storage Domain (View Box) should be disabled for this View.

        :param storage_policy_override: The storage_policy_override of this ViewProtectionInfoView.
        :type: StoragePolicyOverride
        """

        self._storage_policy_override = storage_policy_override

    @property
    def subnet_whitelist(self):
        """
        Gets the subnet_whitelist of this ViewProtectionInfoView.
        Specifies a list of Subnets with IP addresses that have permissions to access the View. (Overrides the Subnets specified at the global Cohesity Cluster level.)

        :return: The subnet_whitelist of this ViewProtectionInfoView.
        :rtype: list[Subnet]
        """
        return self._subnet_whitelist

    @subnet_whitelist.setter
    def subnet_whitelist(self, subnet_whitelist):
        """
        Sets the subnet_whitelist of this ViewProtectionInfoView.
        Specifies a list of Subnets with IP addresses that have permissions to access the View. (Overrides the Subnets specified at the global Cohesity Cluster level.)

        :param subnet_whitelist: The subnet_whitelist of this ViewProtectionInfoView.
        :type: list[Subnet]
        """

        self._subnet_whitelist = subnet_whitelist

    @property
    def view_box_id(self):
        """
        Gets the view_box_id of this ViewProtectionInfoView.
        Specifies the id of the Storage Domain (View Box) where the View is stored.

        :return: The view_box_id of this ViewProtectionInfoView.
        :rtype: int
        """
        return self._view_box_id

    @view_box_id.setter
    def view_box_id(self, view_box_id):
        """
        Sets the view_box_id of this ViewProtectionInfoView.
        Specifies the id of the Storage Domain (View Box) where the View is stored.

        :param view_box_id: The view_box_id of this ViewProtectionInfoView.
        :type: int
        """

        self._view_box_id = view_box_id

    @property
    def view_box_name(self):
        """
        Gets the view_box_name of this ViewProtectionInfoView.
        Specifies the name of the Storage Domain (View Box) where the View is stored.

        :return: The view_box_name of this ViewProtectionInfoView.
        :rtype: str
        """
        return self._view_box_name

    @view_box_name.setter
    def view_box_name(self, view_box_name):
        """
        Sets the view_box_name of this ViewProtectionInfoView.
        Specifies the name of the Storage Domain (View Box) where the View is stored.

        :param view_box_name: The view_box_name of this ViewProtectionInfoView.
        :type: str
        """

        self._view_box_name = view_box_name

    @property
    def view_id(self):
        """
        Gets the view_id of this ViewProtectionInfoView.
        Specifies an id of the View assigned by the Cohesity Cluster.

        :return: The view_id of this ViewProtectionInfoView.
        :rtype: int
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """
        Sets the view_id of this ViewProtectionInfoView.
        Specifies an id of the View assigned by the Cohesity Cluster.

        :param view_id: The view_id of this ViewProtectionInfoView.
        :type: int
        """

        self._view_id = view_id

    @property
    def view_protection(self):
        """
        Gets the view_protection of this ViewProtectionInfoView.
        Specifies information about the Protection Jobs protecting this View.

        :return: The view_protection of this ViewProtectionInfoView.
        :rtype: ViewProtection
        """
        return self._view_protection

    @view_protection.setter
    def view_protection(self, view_protection):
        """
        Sets the view_protection of this ViewProtectionInfoView.
        Specifies information about the Protection Jobs protecting this View.

        :param view_protection: The view_protection of this ViewProtectionInfoView.
        :type: ViewProtection
        """

        self._view_protection = view_protection

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
