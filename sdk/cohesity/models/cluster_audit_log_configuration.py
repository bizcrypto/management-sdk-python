# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ClusterAuditLogConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, enabled=None, retention_period_days=None):
        """
        ClusterAuditLogConfiguration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enabled': 'bool',
            'retention_period_days': 'int'
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'retention_period_days': 'retentionPeriodDays'
        }

        self._enabled = enabled
        self._retention_period_days = retention_period_days

    @property
    def enabled(self):
        """
        Gets the enabled of this ClusterAuditLogConfiguration.
        Specifies if the Cluster audit logging is enabled on the Cohesity Cluster. If 'true', Cluster audit logging is enabled. Otherwise, it is disabled.

        :return: The enabled of this ClusterAuditLogConfiguration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this ClusterAuditLogConfiguration.
        Specifies if the Cluster audit logging is enabled on the Cohesity Cluster. If 'true', Cluster audit logging is enabled. Otherwise, it is disabled.

        :param enabled: The enabled of this ClusterAuditLogConfiguration.
        :type: bool
        """

        self._enabled = enabled

    @property
    def retention_period_days(self):
        """
        Gets the retention_period_days of this ClusterAuditLogConfiguration.
        Specifies the number of days to keep (retain) the Cluster audit logs. Audit logs generated before the period of time specified by retentionPeriodDays are removed from the Cohesity Cluster.

        :return: The retention_period_days of this ClusterAuditLogConfiguration.
        :rtype: int
        """
        return self._retention_period_days

    @retention_period_days.setter
    def retention_period_days(self, retention_period_days):
        """
        Sets the retention_period_days of this ClusterAuditLogConfiguration.
        Specifies the number of days to keep (retain) the Cluster audit logs. Audit logs generated before the period of time specified by retentionPeriodDays are removed from the Cohesity Cluster.

        :param retention_period_days: The retention_period_days of this ClusterAuditLogConfiguration.
        :type: int
        """

        self._retention_period_days = retention_period_days

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
