# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ClusterStats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cloud_usage_perf_stats=None, data_reduction_ratio=None, id=None, local_usage_perf_stats=None, logical_stats=None, usage_perf_stats=None):
        """
        ClusterStats - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cloud_usage_perf_stats': 'ClusterStatsCloudUsagePerfStats',
            'data_reduction_ratio': 'float',
            'id': 'int',
            'local_usage_perf_stats': 'ClusterStatsLocalUsagePerfStats',
            'logical_stats': 'ClusterStatsLogicalStats',
            'usage_perf_stats': 'ClusterStatsUsagePerfStats'
        }

        self.attribute_map = {
            'cloud_usage_perf_stats': 'cloudUsagePerfStats',
            'data_reduction_ratio': 'dataReductionRatio',
            'id': 'id',
            'local_usage_perf_stats': 'localUsagePerfStats',
            'logical_stats': 'logicalStats',
            'usage_perf_stats': 'usagePerfStats'
        }

        self._cloud_usage_perf_stats = cloud_usage_perf_stats
        self._data_reduction_ratio = data_reduction_ratio
        self._id = id
        self._local_usage_perf_stats = local_usage_perf_stats
        self._logical_stats = logical_stats
        self._usage_perf_stats = usage_perf_stats

    @property
    def cloud_usage_perf_stats(self):
        """
        Gets the cloud_usage_perf_stats of this ClusterStats.


        :return: The cloud_usage_perf_stats of this ClusterStats.
        :rtype: ClusterStatsCloudUsagePerfStats
        """
        return self._cloud_usage_perf_stats

    @cloud_usage_perf_stats.setter
    def cloud_usage_perf_stats(self, cloud_usage_perf_stats):
        """
        Sets the cloud_usage_perf_stats of this ClusterStats.


        :param cloud_usage_perf_stats: The cloud_usage_perf_stats of this ClusterStats.
        :type: ClusterStatsCloudUsagePerfStats
        """

        self._cloud_usage_perf_stats = cloud_usage_perf_stats

    @property
    def data_reduction_ratio(self):
        """
        Gets the data_reduction_ratio of this ClusterStats.
        Specifies the ratio of logical bytes (not reduced by change-block tracking, compression and deduplication) to physical bytes (reduced by change-block tracking, compression and deduplication).

        :return: The data_reduction_ratio of this ClusterStats.
        :rtype: float
        """
        return self._data_reduction_ratio

    @data_reduction_ratio.setter
    def data_reduction_ratio(self, data_reduction_ratio):
        """
        Sets the data_reduction_ratio of this ClusterStats.
        Specifies the ratio of logical bytes (not reduced by change-block tracking, compression and deduplication) to physical bytes (reduced by change-block tracking, compression and deduplication).

        :param data_reduction_ratio: The data_reduction_ratio of this ClusterStats.
        :type: float
        """

        self._data_reduction_ratio = data_reduction_ratio

    @property
    def id(self):
        """
        Gets the id of this ClusterStats.
        Specifies the id of the Cohesity Cluster.

        :return: The id of this ClusterStats.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ClusterStats.
        Specifies the id of the Cohesity Cluster.

        :param id: The id of this ClusterStats.
        :type: int
        """

        self._id = id

    @property
    def local_usage_perf_stats(self):
        """
        Gets the local_usage_perf_stats of this ClusterStats.


        :return: The local_usage_perf_stats of this ClusterStats.
        :rtype: ClusterStatsLocalUsagePerfStats
        """
        return self._local_usage_perf_stats

    @local_usage_perf_stats.setter
    def local_usage_perf_stats(self, local_usage_perf_stats):
        """
        Sets the local_usage_perf_stats of this ClusterStats.


        :param local_usage_perf_stats: The local_usage_perf_stats of this ClusterStats.
        :type: ClusterStatsLocalUsagePerfStats
        """

        self._local_usage_perf_stats = local_usage_perf_stats

    @property
    def logical_stats(self):
        """
        Gets the logical_stats of this ClusterStats.


        :return: The logical_stats of this ClusterStats.
        :rtype: ClusterStatsLogicalStats
        """
        return self._logical_stats

    @logical_stats.setter
    def logical_stats(self, logical_stats):
        """
        Sets the logical_stats of this ClusterStats.


        :param logical_stats: The logical_stats of this ClusterStats.
        :type: ClusterStatsLogicalStats
        """

        self._logical_stats = logical_stats

    @property
    def usage_perf_stats(self):
        """
        Gets the usage_perf_stats of this ClusterStats.


        :return: The usage_perf_stats of this ClusterStats.
        :rtype: ClusterStatsUsagePerfStats
        """
        return self._usage_perf_stats

    @usage_perf_stats.setter
    def usage_perf_stats(self, usage_perf_stats):
        """
        Sets the usage_perf_stats of this ClusterStats.


        :param usage_perf_stats: The usage_perf_stats of this ClusterStats.
        :type: ClusterStatsUsagePerfStats
        """

        self._usage_perf_stats = usage_perf_stats

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
