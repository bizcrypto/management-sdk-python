# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SqlSourceId(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_date_msecs=None, database_id=None, instance_id=None):
        """
        SqlSourceId - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_date_msecs': 'int',
            'database_id': 'int',
            'instance_id': 'list[int]'
        }

        self.attribute_map = {
            'created_date_msecs': 'createdDateMsecs',
            'database_id': 'databaseId',
            'instance_id': 'instanceId'
        }

        self._created_date_msecs = created_date_msecs
        self._database_id = database_id
        self._instance_id = instance_id

    @property
    def created_date_msecs(self):
        """
        Gets the created_date_msecs of this SqlSourceId.
        Specifies a unique identifier generated from the date the database is created or renamed. Cohesity uses this identifier in combination with the databaseId to uniquely identify a database.

        :return: The created_date_msecs of this SqlSourceId.
        :rtype: int
        """
        return self._created_date_msecs

    @created_date_msecs.setter
    def created_date_msecs(self, created_date_msecs):
        """
        Sets the created_date_msecs of this SqlSourceId.
        Specifies a unique identifier generated from the date the database is created or renamed. Cohesity uses this identifier in combination with the databaseId to uniquely identify a database.

        :param created_date_msecs: The created_date_msecs of this SqlSourceId.
        :type: int
        """

        self._created_date_msecs = created_date_msecs

    @property
    def database_id(self):
        """
        Gets the database_id of this SqlSourceId.
        Specifies a unique id of the database but only for the life of the database. SQL Server may reuse database ids. Cohesity uses the createDateMsecs in combination with this databaseId to uniquely identify a database.

        :return: The database_id of this SqlSourceId.
        :rtype: int
        """
        return self._database_id

    @database_id.setter
    def database_id(self, database_id):
        """
        Sets the database_id of this SqlSourceId.
        Specifies a unique id of the database but only for the life of the database. SQL Server may reuse database ids. Cohesity uses the createDateMsecs in combination with this databaseId to uniquely identify a database.

        :param database_id: The database_id of this SqlSourceId.
        :type: int
        """

        self._database_id = database_id

    @property
    def instance_id(self):
        """
        Gets the instance_id of this SqlSourceId.
        Specifies unique id for the SQL Server instance. This id does not change during the life of the instance.

        :return: The instance_id of this SqlSourceId.
        :rtype: list[int]
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """
        Sets the instance_id of this SqlSourceId.
        Specifies unique id for the SQL Server instance. This id does not change during the life of the instance.

        :param instance_id: The instance_id of this SqlSourceId.
        :type: list[int]
        """

        self._instance_id = instance_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
