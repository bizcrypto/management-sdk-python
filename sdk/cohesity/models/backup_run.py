# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BackupRun(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, environment=None, error=None, job_run_id=None, message=None, metadata_deleted=None, quiesced=None, run_type=None, sla_violated=None, snapshots_deleted=None, snapshots_deleted_time_usecs=None, source_backup_status=None, stats=None, status=None, warnings=None):
        """
        BackupRun - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'environment': 'str',
            'error': 'str',
            'job_run_id': 'int',
            'message': 'str',
            'metadata_deleted': 'bool',
            'quiesced': 'bool',
            'run_type': 'str',
            'sla_violated': 'bool',
            'snapshots_deleted': 'bool',
            'snapshots_deleted_time_usecs': 'int',
            'source_backup_status': 'list[SourceBackupStatus]',
            'stats': 'ProtectionJobRunStats',
            'status': 'str',
            'warnings': 'list[str]'
        }

        self.attribute_map = {
            'environment': 'environment',
            'error': 'error',
            'job_run_id': 'jobRunId',
            'message': 'message',
            'metadata_deleted': 'metadataDeleted',
            'quiesced': 'quiesced',
            'run_type': 'runType',
            'sla_violated': 'slaViolated',
            'snapshots_deleted': 'snapshotsDeleted',
            'snapshots_deleted_time_usecs': 'snapshotsDeletedTimeUsecs',
            'source_backup_status': 'sourceBackupStatus',
            'stats': 'stats',
            'status': 'status',
            'warnings': 'warnings'
        }

        self._environment = environment
        self._error = error
        self._job_run_id = job_run_id
        self._message = message
        self._metadata_deleted = metadata_deleted
        self._quiesced = quiesced
        self._run_type = run_type
        self._sla_violated = sla_violated
        self._snapshots_deleted = snapshots_deleted
        self._snapshots_deleted_time_usecs = snapshots_deleted_time_usecs
        self._source_backup_status = source_backup_status
        self._stats = stats
        self._status = status
        self._warnings = warnings

    @property
    def environment(self):
        """
        Gets the environment of this BackupRun.
        Specifies the environment type that the task is protecting. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :return: The environment of this BackupRun.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this BackupRun.
        Specifies the environment type that the task is protecting. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :param environment: The environment of this BackupRun.
        :type: str
        """
        allowed_values = ["kVMware", "kSQL", "kView", "kPuppeteer", "kPhysical", "kPure", "kNetapp", "kGenericNas", "kHyperV", "kAcropolis", "kAzure"]
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def error(self):
        """
        Gets the error of this BackupRun.
        Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.

        :return: The error of this BackupRun.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this BackupRun.
        Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.

        :param error: The error of this BackupRun.
        :type: str
        """

        self._error = error

    @property
    def job_run_id(self):
        """
        Gets the job_run_id of this BackupRun.
        Specifies the id of the Job Run that ran the backup task and the copy tasks.

        :return: The job_run_id of this BackupRun.
        :rtype: int
        """
        return self._job_run_id

    @job_run_id.setter
    def job_run_id(self, job_run_id):
        """
        Sets the job_run_id of this BackupRun.
        Specifies the id of the Job Run that ran the backup task and the copy tasks.

        :param job_run_id: The job_run_id of this BackupRun.
        :type: int
        """

        self._job_run_id = job_run_id

    @property
    def message(self):
        """
        Gets the message of this BackupRun.
        Specifies a message after finishing the task successfully. This field is optionally populated when the status is equal to 'kSuccess'.

        :return: The message of this BackupRun.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this BackupRun.
        Specifies a message after finishing the task successfully. This field is optionally populated when the status is equal to 'kSuccess'.

        :param message: The message of this BackupRun.
        :type: str
        """

        self._message = message

    @property
    def metadata_deleted(self):
        """
        Gets the metadata_deleted of this BackupRun.
        Specifies if the metadata and snapshots associated with this Job Run have been deleted. This field is set to true when the snapshots, which are marked for deletion, are removed by garbage collection. The associated metadata is also deleted.

        :return: The metadata_deleted of this BackupRun.
        :rtype: bool
        """
        return self._metadata_deleted

    @metadata_deleted.setter
    def metadata_deleted(self, metadata_deleted):
        """
        Sets the metadata_deleted of this BackupRun.
        Specifies if the metadata and snapshots associated with this Job Run have been deleted. This field is set to true when the snapshots, which are marked for deletion, are removed by garbage collection. The associated metadata is also deleted.

        :param metadata_deleted: The metadata_deleted of this BackupRun.
        :type: bool
        """

        self._metadata_deleted = metadata_deleted

    @property
    def quiesced(self):
        """
        Gets the quiesced of this BackupRun.
        Specifies if app-consistent snapshot was captured. This field is set to true, if an app-consistent snapshot was taken by quiescing applications and the file system before taking a backup.

        :return: The quiesced of this BackupRun.
        :rtype: bool
        """
        return self._quiesced

    @quiesced.setter
    def quiesced(self, quiesced):
        """
        Sets the quiesced of this BackupRun.
        Specifies if app-consistent snapshot was captured. This field is set to true, if an app-consistent snapshot was taken by quiescing applications and the file system before taking a backup.

        :param quiesced: The quiesced of this BackupRun.
        :type: bool
        """

        self._quiesced = quiesced

    @property
    def run_type(self):
        """
        Gets the run_type of this BackupRun.
        Specifies the type of backup such as 'kRegular', 'kFull', 'kLog' or 'kSystem'. 'kRegular' indicates a incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates a system backup. System backups are used to do bare metal recovery of the system to a specific point in time.

        :return: The run_type of this BackupRun.
        :rtype: str
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """
        Sets the run_type of this BackupRun.
        Specifies the type of backup such as 'kRegular', 'kFull', 'kLog' or 'kSystem'. 'kRegular' indicates a incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates a system backup. System backups are used to do bare metal recovery of the system to a specific point in time.

        :param run_type: The run_type of this BackupRun.
        :type: str
        """
        allowed_values = ["kRegular", "kFull", "kLog", "kSystem"]
        if run_type not in allowed_values:
            raise ValueError(
                "Invalid value for `run_type` ({0}), must be one of {1}"
                .format(run_type, allowed_values)
            )

        self._run_type = run_type

    @property
    def sla_violated(self):
        """
        Gets the sla_violated of this BackupRun.
        Specifies if the SLA was violated for the Job Run. This field is set to true, if time to complete the Job Run is longer than the SLA specified. This field is populated when the status is set to 'kSuccess' or 'kFailure'.

        :return: The sla_violated of this BackupRun.
        :rtype: bool
        """
        return self._sla_violated

    @sla_violated.setter
    def sla_violated(self, sla_violated):
        """
        Sets the sla_violated of this BackupRun.
        Specifies if the SLA was violated for the Job Run. This field is set to true, if time to complete the Job Run is longer than the SLA specified. This field is populated when the status is set to 'kSuccess' or 'kFailure'.

        :param sla_violated: The sla_violated of this BackupRun.
        :type: bool
        """

        self._sla_violated = sla_violated

    @property
    def snapshots_deleted(self):
        """
        Gets the snapshots_deleted of this BackupRun.
        Specifies if backup snapshots associated with this Job Run have been marked for deletion because of the retention settings in the Policy or if they were manually deleted from the Cohesity Dashboard.

        :return: The snapshots_deleted of this BackupRun.
        :rtype: bool
        """
        return self._snapshots_deleted

    @snapshots_deleted.setter
    def snapshots_deleted(self, snapshots_deleted):
        """
        Sets the snapshots_deleted of this BackupRun.
        Specifies if backup snapshots associated with this Job Run have been marked for deletion because of the retention settings in the Policy or if they were manually deleted from the Cohesity Dashboard.

        :param snapshots_deleted: The snapshots_deleted of this BackupRun.
        :type: bool
        """

        self._snapshots_deleted = snapshots_deleted

    @property
    def snapshots_deleted_time_usecs(self):
        """
        Gets the snapshots_deleted_time_usecs of this BackupRun.
        Specifies if backup snapshots associated with this Job Run have been marked for deletion because of the retention settings in the Policy or if they were manually deleted from the Cohesity Dashboard.

        :return: The snapshots_deleted_time_usecs of this BackupRun.
        :rtype: int
        """
        return self._snapshots_deleted_time_usecs

    @snapshots_deleted_time_usecs.setter
    def snapshots_deleted_time_usecs(self, snapshots_deleted_time_usecs):
        """
        Sets the snapshots_deleted_time_usecs of this BackupRun.
        Specifies if backup snapshots associated with this Job Run have been marked for deletion because of the retention settings in the Policy or if they were manually deleted from the Cohesity Dashboard.

        :param snapshots_deleted_time_usecs: The snapshots_deleted_time_usecs of this BackupRun.
        :type: int
        """

        self._snapshots_deleted_time_usecs = snapshots_deleted_time_usecs

    @property
    def source_backup_status(self):
        """
        Gets the source_backup_status of this BackupRun.
        Specifies the status of backing up each source objects (such as VMs) associated with the job.

        :return: The source_backup_status of this BackupRun.
        :rtype: list[SourceBackupStatus]
        """
        return self._source_backup_status

    @source_backup_status.setter
    def source_backup_status(self, source_backup_status):
        """
        Sets the source_backup_status of this BackupRun.
        Specifies the status of backing up each source objects (such as VMs) associated with the job.

        :param source_backup_status: The source_backup_status of this BackupRun.
        :type: list[SourceBackupStatus]
        """

        self._source_backup_status = source_backup_status

    @property
    def stats(self):
        """
        Gets the stats of this BackupRun.
        Specifies the aggregated stats of all Backup Run tasks in a Protection Run.

        :return: The stats of this BackupRun.
        :rtype: ProtectionJobRunStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """
        Sets the stats of this BackupRun.
        Specifies the aggregated stats of all Backup Run tasks in a Protection Run.

        :param stats: The stats of this BackupRun.
        :type: ProtectionJobRunStats
        """

        self._stats = stats

    @property
    def status(self):
        """
        Gets the status of this BackupRun.
        Specifies the status of Backup task such as 'kRunning', 'kSuccess', 'kFailure' etc. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed.

        :return: The status of this BackupRun.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BackupRun.
        Specifies the status of Backup task such as 'kRunning', 'kSuccess', 'kFailure' etc. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed.

        :param status: The status of this BackupRun.
        :type: str
        """
        allowed_values = ["kAccepted", "kRunning", "kCanceling", "kCanceled", "kSuccess", "kFailure"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def warnings(self):
        """
        Gets the warnings of this BackupRun.
        Specifies the warnings that occurred (if any) while running this task.

        :return: The warnings of this BackupRun.
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """
        Sets the warnings of this BackupRun.
        Specifies the warnings that occurred (if any) while running this task.

        :param warnings: The warnings of this BackupRun.
        :type: list[str]
        """

        self._warnings = warnings

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
