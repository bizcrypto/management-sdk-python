# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SnapshotVersion(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, attempt_number=None, delta_size_bytes=None, is_app_consistent=None, is_full_backup=None, job_run_id=None, local_mount_path=None, logical_size_bytes=None, physical_size_bytes=None, primary_physical_size_bytes=None, started_time_usecs=None):
        """
        SnapshotVersion - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'attempt_number': 'int',
            'delta_size_bytes': 'int',
            'is_app_consistent': 'bool',
            'is_full_backup': 'bool',
            'job_run_id': 'int',
            'local_mount_path': 'str',
            'logical_size_bytes': 'int',
            'physical_size_bytes': 'int',
            'primary_physical_size_bytes': 'int',
            'started_time_usecs': 'int'
        }

        self.attribute_map = {
            'attempt_number': 'attemptNumber',
            'delta_size_bytes': 'deltaSizeBytes',
            'is_app_consistent': 'isAppConsistent',
            'is_full_backup': 'isFullBackup',
            'job_run_id': 'jobRunId',
            'local_mount_path': 'localMountPath',
            'logical_size_bytes': 'logicalSizeBytes',
            'physical_size_bytes': 'physicalSizeBytes',
            'primary_physical_size_bytes': 'primaryPhysicalSizeBytes',
            'started_time_usecs': 'startedTimeUsecs'
        }

        self._attempt_number = attempt_number
        self._delta_size_bytes = delta_size_bytes
        self._is_app_consistent = is_app_consistent
        self._is_full_backup = is_full_backup
        self._job_run_id = job_run_id
        self._local_mount_path = local_mount_path
        self._logical_size_bytes = logical_size_bytes
        self._physical_size_bytes = physical_size_bytes
        self._primary_physical_size_bytes = primary_physical_size_bytes
        self._started_time_usecs = started_time_usecs

    @property
    def attempt_number(self):
        """
        Gets the attempt_number of this SnapshotVersion.
        Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3.

        :return: The attempt_number of this SnapshotVersion.
        :rtype: int
        """
        return self._attempt_number

    @attempt_number.setter
    def attempt_number(self, attempt_number):
        """
        Sets the attempt_number of this SnapshotVersion.
        Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3.

        :param attempt_number: The attempt_number of this SnapshotVersion.
        :type: int
        """

        self._attempt_number = attempt_number

    @property
    def delta_size_bytes(self):
        """
        Gets the delta_size_bytes of this SnapshotVersion.
        Specifies the size of the data captured from the source object. For a full backup (where Change Block Tracking is not utilized) this field is equal to logicalSizeBytes. For an incremental backup (where Change Block Tracking is utilized), this field specifies the size of the data that has changed since the last backup.

        :return: The delta_size_bytes of this SnapshotVersion.
        :rtype: int
        """
        return self._delta_size_bytes

    @delta_size_bytes.setter
    def delta_size_bytes(self, delta_size_bytes):
        """
        Sets the delta_size_bytes of this SnapshotVersion.
        Specifies the size of the data captured from the source object. For a full backup (where Change Block Tracking is not utilized) this field is equal to logicalSizeBytes. For an incremental backup (where Change Block Tracking is utilized), this field specifies the size of the data that has changed since the last backup.

        :param delta_size_bytes: The delta_size_bytes of this SnapshotVersion.
        :type: int
        """

        self._delta_size_bytes = delta_size_bytes

    @property
    def is_app_consistent(self):
        """
        Gets the is_app_consistent of this SnapshotVersion.
        Specifies if an app-consistent snapshot was captured. For example, was the VM was quiesced before the snapshot was captured.

        :return: The is_app_consistent of this SnapshotVersion.
        :rtype: bool
        """
        return self._is_app_consistent

    @is_app_consistent.setter
    def is_app_consistent(self, is_app_consistent):
        """
        Sets the is_app_consistent of this SnapshotVersion.
        Specifies if an app-consistent snapshot was captured. For example, was the VM was quiesced before the snapshot was captured.

        :param is_app_consistent: The is_app_consistent of this SnapshotVersion.
        :type: bool
        """

        self._is_app_consistent = is_app_consistent

    @property
    def is_full_backup(self):
        """
        Gets the is_full_backup of this SnapshotVersion.
        Specifies if the snapshot is a full backup. For example, all blocks of the VM is captured and Change Block Tracking is not utilized.

        :return: The is_full_backup of this SnapshotVersion.
        :rtype: bool
        """
        return self._is_full_backup

    @is_full_backup.setter
    def is_full_backup(self, is_full_backup):
        """
        Sets the is_full_backup of this SnapshotVersion.
        Specifies if the snapshot is a full backup. For example, all blocks of the VM is captured and Change Block Tracking is not utilized.

        :param is_full_backup: The is_full_backup of this SnapshotVersion.
        :type: bool
        """

        self._is_full_backup = is_full_backup

    @property
    def job_run_id(self):
        """
        Gets the job_run_id of this SnapshotVersion.
        Specifies the id of the Job Run that captured the snapshot.

        :return: The job_run_id of this SnapshotVersion.
        :rtype: int
        """
        return self._job_run_id

    @job_run_id.setter
    def job_run_id(self, job_run_id):
        """
        Sets the job_run_id of this SnapshotVersion.
        Specifies the id of the Job Run that captured the snapshot.

        :param job_run_id: The job_run_id of this SnapshotVersion.
        :type: int
        """

        self._job_run_id = job_run_id

    @property
    def local_mount_path(self):
        """
        Gets the local_mount_path of this SnapshotVersion.
        Specifies the local path relative to the View, without the ViewBox/View prefix.

        :return: The local_mount_path of this SnapshotVersion.
        :rtype: str
        """
        return self._local_mount_path

    @local_mount_path.setter
    def local_mount_path(self, local_mount_path):
        """
        Sets the local_mount_path of this SnapshotVersion.
        Specifies the local path relative to the View, without the ViewBox/View prefix.

        :param local_mount_path: The local_mount_path of this SnapshotVersion.
        :type: str
        """

        self._local_mount_path = local_mount_path

    @property
    def logical_size_bytes(self):
        """
        Gets the logical_size_bytes of this SnapshotVersion.
        Specifies the size of the snapshot if the data is fully hydrated or expanded and not reduced by change-block tracking, compression and deduplication. For example if a VMDK of size 100GB is created with thin provisioning and the disk size to store the VMDK is 20GB. The logical size of this object is 100GB and the physical size is 20GB.

        :return: The logical_size_bytes of this SnapshotVersion.
        :rtype: int
        """
        return self._logical_size_bytes

    @logical_size_bytes.setter
    def logical_size_bytes(self, logical_size_bytes):
        """
        Sets the logical_size_bytes of this SnapshotVersion.
        Specifies the size of the snapshot if the data is fully hydrated or expanded and not reduced by change-block tracking, compression and deduplication. For example if a VMDK of size 100GB is created with thin provisioning and the disk size to store the VMDK is 20GB. The logical size of this object is 100GB and the physical size is 20GB.

        :param logical_size_bytes: The logical_size_bytes of this SnapshotVersion.
        :type: int
        """

        self._logical_size_bytes = logical_size_bytes

    @property
    def physical_size_bytes(self):
        """
        Gets the physical_size_bytes of this SnapshotVersion.
        Specifies the amount of data actually used on the disk to store this object after being reduced by change-block tracking, compression and deduplication.

        :return: The physical_size_bytes of this SnapshotVersion.
        :rtype: int
        """
        return self._physical_size_bytes

    @physical_size_bytes.setter
    def physical_size_bytes(self, physical_size_bytes):
        """
        Sets the physical_size_bytes of this SnapshotVersion.
        Specifies the amount of data actually used on the disk to store this object after being reduced by change-block tracking, compression and deduplication.

        :param physical_size_bytes: The physical_size_bytes of this SnapshotVersion.
        :type: int
        """

        self._physical_size_bytes = physical_size_bytes

    @property
    def primary_physical_size_bytes(self):
        """
        Gets the primary_physical_size_bytes of this SnapshotVersion.
        Specifies the total amount of disk space used to store this object on the primary storage. For example the total amount of disk space used to store the VM files (such as the VMDK files) on the primary datastore.

        :return: The primary_physical_size_bytes of this SnapshotVersion.
        :rtype: int
        """
        return self._primary_physical_size_bytes

    @primary_physical_size_bytes.setter
    def primary_physical_size_bytes(self, primary_physical_size_bytes):
        """
        Sets the primary_physical_size_bytes of this SnapshotVersion.
        Specifies the total amount of disk space used to store this object on the primary storage. For example the total amount of disk space used to store the VM files (such as the VMDK files) on the primary datastore.

        :param primary_physical_size_bytes: The primary_physical_size_bytes of this SnapshotVersion.
        :type: int
        """

        self._primary_physical_size_bytes = primary_physical_size_bytes

    @property
    def started_time_usecs(self):
        """
        Gets the started_time_usecs of this SnapshotVersion.
        Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds).

        :return: The started_time_usecs of this SnapshotVersion.
        :rtype: int
        """
        return self._started_time_usecs

    @started_time_usecs.setter
    def started_time_usecs(self, started_time_usecs):
        """
        Sets the started_time_usecs of this SnapshotVersion.
        Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds).

        :param started_time_usecs: The started_time_usecs of this SnapshotVersion.
        :type: int
        """

        self._started_time_usecs = started_time_usecs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
