# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class PureStorageArray(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, ports=None, revision=None, version=None):
        """
        PureStorageArray - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'ports': 'list[IscsiSanPort]',
            'revision': 'str',
            'version': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'ports': 'ports',
            'revision': 'revision',
            'version': 'version'
        }

        self._id = id
        self._ports = ports
        self._revision = revision
        self._version = version

    @property
    def id(self):
        """
        Gets the id of this PureStorageArray.
        Specifies a unique id of a Pure Storage Array. The id is unique across Cohesity Clusters.

        :return: The id of this PureStorageArray.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PureStorageArray.
        Specifies a unique id of a Pure Storage Array. The id is unique across Cohesity Clusters.

        :param id: The id of this PureStorageArray.
        :type: str
        """

        self._id = id

    @property
    def ports(self):
        """
        Gets the ports of this PureStorageArray.


        :return: The ports of this PureStorageArray.
        :rtype: list[IscsiSanPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """
        Sets the ports of this PureStorageArray.


        :param ports: The ports of this PureStorageArray.
        :type: list[IscsiSanPort]
        """

        self._ports = ports

    @property
    def revision(self):
        """
        Gets the revision of this PureStorageArray.
        Specifies the revision of the Pure Storage Array.

        :return: The revision of this PureStorageArray.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """
        Sets the revision of this PureStorageArray.
        Specifies the revision of the Pure Storage Array.

        :param revision: The revision of this PureStorageArray.
        :type: str
        """

        self._revision = revision

    @property
    def version(self):
        """
        Gets the version of this PureStorageArray.
        Specifies the version of the Pure Storage Array.

        :return: The version of this PureStorageArray.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this PureStorageArray.
        Specifies the version of the Pure Storage Array.

        :param version: The version of this PureStorageArray.
        :type: str
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
