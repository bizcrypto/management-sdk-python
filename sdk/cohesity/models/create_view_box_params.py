# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateViewBoxParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ad_domain_name=None, cluster_partition_id=None, default_user_quota_policy=None, default_view_quota_policy=None, name=None, physical_quota=None, s3_buckets_allowed=None, storage_policy=None):
        """
        CreateViewBoxParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ad_domain_name': 'str',
            'cluster_partition_id': 'int',
            'default_user_quota_policy': 'CreateViewBoxParamsDefaultUserQuotaPolicy',
            'default_view_quota_policy': 'CreateViewBoxParamsDefaultViewQuotaPolicy',
            'name': 'str',
            'physical_quota': 'CreateViewBoxParamsPhysicalQuota',
            's3_buckets_allowed': 'bool',
            'storage_policy': 'StoragePolicy'
        }

        self.attribute_map = {
            'ad_domain_name': 'adDomainName',
            'cluster_partition_id': 'clusterPartitionId',
            'default_user_quota_policy': 'defaultUserQuotaPolicy',
            'default_view_quota_policy': 'defaultViewQuotaPolicy',
            'name': 'name',
            'physical_quota': 'physicalQuota',
            's3_buckets_allowed': 's3BucketsAllowed',
            'storage_policy': 'storagePolicy'
        }

        self._ad_domain_name = ad_domain_name
        self._cluster_partition_id = cluster_partition_id
        self._default_user_quota_policy = default_user_quota_policy
        self._default_view_quota_policy = default_view_quota_policy
        self._name = name
        self._physical_quota = physical_quota
        self._s3_buckets_allowed = s3_buckets_allowed
        self._storage_policy = storage_policy

    @property
    def ad_domain_name(self):
        """
        Gets the ad_domain_name of this CreateViewBoxParams.
        Specifies an active directory domain that this view box is mapped to.

        :return: The ad_domain_name of this CreateViewBoxParams.
        :rtype: str
        """
        return self._ad_domain_name

    @ad_domain_name.setter
    def ad_domain_name(self, ad_domain_name):
        """
        Sets the ad_domain_name of this CreateViewBoxParams.
        Specifies an active directory domain that this view box is mapped to.

        :param ad_domain_name: The ad_domain_name of this CreateViewBoxParams.
        :type: str
        """

        self._ad_domain_name = ad_domain_name

    @property
    def cluster_partition_id(self):
        """
        Gets the cluster_partition_id of this CreateViewBoxParams.
        Specifies the Cluster Partition id where the Storage Domain (View Box) is located.

        :return: The cluster_partition_id of this CreateViewBoxParams.
        :rtype: int
        """
        return self._cluster_partition_id

    @cluster_partition_id.setter
    def cluster_partition_id(self, cluster_partition_id):
        """
        Sets the cluster_partition_id of this CreateViewBoxParams.
        Specifies the Cluster Partition id where the Storage Domain (View Box) is located.

        :param cluster_partition_id: The cluster_partition_id of this CreateViewBoxParams.
        :type: int
        """

        self._cluster_partition_id = cluster_partition_id

    @property
    def default_user_quota_policy(self):
        """
        Gets the default_user_quota_policy of this CreateViewBoxParams.


        :return: The default_user_quota_policy of this CreateViewBoxParams.
        :rtype: CreateViewBoxParamsDefaultUserQuotaPolicy
        """
        return self._default_user_quota_policy

    @default_user_quota_policy.setter
    def default_user_quota_policy(self, default_user_quota_policy):
        """
        Sets the default_user_quota_policy of this CreateViewBoxParams.


        :param default_user_quota_policy: The default_user_quota_policy of this CreateViewBoxParams.
        :type: CreateViewBoxParamsDefaultUserQuotaPolicy
        """

        self._default_user_quota_policy = default_user_quota_policy

    @property
    def default_view_quota_policy(self):
        """
        Gets the default_view_quota_policy of this CreateViewBoxParams.


        :return: The default_view_quota_policy of this CreateViewBoxParams.
        :rtype: CreateViewBoxParamsDefaultViewQuotaPolicy
        """
        return self._default_view_quota_policy

    @default_view_quota_policy.setter
    def default_view_quota_policy(self, default_view_quota_policy):
        """
        Sets the default_view_quota_policy of this CreateViewBoxParams.


        :param default_view_quota_policy: The default_view_quota_policy of this CreateViewBoxParams.
        :type: CreateViewBoxParamsDefaultViewQuotaPolicy
        """

        self._default_view_quota_policy = default_view_quota_policy

    @property
    def name(self):
        """
        Gets the name of this CreateViewBoxParams.
        Specifies the name of the Storage Domain (View Box).

        :return: The name of this CreateViewBoxParams.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CreateViewBoxParams.
        Specifies the name of the Storage Domain (View Box).

        :param name: The name of this CreateViewBoxParams.
        :type: str
        """

        self._name = name

    @property
    def physical_quota(self):
        """
        Gets the physical_quota of this CreateViewBoxParams.


        :return: The physical_quota of this CreateViewBoxParams.
        :rtype: CreateViewBoxParamsPhysicalQuota
        """
        return self._physical_quota

    @physical_quota.setter
    def physical_quota(self, physical_quota):
        """
        Sets the physical_quota of this CreateViewBoxParams.


        :param physical_quota: The physical_quota of this CreateViewBoxParams.
        :type: CreateViewBoxParamsPhysicalQuota
        """

        self._physical_quota = physical_quota

    @property
    def s3_buckets_allowed(self):
        """
        Gets the s3_buckets_allowed of this CreateViewBoxParams.
        Specifies whether creation of a S3 bucket is allowed in this Storage Domain (View Box). When a new S3 bucket creation request arrives, we'll look at all the View Boxes and the first Storage Domain (View Box) that allows creating S3 buckets in it will be the one where the bucket will be placed.

        :return: The s3_buckets_allowed of this CreateViewBoxParams.
        :rtype: bool
        """
        return self._s3_buckets_allowed

    @s3_buckets_allowed.setter
    def s3_buckets_allowed(self, s3_buckets_allowed):
        """
        Sets the s3_buckets_allowed of this CreateViewBoxParams.
        Specifies whether creation of a S3 bucket is allowed in this Storage Domain (View Box). When a new S3 bucket creation request arrives, we'll look at all the View Boxes and the first Storage Domain (View Box) that allows creating S3 buckets in it will be the one where the bucket will be placed.

        :param s3_buckets_allowed: The s3_buckets_allowed of this CreateViewBoxParams.
        :type: bool
        """

        self._s3_buckets_allowed = s3_buckets_allowed

    @property
    def storage_policy(self):
        """
        Gets the storage_policy of this CreateViewBoxParams.
        Specifies the storage options applied to the Storage Domain (View Box).

        :return: The storage_policy of this CreateViewBoxParams.
        :rtype: StoragePolicy
        """
        return self._storage_policy

    @storage_policy.setter
    def storage_policy(self, storage_policy):
        """
        Sets the storage_policy of this CreateViewBoxParams.
        Specifies the storage options applied to the Storage Domain (View Box).

        :param storage_policy: The storage_policy of this CreateViewBoxParams.
        :type: StoragePolicy
        """

        self._storage_policy = storage_policy

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
