# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProtectionSourceNodeRegistrationInfoNasMountCredentials(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, domain=None, nas_protocol=None, password=None, username=None):
        """
        ProtectionSourceNodeRegistrationInfoNasMountCredentials - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'domain': 'str',
            'nas_protocol': 'str',
            'password': 'str',
            'username': 'str'
        }

        self.attribute_map = {
            'domain': 'domain',
            'nas_protocol': 'nasProtocol',
            'password': 'password',
            'username': 'username'
        }

        self._domain = domain
        self._nas_protocol = nas_protocol
        self._password = password
        self._username = username

    @property
    def domain(self):
        """
        Gets the domain of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        Specifies the domain in which this credential is valid.

        :return: The domain of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        Specifies the domain in which this credential is valid.

        :param domain: The domain of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        :type: str
        """

        self._domain = domain

    @property
    def nas_protocol(self):
        """
        Gets the nas_protocol of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        Specifies the protocol used by the NAS server. Specifies the protocol used by a NAS server. 'kNfs3' indicates NFS v3 protocol. 'kCifs1' indicates CIFS v1.0 protocol.

        :return: The nas_protocol of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        :rtype: str
        """
        return self._nas_protocol

    @nas_protocol.setter
    def nas_protocol(self, nas_protocol):
        """
        Sets the nas_protocol of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        Specifies the protocol used by the NAS server. Specifies the protocol used by a NAS server. 'kNfs3' indicates NFS v3 protocol. 'kCifs1' indicates CIFS v1.0 protocol.

        :param nas_protocol: The nas_protocol of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        :type: str
        """
        allowed_values = ["kNfs3", "kCifs1"]
        if nas_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `nas_protocol` ({0}), must be one of {1}"
                .format(nas_protocol, allowed_values)
            )

        self._nas_protocol = nas_protocol

    @property
    def password(self):
        """
        Gets the password of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        Specifies the password for the username to use for mounting the NAS.

        :return: The password of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        Specifies the password for the username to use for mounting the NAS.

        :param password: The password of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        :type: str
        """

        self._password = password

    @property
    def username(self):
        """
        Gets the username of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        Specifies a username to use for mounting the NAS.

        :return: The username of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        Specifies a username to use for mounting the NAS.

        :param username: The username of this ProtectionSourceNodeRegistrationInfoNasMountCredentials.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
