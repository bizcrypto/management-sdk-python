# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class StoragePolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cloud_spill_vault_id=None, compression_policy=None, deduplicate_compress_delay_secs=None, deduplication_enabled=None, encryption_policy=None, erasure_coding_info=None, inline_compress=None, inline_deduplicate=None, num_failures_tolerated=None):
        """
        StoragePolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cloud_spill_vault_id': 'int',
            'compression_policy': 'str',
            'deduplicate_compress_delay_secs': 'int',
            'deduplication_enabled': 'bool',
            'encryption_policy': 'str',
            'erasure_coding_info': 'ErasureCodingInfo',
            'inline_compress': 'bool',
            'inline_deduplicate': 'bool',
            'num_failures_tolerated': 'int'
        }

        self.attribute_map = {
            'cloud_spill_vault_id': 'cloudSpillVaultId',
            'compression_policy': 'compressionPolicy',
            'deduplicate_compress_delay_secs': 'deduplicateCompressDelaySecs',
            'deduplication_enabled': 'deduplicationEnabled',
            'encryption_policy': 'encryptionPolicy',
            'erasure_coding_info': 'erasureCodingInfo',
            'inline_compress': 'inlineCompress',
            'inline_deduplicate': 'inlineDeduplicate',
            'num_failures_tolerated': 'numFailuresTolerated'
        }

        self._cloud_spill_vault_id = cloud_spill_vault_id
        self._compression_policy = compression_policy
        self._deduplicate_compress_delay_secs = deduplicate_compress_delay_secs
        self._deduplication_enabled = deduplication_enabled
        self._encryption_policy = encryption_policy
        self._erasure_coding_info = erasure_coding_info
        self._inline_compress = inline_compress
        self._inline_deduplicate = inline_deduplicate
        self._num_failures_tolerated = num_failures_tolerated

    @property
    def cloud_spill_vault_id(self):
        """
        Gets the cloud_spill_vault_id of this StoragePolicy.
        Specifies the vault id assigned for an external Storage Target to facilitate cloud spill.

        :return: The cloud_spill_vault_id of this StoragePolicy.
        :rtype: int
        """
        return self._cloud_spill_vault_id

    @cloud_spill_vault_id.setter
    def cloud_spill_vault_id(self, cloud_spill_vault_id):
        """
        Sets the cloud_spill_vault_id of this StoragePolicy.
        Specifies the vault id assigned for an external Storage Target to facilitate cloud spill.

        :param cloud_spill_vault_id: The cloud_spill_vault_id of this StoragePolicy.
        :type: int
        """

        self._cloud_spill_vault_id = cloud_spill_vault_id

    @property
    def compression_policy(self):
        """
        Gets the compression_policy of this StoragePolicy.
        Specifies the compression setting to be applied to a Storage Domain (View Box). 'kCompressionNone' indicates that data is not compressed. 'kCompressionLow' indicates that data is compressed.

        :return: The compression_policy of this StoragePolicy.
        :rtype: str
        """
        return self._compression_policy

    @compression_policy.setter
    def compression_policy(self, compression_policy):
        """
        Sets the compression_policy of this StoragePolicy.
        Specifies the compression setting to be applied to a Storage Domain (View Box). 'kCompressionNone' indicates that data is not compressed. 'kCompressionLow' indicates that data is compressed.

        :param compression_policy: The compression_policy of this StoragePolicy.
        :type: str
        """
        allowed_values = ["kCompressionNone", "kCompressionLow"]
        if compression_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `compression_policy` ({0}), must be one of {1}"
                .format(compression_policy, allowed_values)
            )

        self._compression_policy = compression_policy

    @property
    def deduplicate_compress_delay_secs(self):
        """
        Gets the deduplicate_compress_delay_secs of this StoragePolicy.
        Specifies the time in seconds when deduplication and compression of data on the Storage Domain (View Box) starts. If set to 0, deduplication and compression is done inline (as the data is being written). Otherwise, post-process deduplication and compression is done after the specified delay.

        :return: The deduplicate_compress_delay_secs of this StoragePolicy.
        :rtype: int
        """
        return self._deduplicate_compress_delay_secs

    @deduplicate_compress_delay_secs.setter
    def deduplicate_compress_delay_secs(self, deduplicate_compress_delay_secs):
        """
        Sets the deduplicate_compress_delay_secs of this StoragePolicy.
        Specifies the time in seconds when deduplication and compression of data on the Storage Domain (View Box) starts. If set to 0, deduplication and compression is done inline (as the data is being written). Otherwise, post-process deduplication and compression is done after the specified delay.

        :param deduplicate_compress_delay_secs: The deduplicate_compress_delay_secs of this StoragePolicy.
        :type: int
        """

        self._deduplicate_compress_delay_secs = deduplicate_compress_delay_secs

    @property
    def deduplication_enabled(self):
        """
        Gets the deduplication_enabled of this StoragePolicy.
        Specifies if deduplication is enabled for the Storage Domain (View Box). If deduplication is enabled, the Cohesity Cluster eliminates duplicate blocks of repeating data stored on the Cluster thus reducing the amount of storage space needed to store data.

        :return: The deduplication_enabled of this StoragePolicy.
        :rtype: bool
        """
        return self._deduplication_enabled

    @deduplication_enabled.setter
    def deduplication_enabled(self, deduplication_enabled):
        """
        Sets the deduplication_enabled of this StoragePolicy.
        Specifies if deduplication is enabled for the Storage Domain (View Box). If deduplication is enabled, the Cohesity Cluster eliminates duplicate blocks of repeating data stored on the Cluster thus reducing the amount of storage space needed to store data.

        :param deduplication_enabled: The deduplication_enabled of this StoragePolicy.
        :type: bool
        """

        self._deduplication_enabled = deduplication_enabled

    @property
    def encryption_policy(self):
        """
        Gets the encryption_policy of this StoragePolicy.
        Specifies the encryption setting for the Storage Domain (View Box). 'kEncryptionNone' indicates the data is not encrypted. 'kEncryptionStrong' indicates the data is encrypted.

        :return: The encryption_policy of this StoragePolicy.
        :rtype: str
        """
        return self._encryption_policy

    @encryption_policy.setter
    def encryption_policy(self, encryption_policy):
        """
        Sets the encryption_policy of this StoragePolicy.
        Specifies the encryption setting for the Storage Domain (View Box). 'kEncryptionNone' indicates the data is not encrypted. 'kEncryptionStrong' indicates the data is encrypted.

        :param encryption_policy: The encryption_policy of this StoragePolicy.
        :type: str
        """
        allowed_values = ["kEncryptionNone", "kEncryptionStrong"]
        if encryption_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_policy` ({0}), must be one of {1}"
                .format(encryption_policy, allowed_values)
            )

        self._encryption_policy = encryption_policy

    @property
    def erasure_coding_info(self):
        """
        Gets the erasure_coding_info of this StoragePolicy.
        Specifies information about erasure coding algorithm if erasure coding is enabled.

        :return: The erasure_coding_info of this StoragePolicy.
        :rtype: ErasureCodingInfo
        """
        return self._erasure_coding_info

    @erasure_coding_info.setter
    def erasure_coding_info(self, erasure_coding_info):
        """
        Sets the erasure_coding_info of this StoragePolicy.
        Specifies information about erasure coding algorithm if erasure coding is enabled.

        :param erasure_coding_info: The erasure_coding_info of this StoragePolicy.
        :type: ErasureCodingInfo
        """

        self._erasure_coding_info = erasure_coding_info

    @property
    def inline_compress(self):
        """
        Gets the inline_compress of this StoragePolicy.
        Specifies if compression should occur inline (as the data is being written). This field is only relevant if compression is enabled. If deduplication is set to inline, Cohesity recommends setting compression to inline.

        :return: The inline_compress of this StoragePolicy.
        :rtype: bool
        """
        return self._inline_compress

    @inline_compress.setter
    def inline_compress(self, inline_compress):
        """
        Sets the inline_compress of this StoragePolicy.
        Specifies if compression should occur inline (as the data is being written). This field is only relevant if compression is enabled. If deduplication is set to inline, Cohesity recommends setting compression to inline.

        :param inline_compress: The inline_compress of this StoragePolicy.
        :type: bool
        """

        self._inline_compress = inline_compress

    @property
    def inline_deduplicate(self):
        """
        Gets the inline_deduplicate of this StoragePolicy.
        Specifies if deduplication should occur inline (as the data is being written). This field is only relevant if deduplication is enabled.

        :return: The inline_deduplicate of this StoragePolicy.
        :rtype: bool
        """
        return self._inline_deduplicate

    @inline_deduplicate.setter
    def inline_deduplicate(self, inline_deduplicate):
        """
        Sets the inline_deduplicate of this StoragePolicy.
        Specifies if deduplication should occur inline (as the data is being written). This field is only relevant if deduplication is enabled.

        :param inline_deduplicate: The inline_deduplicate of this StoragePolicy.
        :type: bool
        """

        self._inline_deduplicate = inline_deduplicate

    @property
    def num_failures_tolerated(self):
        """
        Gets the num_failures_tolerated of this StoragePolicy.
        Number of failures to tolerate. This is an optional field. Default value is 1 for cluster having 3 or more nodes. If erasure coding is not enabled, then this specifies the replication factor for the Storage Domain (View Box). For RF=2, number of failures to tolerate should be specified as 1. If erasure coding is enabled, then this value will be same as number of coded stripes.

        :return: The num_failures_tolerated of this StoragePolicy.
        :rtype: int
        """
        return self._num_failures_tolerated

    @num_failures_tolerated.setter
    def num_failures_tolerated(self, num_failures_tolerated):
        """
        Sets the num_failures_tolerated of this StoragePolicy.
        Number of failures to tolerate. This is an optional field. Default value is 1 for cluster having 3 or more nodes. If erasure coding is not enabled, then this specifies the replication factor for the Storage Domain (View Box). For RF=2, number of failures to tolerate should be specified as 1. If erasure coding is enabled, then this value will be same as number of coded stripes.

        :param num_failures_tolerated: The num_failures_tolerated of this StoragePolicy.
        :type: int
        """

        self._num_failures_tolerated = num_failures_tolerated

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
