# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EntitySchemaProtoTimeSeriesDescriptor(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, metric_descriptive_name=None, metric_name=None, metric_unit=None, raw_metric_publish_interval_hint_secs=None, time_to_live_secs=None, value_type=None):
        """
        EntitySchemaProtoTimeSeriesDescriptor - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'metric_descriptive_name': 'str',
            'metric_name': 'str',
            'metric_unit': 'EntitySchemaProtoTimeSeriesDescriptorMetricUnit',
            'raw_metric_publish_interval_hint_secs': 'int',
            'time_to_live_secs': 'int',
            'value_type': 'int'
        }

        self.attribute_map = {
            'metric_descriptive_name': 'metricDescriptiveName',
            'metric_name': 'metricName',
            'metric_unit': 'metricUnit',
            'raw_metric_publish_interval_hint_secs': 'rawMetricPublishIntervalHintSecs',
            'time_to_live_secs': 'timeToLiveSecs',
            'value_type': 'valueType'
        }

        self._metric_descriptive_name = metric_descriptive_name
        self._metric_name = metric_name
        self._metric_unit = metric_unit
        self._raw_metric_publish_interval_hint_secs = raw_metric_publish_interval_hint_secs
        self._time_to_live_secs = time_to_live_secs
        self._value_type = value_type

    @property
    def metric_descriptive_name(self):
        """
        Gets the metric_descriptive_name of this EntitySchemaProtoTimeSeriesDescriptor.
        Specifies a descriptive name for the metric that is displayed in the Advanced Diagnostics of the Cohesity Dashboard. For example for the 'kUnmorphedUsageBytes' metric, the descriptive name is \"Total Logical Space Used\".

        :return: The metric_descriptive_name of this EntitySchemaProtoTimeSeriesDescriptor.
        :rtype: str
        """
        return self._metric_descriptive_name

    @metric_descriptive_name.setter
    def metric_descriptive_name(self, metric_descriptive_name):
        """
        Sets the metric_descriptive_name of this EntitySchemaProtoTimeSeriesDescriptor.
        Specifies a descriptive name for the metric that is displayed in the Advanced Diagnostics of the Cohesity Dashboard. For example for the 'kUnmorphedUsageBytes' metric, the descriptive name is \"Total Logical Space Used\".

        :param metric_descriptive_name: The metric_descriptive_name of this EntitySchemaProtoTimeSeriesDescriptor.
        :type: str
        """

        self._metric_descriptive_name = metric_descriptive_name

    @property
    def metric_name(self):
        """
        Gets the metric_name of this EntitySchemaProtoTimeSeriesDescriptor.
        Specifies the name of the metric such as 'kUnmorphedUsageBytes'. It should be unique in an entity schema.

        :return: The metric_name of this EntitySchemaProtoTimeSeriesDescriptor.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """
        Sets the metric_name of this EntitySchemaProtoTimeSeriesDescriptor.
        Specifies the name of the metric such as 'kUnmorphedUsageBytes'. It should be unique in an entity schema.

        :param metric_name: The metric_name of this EntitySchemaProtoTimeSeriesDescriptor.
        :type: str
        """

        self._metric_name = metric_name

    @property
    def metric_unit(self):
        """
        Gets the metric_unit of this EntitySchemaProtoTimeSeriesDescriptor.


        :return: The metric_unit of this EntitySchemaProtoTimeSeriesDescriptor.
        :rtype: EntitySchemaProtoTimeSeriesDescriptorMetricUnit
        """
        return self._metric_unit

    @metric_unit.setter
    def metric_unit(self, metric_unit):
        """
        Sets the metric_unit of this EntitySchemaProtoTimeSeriesDescriptor.


        :param metric_unit: The metric_unit of this EntitySchemaProtoTimeSeriesDescriptor.
        :type: EntitySchemaProtoTimeSeriesDescriptorMetricUnit
        """

        self._metric_unit = metric_unit

    @property
    def raw_metric_publish_interval_hint_secs(self):
        """
        Gets the raw_metric_publish_interval_hint_secs of this EntitySchemaProtoTimeSeriesDescriptor.
        Specifies a suggestion for the interval to collect raw data points.

        :return: The raw_metric_publish_interval_hint_secs of this EntitySchemaProtoTimeSeriesDescriptor.
        :rtype: int
        """
        return self._raw_metric_publish_interval_hint_secs

    @raw_metric_publish_interval_hint_secs.setter
    def raw_metric_publish_interval_hint_secs(self, raw_metric_publish_interval_hint_secs):
        """
        Sets the raw_metric_publish_interval_hint_secs of this EntitySchemaProtoTimeSeriesDescriptor.
        Specifies a suggestion for the interval to collect raw data points.

        :param raw_metric_publish_interval_hint_secs: The raw_metric_publish_interval_hint_secs of this EntitySchemaProtoTimeSeriesDescriptor.
        :type: int
        """

        self._raw_metric_publish_interval_hint_secs = raw_metric_publish_interval_hint_secs

    @property
    def time_to_live_secs(self):
        """
        Gets the time_to_live_secs of this EntitySchemaProtoTimeSeriesDescriptor.
        Specifies how long the data point will be stored.

        :return: The time_to_live_secs of this EntitySchemaProtoTimeSeriesDescriptor.
        :rtype: int
        """
        return self._time_to_live_secs

    @time_to_live_secs.setter
    def time_to_live_secs(self, time_to_live_secs):
        """
        Sets the time_to_live_secs of this EntitySchemaProtoTimeSeriesDescriptor.
        Specifies how long the data point will be stored.

        :param time_to_live_secs: The time_to_live_secs of this EntitySchemaProtoTimeSeriesDescriptor.
        :type: int
        """

        self._time_to_live_secs = time_to_live_secs

    @property
    def value_type(self):
        """
        Gets the value_type of this EntitySchemaProtoTimeSeriesDescriptor.
        Specifies the value type for this metric. A metric of type 'string\" is not supported, instead use 'bytes'. Note that an aggregate metric of type 'bytes' is not supported. 0 specifies a value type of Int64. 1 specifies a value type of Double. 2 specifies a value type of String. 3 specifies a value type of Bytes.

        :return: The value_type of this EntitySchemaProtoTimeSeriesDescriptor.
        :rtype: int
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """
        Sets the value_type of this EntitySchemaProtoTimeSeriesDescriptor.
        Specifies the value type for this metric. A metric of type 'string\" is not supported, instead use 'bytes'. Note that an aggregate metric of type 'bytes' is not supported. 0 specifies a value type of Int64. 1 specifies a value type of Double. 2 specifies a value type of String. 3 specifies a value type of Bytes.

        :param value_type: The value_type of this EntitySchemaProtoTimeSeriesDescriptor.
        :type: int
        """

        self._value_type = value_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
