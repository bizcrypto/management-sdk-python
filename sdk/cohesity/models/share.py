# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Share(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, all_smb_mount_paths=None, nfs_mount_path=None, path=None, share_name=None, smb_mount_path=None, view_name=None):
        """
        Share - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'all_smb_mount_paths': 'list[str]',
            'nfs_mount_path': 'str',
            'path': 'str',
            'share_name': 'str',
            'smb_mount_path': 'str',
            'view_name': 'str'
        }

        self.attribute_map = {
            'all_smb_mount_paths': 'allSmbMountPaths',
            'nfs_mount_path': 'nfsMountPath',
            'path': 'path',
            'share_name': 'shareName',
            'smb_mount_path': 'smbMountPath',
            'view_name': 'viewName'
        }

        self._all_smb_mount_paths = all_smb_mount_paths
        self._nfs_mount_path = nfs_mount_path
        self._path = path
        self._share_name = share_name
        self._smb_mount_path = smb_mount_path
        self._view_name = view_name

    @property
    def all_smb_mount_paths(self):
        """
        Gets the all_smb_mount_paths of this Share.
        Specifies the possible paths that can be used to mount this Share as a SMB share. If Active Directory has multiple account names; each machine account has its own path.

        :return: The all_smb_mount_paths of this Share.
        :rtype: list[str]
        """
        return self._all_smb_mount_paths

    @all_smb_mount_paths.setter
    def all_smb_mount_paths(self, all_smb_mount_paths):
        """
        Sets the all_smb_mount_paths of this Share.
        Specifies the possible paths that can be used to mount this Share as a SMB share. If Active Directory has multiple account names; each machine account has its own path.

        :param all_smb_mount_paths: The all_smb_mount_paths of this Share.
        :type: list[str]
        """

        self._all_smb_mount_paths = all_smb_mount_paths

    @property
    def nfs_mount_path(self):
        """
        Gets the nfs_mount_path of this Share.
        Specifies the path for mounting this Share as an NFS share.

        :return: The nfs_mount_path of this Share.
        :rtype: str
        """
        return self._nfs_mount_path

    @nfs_mount_path.setter
    def nfs_mount_path(self, nfs_mount_path):
        """
        Sets the nfs_mount_path of this Share.
        Specifies the path for mounting this Share as an NFS share.

        :param nfs_mount_path: The nfs_mount_path of this Share.
        :type: str
        """

        self._nfs_mount_path = nfs_mount_path

    @property
    def path(self):
        """
        Gets the path of this Share.
        Specifies the path information for this share.

        :return: The path of this Share.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this Share.
        Specifies the path information for this share.

        :param path: The path of this Share.
        :type: str
        """

        self._path = path

    @property
    def share_name(self):
        """
        Gets the share_name of this Share.
        The name of the share.

        :return: The share_name of this Share.
        :rtype: str
        """
        return self._share_name

    @share_name.setter
    def share_name(self, share_name):
        """
        Sets the share_name of this Share.
        The name of the share.

        :param share_name: The share_name of this Share.
        :type: str
        """

        self._share_name = share_name

    @property
    def smb_mount_path(self):
        """
        Gets the smb_mount_path of this Share.
        Specifies the main path for mounting this Share as an SMB share.

        :return: The smb_mount_path of this Share.
        :rtype: str
        """
        return self._smb_mount_path

    @smb_mount_path.setter
    def smb_mount_path(self, smb_mount_path):
        """
        Sets the smb_mount_path of this Share.
        Specifies the main path for mounting this Share as an SMB share.

        :param smb_mount_path: The smb_mount_path of this Share.
        :type: str
        """

        self._smb_mount_path = smb_mount_path

    @property
    def view_name(self):
        """
        Gets the view_name of this Share.
        Specifies the view name this share belongs to.

        :return: The view_name of this Share.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """
        Sets the view_name of this Share.
        Specifies the view name this share belongs to.

        :param view_name: The view_name of this Share.
        :type: str
        """

        self._view_name = view_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
