# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MountVolumesParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bring_disks_online=None, password=None, target_source_id=None, username=None, volume_names=None):
        """
        MountVolumesParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bring_disks_online': 'bool',
            'password': 'str',
            'target_source_id': 'int',
            'username': 'str',
            'volume_names': 'list[str]'
        }

        self.attribute_map = {
            'bring_disks_online': 'bringDisksOnline',
            'password': 'password',
            'target_source_id': 'targetSourceId',
            'username': 'username',
            'volume_names': 'volumeNames'
        }

        self._bring_disks_online = bring_disks_online
        self._password = password
        self._target_source_id = target_source_id
        self._username = username
        self._volume_names = volume_names

    @property
    def bring_disks_online(self):
        """
        Gets the bring_disks_online of this MountVolumesParameters.
        Optional setting that determines if the volumes are brought online on the mount target after attaching the disks. This field is only set for VMs. The Cohesity Cluster always attempts to mount Physical servers. If true and the mount target is a VM, to mount the volumes VMware Tools must be installed on the guest operating system of the VM and login credentials to the mount target must be specified. NOTE: If automount is configured for a Windows system, the volumes may be automatically brought online.

        :return: The bring_disks_online of this MountVolumesParameters.
        :rtype: bool
        """
        return self._bring_disks_online

    @bring_disks_online.setter
    def bring_disks_online(self, bring_disks_online):
        """
        Sets the bring_disks_online of this MountVolumesParameters.
        Optional setting that determines if the volumes are brought online on the mount target after attaching the disks. This field is only set for VMs. The Cohesity Cluster always attempts to mount Physical servers. If true and the mount target is a VM, to mount the volumes VMware Tools must be installed on the guest operating system of the VM and login credentials to the mount target must be specified. NOTE: If automount is configured for a Windows system, the volumes may be automatically brought online.

        :param bring_disks_online: The bring_disks_online of this MountVolumesParameters.
        :type: bool
        """

        self._bring_disks_online = bring_disks_online

    @property
    def password(self):
        """
        Gets the password of this MountVolumesParameters.
        Specifies password of the username to access the target source.

        :return: The password of this MountVolumesParameters.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this MountVolumesParameters.
        Specifies password of the username to access the target source.

        :param password: The password of this MountVolumesParameters.
        :type: str
        """

        self._password = password

    @property
    def target_source_id(self):
        """
        Gets the target_source_id of this MountVolumesParameters.
        Specifies the target Protection Source id where the volumes will be mounted. NOTE: The source that was backed up and the mount target must be the same type, for example if the source is a VMware VM, then the mount target must also be a VMware VM. The mount target must be registered on the Cohesity Cluster.

        :return: The target_source_id of this MountVolumesParameters.
        :rtype: int
        """
        return self._target_source_id

    @target_source_id.setter
    def target_source_id(self, target_source_id):
        """
        Sets the target_source_id of this MountVolumesParameters.
        Specifies the target Protection Source id where the volumes will be mounted. NOTE: The source that was backed up and the mount target must be the same type, for example if the source is a VMware VM, then the mount target must also be a VMware VM. The mount target must be registered on the Cohesity Cluster.

        :param target_source_id: The target_source_id of this MountVolumesParameters.
        :type: int
        """

        self._target_source_id = target_source_id

    @property
    def username(self):
        """
        Gets the username of this MountVolumesParameters.
        Specifies username to access the target source.

        :return: The username of this MountVolumesParameters.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this MountVolumesParameters.
        Specifies username to access the target source.

        :param username: The username of this MountVolumesParameters.
        :type: str
        """

        self._username = username

    @property
    def volume_names(self):
        """
        Gets the volume_names of this MountVolumesParameters.
        Optionally specify the names of volumes to mount. If none are specified, all volumes of the Server are mounted on the target. To get the names of the volumes, call the GET /public/restore/vms/volumesInformation operation.

        :return: The volume_names of this MountVolumesParameters.
        :rtype: list[str]
        """
        return self._volume_names

    @volume_names.setter
    def volume_names(self, volume_names):
        """
        Sets the volume_names of this MountVolumesParameters.
        Optionally specify the names of volumes to mount. If none are specified, all volumes of the Server are mounted on the target. To get the names of the volumes, call the GET /public/restore/vms/volumesInformation operation.

        :param volume_names: The volume_names of this MountVolumesParameters.
        :type: list[str]
        """

        self._volume_names = volume_names

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
