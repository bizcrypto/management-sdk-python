# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TableOfContents(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, active_directory=None, cluster=None, group=None, partition=None, principal_source=None, protection_job=None, protection_policy=None, protection_source=None, remote_cluster=None, role=None, sql=None, user=None, vault=None, view=None, view_box=None):
        """
        TableOfContents - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'active_directory': 'list[str]',
            'cluster': 'list[int]',
            'group': 'list[str]',
            'partition': 'list[int]',
            'principal_source': 'list[str]',
            'protection_job': 'list[int]',
            'protection_policy': 'list[str]',
            'protection_source': 'list[int]',
            'remote_cluster': 'list[int]',
            'role': 'list[str]',
            'sql': 'list[int]',
            'user': 'list[str]',
            'vault': 'list[int]',
            'view': 'list[int]',
            'view_box': 'list[int]'
        }

        self.attribute_map = {
            'active_directory': 'activeDirectory',
            'cluster': 'cluster',
            'group': 'group',
            'partition': 'partition',
            'principal_source': 'principalSource',
            'protection_job': 'protectionJob',
            'protection_policy': 'protectionPolicy',
            'protection_source': 'protectionSource',
            'remote_cluster': 'remoteCluster',
            'role': 'role',
            'sql': 'sql',
            'user': 'user',
            'vault': 'vault',
            'view': 'view',
            'view_box': 'viewBox'
        }

        self._active_directory = active_directory
        self._cluster = cluster
        self._group = group
        self._partition = partition
        self._principal_source = principal_source
        self._protection_job = protection_job
        self._protection_policy = protection_policy
        self._protection_source = protection_source
        self._remote_cluster = remote_cluster
        self._role = role
        self._sql = sql
        self._user = user
        self._vault = vault
        self._view = view
        self._view_box = view_box

    @property
    def active_directory(self):
        """
        Gets the active_directory of this TableOfContents.


        :return: The active_directory of this TableOfContents.
        :rtype: list[str]
        """
        return self._active_directory

    @active_directory.setter
    def active_directory(self, active_directory):
        """
        Sets the active_directory of this TableOfContents.


        :param active_directory: The active_directory of this TableOfContents.
        :type: list[str]
        """

        self._active_directory = active_directory

    @property
    def cluster(self):
        """
        Gets the cluster of this TableOfContents.


        :return: The cluster of this TableOfContents.
        :rtype: list[int]
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """
        Sets the cluster of this TableOfContents.


        :param cluster: The cluster of this TableOfContents.
        :type: list[int]
        """

        self._cluster = cluster

    @property
    def group(self):
        """
        Gets the group of this TableOfContents.


        :return: The group of this TableOfContents.
        :rtype: list[str]
        """
        return self._group

    @group.setter
    def group(self, group):
        """
        Sets the group of this TableOfContents.


        :param group: The group of this TableOfContents.
        :type: list[str]
        """

        self._group = group

    @property
    def partition(self):
        """
        Gets the partition of this TableOfContents.


        :return: The partition of this TableOfContents.
        :rtype: list[int]
        """
        return self._partition

    @partition.setter
    def partition(self, partition):
        """
        Sets the partition of this TableOfContents.


        :param partition: The partition of this TableOfContents.
        :type: list[int]
        """

        self._partition = partition

    @property
    def principal_source(self):
        """
        Gets the principal_source of this TableOfContents.


        :return: The principal_source of this TableOfContents.
        :rtype: list[str]
        """
        return self._principal_source

    @principal_source.setter
    def principal_source(self, principal_source):
        """
        Sets the principal_source of this TableOfContents.


        :param principal_source: The principal_source of this TableOfContents.
        :type: list[str]
        """

        self._principal_source = principal_source

    @property
    def protection_job(self):
        """
        Gets the protection_job of this TableOfContents.


        :return: The protection_job of this TableOfContents.
        :rtype: list[int]
        """
        return self._protection_job

    @protection_job.setter
    def protection_job(self, protection_job):
        """
        Sets the protection_job of this TableOfContents.


        :param protection_job: The protection_job of this TableOfContents.
        :type: list[int]
        """

        self._protection_job = protection_job

    @property
    def protection_policy(self):
        """
        Gets the protection_policy of this TableOfContents.


        :return: The protection_policy of this TableOfContents.
        :rtype: list[str]
        """
        return self._protection_policy

    @protection_policy.setter
    def protection_policy(self, protection_policy):
        """
        Sets the protection_policy of this TableOfContents.


        :param protection_policy: The protection_policy of this TableOfContents.
        :type: list[str]
        """

        self._protection_policy = protection_policy

    @property
    def protection_source(self):
        """
        Gets the protection_source of this TableOfContents.


        :return: The protection_source of this TableOfContents.
        :rtype: list[int]
        """
        return self._protection_source

    @protection_source.setter
    def protection_source(self, protection_source):
        """
        Sets the protection_source of this TableOfContents.


        :param protection_source: The protection_source of this TableOfContents.
        :type: list[int]
        """

        self._protection_source = protection_source

    @property
    def remote_cluster(self):
        """
        Gets the remote_cluster of this TableOfContents.


        :return: The remote_cluster of this TableOfContents.
        :rtype: list[int]
        """
        return self._remote_cluster

    @remote_cluster.setter
    def remote_cluster(self, remote_cluster):
        """
        Sets the remote_cluster of this TableOfContents.


        :param remote_cluster: The remote_cluster of this TableOfContents.
        :type: list[int]
        """

        self._remote_cluster = remote_cluster

    @property
    def role(self):
        """
        Gets the role of this TableOfContents.


        :return: The role of this TableOfContents.
        :rtype: list[str]
        """
        return self._role

    @role.setter
    def role(self, role):
        """
        Sets the role of this TableOfContents.


        :param role: The role of this TableOfContents.
        :type: list[str]
        """

        self._role = role

    @property
    def sql(self):
        """
        Gets the sql of this TableOfContents.


        :return: The sql of this TableOfContents.
        :rtype: list[int]
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """
        Sets the sql of this TableOfContents.


        :param sql: The sql of this TableOfContents.
        :type: list[int]
        """

        self._sql = sql

    @property
    def user(self):
        """
        Gets the user of this TableOfContents.


        :return: The user of this TableOfContents.
        :rtype: list[str]
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this TableOfContents.


        :param user: The user of this TableOfContents.
        :type: list[str]
        """

        self._user = user

    @property
    def vault(self):
        """
        Gets the vault of this TableOfContents.


        :return: The vault of this TableOfContents.
        :rtype: list[int]
        """
        return self._vault

    @vault.setter
    def vault(self, vault):
        """
        Sets the vault of this TableOfContents.


        :param vault: The vault of this TableOfContents.
        :type: list[int]
        """

        self._vault = vault

    @property
    def view(self):
        """
        Gets the view of this TableOfContents.


        :return: The view of this TableOfContents.
        :rtype: list[int]
        """
        return self._view

    @view.setter
    def view(self, view):
        """
        Sets the view of this TableOfContents.


        :param view: The view of this TableOfContents.
        :type: list[int]
        """

        self._view = view

    @property
    def view_box(self):
        """
        Gets the view_box of this TableOfContents.


        :return: The view_box of this TableOfContents.
        :rtype: list[int]
        """
        return self._view_box

    @view_box.setter
    def view_box(self, view_box):
        """
        Sets the view_box of this TableOfContents.


        :param view_box: The view_box of this TableOfContents.
        :type: list[int]
        """

        self._view_box = view_box

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
