# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AggregatedSubtreeInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, environment=None, leaves_count=None, total_logical_size=None):
        """
        AggregatedSubtreeInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'environment': 'str',
            'leaves_count': 'int',
            'total_logical_size': 'int'
        }

        self.attribute_map = {
            'environment': 'environment',
            'leaves_count': 'leavesCount',
            'total_logical_size': 'totalLogicalSize'
        }

        self._environment = environment
        self._leaves_count = leaves_count
        self._total_logical_size = total_logical_size

    @property
    def environment(self):
        """
        Gets the environment of this AggregatedSubtreeInfo.
        Specifies the environment such as 'kSQL' or 'kVMware', where the Protection Source exists. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :return: The environment of this AggregatedSubtreeInfo.
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this AggregatedSubtreeInfo.
        Specifies the environment such as 'kSQL' or 'kVMware', where the Protection Source exists. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.

        :param environment: The environment of this AggregatedSubtreeInfo.
        :type: str
        """
        allowed_values = ["kVMware", "kSQL", "kView", "kPuppeteer", "kPhysical", "kPure", "kNetapp", "kGenericNas", "kHyperV", "kAcropolis", "kAzure"]
        if environment not in allowed_values:
            raise ValueError(
                "Invalid value for `environment` ({0}), must be one of {1}"
                .format(environment, allowed_values)
            )

        self._environment = environment

    @property
    def leaves_count(self):
        """
        Gets the leaves_count of this AggregatedSubtreeInfo.
        Specifies the number of leaf nodes under the subtree of this node.

        :return: The leaves_count of this AggregatedSubtreeInfo.
        :rtype: int
        """
        return self._leaves_count

    @leaves_count.setter
    def leaves_count(self, leaves_count):
        """
        Sets the leaves_count of this AggregatedSubtreeInfo.
        Specifies the number of leaf nodes under the subtree of this node.

        :param leaves_count: The leaves_count of this AggregatedSubtreeInfo.
        :type: int
        """

        self._leaves_count = leaves_count

    @property
    def total_logical_size(self):
        """
        Gets the total_logical_size of this AggregatedSubtreeInfo.
        Specifies the total logical size of the data under the subtree of this node.

        :return: The total_logical_size of this AggregatedSubtreeInfo.
        :rtype: int
        """
        return self._total_logical_size

    @total_logical_size.setter
    def total_logical_size(self, total_logical_size):
        """
        Sets the total_logical_size of this AggregatedSubtreeInfo.
        Specifies the total logical size of the data under the subtree of this node.

        :param total_logical_size: The total_logical_size of this AggregatedSubtreeInfo.
        :type: int
        """

        self._total_logical_size = total_logical_size

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
