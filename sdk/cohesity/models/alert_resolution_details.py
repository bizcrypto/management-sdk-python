# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AlertResolutionDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, resolution_details=None, resolution_id=None, resolution_summary=None, timestamp_usecs=None, user_name=None):
        """
        AlertResolutionDetails - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'resolution_details': 'str',
            'resolution_id': 'int',
            'resolution_summary': 'str',
            'timestamp_usecs': 'int',
            'user_name': 'str'
        }

        self.attribute_map = {
            'resolution_details': 'resolutionDetails',
            'resolution_id': 'resolutionId',
            'resolution_summary': 'resolutionSummary',
            'timestamp_usecs': 'timestampUsecs',
            'user_name': 'userName'
        }

        self._resolution_details = resolution_details
        self._resolution_id = resolution_id
        self._resolution_summary = resolution_summary
        self._timestamp_usecs = timestamp_usecs
        self._user_name = user_name

    @property
    def resolution_details(self):
        """
        Gets the resolution_details of this AlertResolutionDetails.
        Detailed notes about the Resolution.

        :return: The resolution_details of this AlertResolutionDetails.
        :rtype: str
        """
        return self._resolution_details

    @resolution_details.setter
    def resolution_details(self, resolution_details):
        """
        Sets the resolution_details of this AlertResolutionDetails.
        Detailed notes about the Resolution.

        :param resolution_details: The resolution_details of this AlertResolutionDetails.
        :type: str
        """

        self._resolution_details = resolution_details

    @property
    def resolution_id(self):
        """
        Gets the resolution_id of this AlertResolutionDetails.
        Unique id assigned by the Cohesity Cluster for this Resolution.

        :return: The resolution_id of this AlertResolutionDetails.
        :rtype: int
        """
        return self._resolution_id

    @resolution_id.setter
    def resolution_id(self, resolution_id):
        """
        Sets the resolution_id of this AlertResolutionDetails.
        Unique id assigned by the Cohesity Cluster for this Resolution.

        :param resolution_id: The resolution_id of this AlertResolutionDetails.
        :type: int
        """

        self._resolution_id = resolution_id

    @property
    def resolution_summary(self):
        """
        Gets the resolution_summary of this AlertResolutionDetails.
        Short description about the Resolution.

        :return: The resolution_summary of this AlertResolutionDetails.
        :rtype: str
        """
        return self._resolution_summary

    @resolution_summary.setter
    def resolution_summary(self, resolution_summary):
        """
        Sets the resolution_summary of this AlertResolutionDetails.
        Short description about the Resolution.

        :param resolution_summary: The resolution_summary of this AlertResolutionDetails.
        :type: str
        """

        self._resolution_summary = resolution_summary

    @property
    def timestamp_usecs(self):
        """
        Gets the timestamp_usecs of this AlertResolutionDetails.
        Unix epoch timestamp (in microseconds) when the Alerts were resolved.

        :return: The timestamp_usecs of this AlertResolutionDetails.
        :rtype: int
        """
        return self._timestamp_usecs

    @timestamp_usecs.setter
    def timestamp_usecs(self, timestamp_usecs):
        """
        Sets the timestamp_usecs of this AlertResolutionDetails.
        Unix epoch timestamp (in microseconds) when the Alerts were resolved.

        :param timestamp_usecs: The timestamp_usecs of this AlertResolutionDetails.
        :type: int
        """

        self._timestamp_usecs = timestamp_usecs

    @property
    def user_name(self):
        """
        Gets the user_name of this AlertResolutionDetails.
        Name of the Cohesity Cluster user who resolved the Alerts.

        :return: The user_name of this AlertResolutionDetails.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this AlertResolutionDetails.
        Name of the Cohesity Cluster user who resolved the Alerts.

        :param user_name: The user_name of this AlertResolutionDetails.
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
