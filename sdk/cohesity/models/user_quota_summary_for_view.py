# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UserQuotaSummaryForView(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, default_user_quota_policy=None, num_users_above_alert_threshold=None, num_users_above_hard_limit=None, total_num_users=None):
        """
        UserQuotaSummaryForView - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'default_user_quota_policy': 'QuotaPolicy',
            'num_users_above_alert_threshold': 'int',
            'num_users_above_hard_limit': 'int',
            'total_num_users': 'int'
        }

        self.attribute_map = {
            'default_user_quota_policy': 'defaultUserQuotaPolicy',
            'num_users_above_alert_threshold': 'numUsersAboveAlertThreshold',
            'num_users_above_hard_limit': 'numUsersAboveHardLimit',
            'total_num_users': 'totalNumUsers'
        }

        self._default_user_quota_policy = default_user_quota_policy
        self._num_users_above_alert_threshold = num_users_above_alert_threshold
        self._num_users_above_hard_limit = num_users_above_hard_limit
        self._total_num_users = total_num_users

    @property
    def default_user_quota_policy(self):
        """
        Gets the default_user_quota_policy of this UserQuotaSummaryForView.
        Default quota policy applied to all the users in the view who doesn't have a policy override.

        :return: The default_user_quota_policy of this UserQuotaSummaryForView.
        :rtype: QuotaPolicy
        """
        return self._default_user_quota_policy

    @default_user_quota_policy.setter
    def default_user_quota_policy(self, default_user_quota_policy):
        """
        Sets the default_user_quota_policy of this UserQuotaSummaryForView.
        Default quota policy applied to all the users in the view who doesn't have a policy override.

        :param default_user_quota_policy: The default_user_quota_policy of this UserQuotaSummaryForView.
        :type: QuotaPolicy
        """

        self._default_user_quota_policy = default_user_quota_policy

    @property
    def num_users_above_alert_threshold(self):
        """
        Gets the num_users_above_alert_threshold of this UserQuotaSummaryForView.
        Number of users who has exceeded their specified alert limit.

        :return: The num_users_above_alert_threshold of this UserQuotaSummaryForView.
        :rtype: int
        """
        return self._num_users_above_alert_threshold

    @num_users_above_alert_threshold.setter
    def num_users_above_alert_threshold(self, num_users_above_alert_threshold):
        """
        Sets the num_users_above_alert_threshold of this UserQuotaSummaryForView.
        Number of users who has exceeded their specified alert limit.

        :param num_users_above_alert_threshold: The num_users_above_alert_threshold of this UserQuotaSummaryForView.
        :type: int
        """

        self._num_users_above_alert_threshold = num_users_above_alert_threshold

    @property
    def num_users_above_hard_limit(self):
        """
        Gets the num_users_above_hard_limit of this UserQuotaSummaryForView.
        Number of users who has exceeded their specified quota hard limit.

        :return: The num_users_above_hard_limit of this UserQuotaSummaryForView.
        :rtype: int
        """
        return self._num_users_above_hard_limit

    @num_users_above_hard_limit.setter
    def num_users_above_hard_limit(self, num_users_above_hard_limit):
        """
        Sets the num_users_above_hard_limit of this UserQuotaSummaryForView.
        Number of users who has exceeded their specified quota hard limit.

        :param num_users_above_hard_limit: The num_users_above_hard_limit of this UserQuotaSummaryForView.
        :type: int
        """

        self._num_users_above_hard_limit = num_users_above_hard_limit

    @property
    def total_num_users(self):
        """
        Gets the total_num_users of this UserQuotaSummaryForView.
        Total number of users who has either a user quota policy override specified or has non-zero logical usage.

        :return: The total_num_users of this UserQuotaSummaryForView.
        :rtype: int
        """
        return self._total_num_users

    @total_num_users.setter
    def total_num_users(self, total_num_users):
        """
        Sets the total_num_users of this UserQuotaSummaryForView.
        Total number of users who has either a user quota policy override specified or has non-zero logical usage.

        :param total_num_users: The total_num_users of this UserQuotaSummaryForView.
        :type: int
        """

        self._total_num_users = total_num_users

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
