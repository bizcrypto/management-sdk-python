# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RestoreFilesTaskRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, continue_on_error=None, filenames=None, name=None, new_base_directory=None, overwrite=None, password=None, preserve_attributes=None, source_object_info=None, target_host_type=None, target_parent_source_id=None, target_source_id=None, username=None):
        """
        RestoreFilesTaskRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'continue_on_error': 'bool',
            'filenames': 'list[str]',
            'name': 'str',
            'new_base_directory': 'str',
            'overwrite': 'bool',
            'password': 'str',
            'preserve_attributes': 'bool',
            'source_object_info': 'RestoreFilesTaskRequestSourceObjectInfo',
            'target_host_type': 'str',
            'target_parent_source_id': 'int',
            'target_source_id': 'int',
            'username': 'str'
        }

        self.attribute_map = {
            'continue_on_error': 'continueOnError',
            'filenames': 'filenames',
            'name': 'name',
            'new_base_directory': 'newBaseDirectory',
            'overwrite': 'overwrite',
            'password': 'password',
            'preserve_attributes': 'preserveAttributes',
            'source_object_info': 'sourceObjectInfo',
            'target_host_type': 'targetHostType',
            'target_parent_source_id': 'targetParentSourceId',
            'target_source_id': 'targetSourceId',
            'username': 'username'
        }

        self._continue_on_error = continue_on_error
        self._filenames = filenames
        self._name = name
        self._new_base_directory = new_base_directory
        self._overwrite = overwrite
        self._password = password
        self._preserve_attributes = preserve_attributes
        self._source_object_info = source_object_info
        self._target_host_type = target_host_type
        self._target_parent_source_id = target_parent_source_id
        self._target_source_id = target_source_id
        self._username = username

    @property
    def continue_on_error(self):
        """
        Gets the continue_on_error of this RestoreFilesTaskRequest.
        Specifies if the Restore Task should continue even if the copy operation of some files and folders fails. If true, the Cohesity Cluster ignores intermittent errors and recovers as many files and folders as possible. If false, the Restore Task stops recovering when a copy operation fails.

        :return: The continue_on_error of this RestoreFilesTaskRequest.
        :rtype: bool
        """
        return self._continue_on_error

    @continue_on_error.setter
    def continue_on_error(self, continue_on_error):
        """
        Sets the continue_on_error of this RestoreFilesTaskRequest.
        Specifies if the Restore Task should continue even if the copy operation of some files and folders fails. If true, the Cohesity Cluster ignores intermittent errors and recovers as many files and folders as possible. If false, the Restore Task stops recovering when a copy operation fails.

        :param continue_on_error: The continue_on_error of this RestoreFilesTaskRequest.
        :type: bool
        """

        self._continue_on_error = continue_on_error

    @property
    def filenames(self):
        """
        Gets the filenames of this RestoreFilesTaskRequest.
        Specifies the files and folders to recover from the snapshot.

        :return: The filenames of this RestoreFilesTaskRequest.
        :rtype: list[str]
        """
        return self._filenames

    @filenames.setter
    def filenames(self, filenames):
        """
        Sets the filenames of this RestoreFilesTaskRequest.
        Specifies the files and folders to recover from the snapshot.

        :param filenames: The filenames of this RestoreFilesTaskRequest.
        :type: list[str]
        """

        self._filenames = filenames

    @property
    def name(self):
        """
        Gets the name of this RestoreFilesTaskRequest.
        Specifies the name of the Restore Task. This field must be set and must be a unique name.

        :return: The name of this RestoreFilesTaskRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this RestoreFilesTaskRequest.
        Specifies the name of the Restore Task. This field must be set and must be a unique name.

        :param name: The name of this RestoreFilesTaskRequest.
        :type: str
        """

        self._name = name

    @property
    def new_base_directory(self):
        """
        Gets the new_base_directory of this RestoreFilesTaskRequest.
        Specifies an optional root folder where to recover the selected files and folders. By default, files and folders are restored to their original path.

        :return: The new_base_directory of this RestoreFilesTaskRequest.
        :rtype: str
        """
        return self._new_base_directory

    @new_base_directory.setter
    def new_base_directory(self, new_base_directory):
        """
        Sets the new_base_directory of this RestoreFilesTaskRequest.
        Specifies an optional root folder where to recover the selected files and folders. By default, files and folders are restored to their original path.

        :param new_base_directory: The new_base_directory of this RestoreFilesTaskRequest.
        :type: str
        """

        self._new_base_directory = new_base_directory

    @property
    def overwrite(self):
        """
        Gets the overwrite of this RestoreFilesTaskRequest.
        If true, any existing files and folders on the operating system are overwritten by the recovered files or folders. This is the default. If false, existing files and folders are not overwritten.

        :return: The overwrite of this RestoreFilesTaskRequest.
        :rtype: bool
        """
        return self._overwrite

    @overwrite.setter
    def overwrite(self, overwrite):
        """
        Sets the overwrite of this RestoreFilesTaskRequest.
        If true, any existing files and folders on the operating system are overwritten by the recovered files or folders. This is the default. If false, existing files and folders are not overwritten.

        :param overwrite: The overwrite of this RestoreFilesTaskRequest.
        :type: bool
        """

        self._overwrite = overwrite

    @property
    def password(self):
        """
        Gets the password of this RestoreFilesTaskRequest.
        Specifies password of the username to access the target source.

        :return: The password of this RestoreFilesTaskRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this RestoreFilesTaskRequest.
        Specifies password of the username to access the target source.

        :param password: The password of this RestoreFilesTaskRequest.
        :type: str
        """

        self._password = password

    @property
    def preserve_attributes(self):
        """
        Gets the preserve_attributes of this RestoreFilesTaskRequest.
        If true, the Restore Tasks preserves the original file and folder attributes. This is the default.

        :return: The preserve_attributes of this RestoreFilesTaskRequest.
        :rtype: bool
        """
        return self._preserve_attributes

    @preserve_attributes.setter
    def preserve_attributes(self, preserve_attributes):
        """
        Sets the preserve_attributes of this RestoreFilesTaskRequest.
        If true, the Restore Tasks preserves the original file and folder attributes. This is the default.

        :param preserve_attributes: The preserve_attributes of this RestoreFilesTaskRequest.
        :type: bool
        """

        self._preserve_attributes = preserve_attributes

    @property
    def source_object_info(self):
        """
        Gets the source_object_info of this RestoreFilesTaskRequest.


        :return: The source_object_info of this RestoreFilesTaskRequest.
        :rtype: RestoreFilesTaskRequestSourceObjectInfo
        """
        return self._source_object_info

    @source_object_info.setter
    def source_object_info(self, source_object_info):
        """
        Sets the source_object_info of this RestoreFilesTaskRequest.


        :param source_object_info: The source_object_info of this RestoreFilesTaskRequest.
        :type: RestoreFilesTaskRequestSourceObjectInfo
        """

        self._source_object_info = source_object_info

    @property
    def target_host_type(self):
        """
        Gets the target_host_type of this RestoreFilesTaskRequest.
        Specifies the target host types to be restored. 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system.

        :return: The target_host_type of this RestoreFilesTaskRequest.
        :rtype: str
        """
        return self._target_host_type

    @target_host_type.setter
    def target_host_type(self, target_host_type):
        """
        Sets the target_host_type of this RestoreFilesTaskRequest.
        Specifies the target host types to be restored. 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system.

        :param target_host_type: The target_host_type of this RestoreFilesTaskRequest.
        :type: str
        """
        allowed_values = ["kLinux", "kWindows"]
        if target_host_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_host_type` ({0}), must be one of {1}"
                .format(target_host_type, allowed_values)
            )

        self._target_host_type = target_host_type

    @property
    def target_parent_source_id(self):
        """
        Gets the target_parent_source_id of this RestoreFilesTaskRequest.
        Specifies the registered source (such as a vCenter Server) that contains the target protection source (such as a VM) where the files and folders are recovered to. This field is not required for a Physical Server.

        :return: The target_parent_source_id of this RestoreFilesTaskRequest.
        :rtype: int
        """
        return self._target_parent_source_id

    @target_parent_source_id.setter
    def target_parent_source_id(self, target_parent_source_id):
        """
        Sets the target_parent_source_id of this RestoreFilesTaskRequest.
        Specifies the registered source (such as a vCenter Server) that contains the target protection source (such as a VM) where the files and folders are recovered to. This field is not required for a Physical Server.

        :param target_parent_source_id: The target_parent_source_id of this RestoreFilesTaskRequest.
        :type: int
        """

        self._target_parent_source_id = target_parent_source_id

    @property
    def target_source_id(self):
        """
        Gets the target_source_id of this RestoreFilesTaskRequest.
        Specifies the id of the target protection source (such as a VM) where the files and folders are recovered to.

        :return: The target_source_id of this RestoreFilesTaskRequest.
        :rtype: int
        """
        return self._target_source_id

    @target_source_id.setter
    def target_source_id(self, target_source_id):
        """
        Sets the target_source_id of this RestoreFilesTaskRequest.
        Specifies the id of the target protection source (such as a VM) where the files and folders are recovered to.

        :param target_source_id: The target_source_id of this RestoreFilesTaskRequest.
        :type: int
        """

        self._target_source_id = target_source_id

    @property
    def username(self):
        """
        Gets the username of this RestoreFilesTaskRequest.
        Specifies username to access the target source.

        :return: The username of this RestoreFilesTaskRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this RestoreFilesTaskRequest.
        Specifies username to access the target source.

        :param username: The username of this RestoreFilesTaskRequest.
        :type: str
        """

        self._username = username

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
