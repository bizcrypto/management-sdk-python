# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VmwareEnvJobParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, excluded_disks=None, fallback_to_crash_consistent=None, skip_physical_rdm_disks=None):
        """
        VmwareEnvJobParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'excluded_disks': 'list[DiskUnit]',
            'fallback_to_crash_consistent': 'bool',
            'skip_physical_rdm_disks': 'bool'
        }

        self.attribute_map = {
            'excluded_disks': 'excludedDisks',
            'fallback_to_crash_consistent': 'fallbackToCrashConsistent',
            'skip_physical_rdm_disks': 'skipPhysicalRdmDisks'
        }

        self._excluded_disks = excluded_disks
        self._fallback_to_crash_consistent = fallback_to_crash_consistent
        self._skip_physical_rdm_disks = skip_physical_rdm_disks

    @property
    def excluded_disks(self):
        """
        Gets the excluded_disks of this VmwareEnvJobParameters.
        Specifies the list of Disks to be excluded from backing up. These disks are excluded from all Protection Sources in the Protection Job.

        :return: The excluded_disks of this VmwareEnvJobParameters.
        :rtype: list[DiskUnit]
        """
        return self._excluded_disks

    @excluded_disks.setter
    def excluded_disks(self, excluded_disks):
        """
        Sets the excluded_disks of this VmwareEnvJobParameters.
        Specifies the list of Disks to be excluded from backing up. These disks are excluded from all Protection Sources in the Protection Job.

        :param excluded_disks: The excluded_disks of this VmwareEnvJobParameters.
        :type: list[DiskUnit]
        """

        self._excluded_disks = excluded_disks

    @property
    def fallback_to_crash_consistent(self):
        """
        Gets the fallback_to_crash_consistent of this VmwareEnvJobParameters.
        If true, takes a crash-consistent snapshot when app-consistent snapshot fails. Otherwise, the snapshot attempt is marked failed.

        :return: The fallback_to_crash_consistent of this VmwareEnvJobParameters.
        :rtype: bool
        """
        return self._fallback_to_crash_consistent

    @fallback_to_crash_consistent.setter
    def fallback_to_crash_consistent(self, fallback_to_crash_consistent):
        """
        Sets the fallback_to_crash_consistent of this VmwareEnvJobParameters.
        If true, takes a crash-consistent snapshot when app-consistent snapshot fails. Otherwise, the snapshot attempt is marked failed.

        :param fallback_to_crash_consistent: The fallback_to_crash_consistent of this VmwareEnvJobParameters.
        :type: bool
        """

        self._fallback_to_crash_consistent = fallback_to_crash_consistent

    @property
    def skip_physical_rdm_disks(self):
        """
        Gets the skip_physical_rdm_disks of this VmwareEnvJobParameters.
        If true, skip physical RDM disks when backing up VMs. Otherwise, backup of VMs having physical RDM will fail.

        :return: The skip_physical_rdm_disks of this VmwareEnvJobParameters.
        :rtype: bool
        """
        return self._skip_physical_rdm_disks

    @skip_physical_rdm_disks.setter
    def skip_physical_rdm_disks(self, skip_physical_rdm_disks):
        """
        Sets the skip_physical_rdm_disks of this VmwareEnvJobParameters.
        If true, skip physical RDM disks when backing up VMs. Otherwise, backup of VMs having physical RDM will fail.

        :param skip_physical_rdm_disks: The skip_physical_rdm_disks of this VmwareEnvJobParameters.
        :type: bool
        """

        self._skip_physical_rdm_disks = skip_physical_rdm_disks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
