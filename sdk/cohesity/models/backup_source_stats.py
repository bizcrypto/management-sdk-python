# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BackupSourceStats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, admitted_time_usecs=None, end_time_usecs=None, start_time_usecs=None, time_taken_usecs=None, total_bytes_read_from_source=None, total_bytes_to_read_from_source=None, total_logical_backup_size_bytes=None, total_physical_backup_size_bytes=None, total_source_size_bytes=None):
        """
        BackupSourceStats - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'admitted_time_usecs': 'int',
            'end_time_usecs': 'int',
            'start_time_usecs': 'int',
            'time_taken_usecs': 'int',
            'total_bytes_read_from_source': 'int',
            'total_bytes_to_read_from_source': 'int',
            'total_logical_backup_size_bytes': 'int',
            'total_physical_backup_size_bytes': 'int',
            'total_source_size_bytes': 'int'
        }

        self.attribute_map = {
            'admitted_time_usecs': 'admittedTimeUsecs',
            'end_time_usecs': 'endTimeUsecs',
            'start_time_usecs': 'startTimeUsecs',
            'time_taken_usecs': 'timeTakenUsecs',
            'total_bytes_read_from_source': 'totalBytesReadFromSource',
            'total_bytes_to_read_from_source': 'totalBytesToReadFromSource',
            'total_logical_backup_size_bytes': 'totalLogicalBackupSizeBytes',
            'total_physical_backup_size_bytes': 'totalPhysicalBackupSizeBytes',
            'total_source_size_bytes': 'totalSourceSizeBytes'
        }

        self._admitted_time_usecs = admitted_time_usecs
        self._end_time_usecs = end_time_usecs
        self._start_time_usecs = start_time_usecs
        self._time_taken_usecs = time_taken_usecs
        self._total_bytes_read_from_source = total_bytes_read_from_source
        self._total_bytes_to_read_from_source = total_bytes_to_read_from_source
        self._total_logical_backup_size_bytes = total_logical_backup_size_bytes
        self._total_physical_backup_size_bytes = total_physical_backup_size_bytes
        self._total_source_size_bytes = total_source_size_bytes

    @property
    def admitted_time_usecs(self):
        """
        Gets the admitted_time_usecs of this BackupSourceStats.
        Specifies the time the task was unqueued from the queue to start running. This field can be used to determine the following times: initial-wait-time = admittedTimeUsecs - startTimeUsecs run-time = endTimeUsecs - admittedTimeUsecs If the task ends up waiting in other queues, then actual run-time will be smaller than the run-time computed this way. This field is only populated for Backup tasks currently.

        :return: The admitted_time_usecs of this BackupSourceStats.
        :rtype: int
        """
        return self._admitted_time_usecs

    @admitted_time_usecs.setter
    def admitted_time_usecs(self, admitted_time_usecs):
        """
        Sets the admitted_time_usecs of this BackupSourceStats.
        Specifies the time the task was unqueued from the queue to start running. This field can be used to determine the following times: initial-wait-time = admittedTimeUsecs - startTimeUsecs run-time = endTimeUsecs - admittedTimeUsecs If the task ends up waiting in other queues, then actual run-time will be smaller than the run-time computed this way. This field is only populated for Backup tasks currently.

        :param admitted_time_usecs: The admitted_time_usecs of this BackupSourceStats.
        :type: int
        """

        self._admitted_time_usecs = admitted_time_usecs

    @property
    def end_time_usecs(self):
        """
        Gets the end_time_usecs of this BackupSourceStats.
        Specifies the end time of the Protection Run. The end time is specified as a Unix epoch Timestamp (in microseconds).

        :return: The end_time_usecs of this BackupSourceStats.
        :rtype: int
        """
        return self._end_time_usecs

    @end_time_usecs.setter
    def end_time_usecs(self, end_time_usecs):
        """
        Sets the end_time_usecs of this BackupSourceStats.
        Specifies the end time of the Protection Run. The end time is specified as a Unix epoch Timestamp (in microseconds).

        :param end_time_usecs: The end_time_usecs of this BackupSourceStats.
        :type: int
        """

        self._end_time_usecs = end_time_usecs

    @property
    def start_time_usecs(self):
        """
        Gets the start_time_usecs of this BackupSourceStats.
        Specifies the start time of the Protection Run. The start time is specified as a Unix epoch Timestamp (in microseconds). This time is when the task is queued to an internal queue where tasks are waiting to run.

        :return: The start_time_usecs of this BackupSourceStats.
        :rtype: int
        """
        return self._start_time_usecs

    @start_time_usecs.setter
    def start_time_usecs(self, start_time_usecs):
        """
        Sets the start_time_usecs of this BackupSourceStats.
        Specifies the start time of the Protection Run. The start time is specified as a Unix epoch Timestamp (in microseconds). This time is when the task is queued to an internal queue where tasks are waiting to run.

        :param start_time_usecs: The start_time_usecs of this BackupSourceStats.
        :type: int
        """

        self._start_time_usecs = start_time_usecs

    @property
    def time_taken_usecs(self):
        """
        Gets the time_taken_usecs of this BackupSourceStats.
        Specifies the actual execution time for the protection run to complete the backup task and the copy tasks. This time will not include the time waited in various internal queues. This field is only populated for Backup tasks currently.

        :return: The time_taken_usecs of this BackupSourceStats.
        :rtype: int
        """
        return self._time_taken_usecs

    @time_taken_usecs.setter
    def time_taken_usecs(self, time_taken_usecs):
        """
        Sets the time_taken_usecs of this BackupSourceStats.
        Specifies the actual execution time for the protection run to complete the backup task and the copy tasks. This time will not include the time waited in various internal queues. This field is only populated for Backup tasks currently.

        :param time_taken_usecs: The time_taken_usecs of this BackupSourceStats.
        :type: int
        """

        self._time_taken_usecs = time_taken_usecs

    @property
    def total_bytes_read_from_source(self):
        """
        Gets the total_bytes_read_from_source of this BackupSourceStats.
        Specifies the total amount of data read from the source (so far).

        :return: The total_bytes_read_from_source of this BackupSourceStats.
        :rtype: int
        """
        return self._total_bytes_read_from_source

    @total_bytes_read_from_source.setter
    def total_bytes_read_from_source(self, total_bytes_read_from_source):
        """
        Sets the total_bytes_read_from_source of this BackupSourceStats.
        Specifies the total amount of data read from the source (so far).

        :param total_bytes_read_from_source: The total_bytes_read_from_source of this BackupSourceStats.
        :type: int
        """

        self._total_bytes_read_from_source = total_bytes_read_from_source

    @property
    def total_bytes_to_read_from_source(self):
        """
        Gets the total_bytes_to_read_from_source of this BackupSourceStats.
        Specifies the total amount of data expected to be read from the source.

        :return: The total_bytes_to_read_from_source of this BackupSourceStats.
        :rtype: int
        """
        return self._total_bytes_to_read_from_source

    @total_bytes_to_read_from_source.setter
    def total_bytes_to_read_from_source(self, total_bytes_to_read_from_source):
        """
        Sets the total_bytes_to_read_from_source of this BackupSourceStats.
        Specifies the total amount of data expected to be read from the source.

        :param total_bytes_to_read_from_source: The total_bytes_to_read_from_source of this BackupSourceStats.
        :type: int
        """

        self._total_bytes_to_read_from_source = total_bytes_to_read_from_source

    @property
    def total_logical_backup_size_bytes(self):
        """
        Gets the total_logical_backup_size_bytes of this BackupSourceStats.
        Specifies the size of the source object (such as a VM) protected by this task on the primary storage after the snapshot is taken. The logical size of the data on the source if the data is fully hydrated or expanded and not reduced by change-block tracking, compression and deduplication.

        :return: The total_logical_backup_size_bytes of this BackupSourceStats.
        :rtype: int
        """
        return self._total_logical_backup_size_bytes

    @total_logical_backup_size_bytes.setter
    def total_logical_backup_size_bytes(self, total_logical_backup_size_bytes):
        """
        Sets the total_logical_backup_size_bytes of this BackupSourceStats.
        Specifies the size of the source object (such as a VM) protected by this task on the primary storage after the snapshot is taken. The logical size of the data on the source if the data is fully hydrated or expanded and not reduced by change-block tracking, compression and deduplication.

        :param total_logical_backup_size_bytes: The total_logical_backup_size_bytes of this BackupSourceStats.
        :type: int
        """

        self._total_logical_backup_size_bytes = total_logical_backup_size_bytes

    @property
    def total_physical_backup_size_bytes(self):
        """
        Gets the total_physical_backup_size_bytes of this BackupSourceStats.
        Specifies the total amount of physical space used on the Cohesity Cluster to store the protected object after being reduced by change-block tracking, compression and deduplication. For example, if the logical backup size is 1GB, but only 1MB was used on the Cohesity Cluster to store it, this field be equal to 1MB.

        :return: The total_physical_backup_size_bytes of this BackupSourceStats.
        :rtype: int
        """
        return self._total_physical_backup_size_bytes

    @total_physical_backup_size_bytes.setter
    def total_physical_backup_size_bytes(self, total_physical_backup_size_bytes):
        """
        Sets the total_physical_backup_size_bytes of this BackupSourceStats.
        Specifies the total amount of physical space used on the Cohesity Cluster to store the protected object after being reduced by change-block tracking, compression and deduplication. For example, if the logical backup size is 1GB, but only 1MB was used on the Cohesity Cluster to store it, this field be equal to 1MB.

        :param total_physical_backup_size_bytes: The total_physical_backup_size_bytes of this BackupSourceStats.
        :type: int
        """

        self._total_physical_backup_size_bytes = total_physical_backup_size_bytes

    @property
    def total_source_size_bytes(self):
        """
        Gets the total_source_size_bytes of this BackupSourceStats.
        Specifies the size of the source object (such as a VM) protected by this task on the primary storage before the snapshot is taken. The logical size of the data on the source if the data is fully hydrated or expanded and not reduced by change-block tracking, compression and deduplication.

        :return: The total_source_size_bytes of this BackupSourceStats.
        :rtype: int
        """
        return self._total_source_size_bytes

    @total_source_size_bytes.setter
    def total_source_size_bytes(self, total_source_size_bytes):
        """
        Sets the total_source_size_bytes of this BackupSourceStats.
        Specifies the size of the source object (such as a VM) protected by this task on the primary storage before the snapshot is taken. The logical size of the data on the source if the data is fully hydrated or expanded and not reduced by change-block tracking, compression and deduplication.

        :param total_source_size_bytes: The total_source_size_bytes of this BackupSourceStats.
        :type: int
        """

        self._total_source_size_bytes = total_source_size_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
