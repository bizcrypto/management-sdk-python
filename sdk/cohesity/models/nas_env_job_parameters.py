# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class NasEnvJobParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, continue_on_error=None, file_path_filters=None, nas_protocol=None):
        """
        NasEnvJobParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'continue_on_error': 'bool',
            'file_path_filters': 'FilePathFilter',
            'nas_protocol': 'str'
        }

        self.attribute_map = {
            'continue_on_error': 'continueOnError',
            'file_path_filters': 'filePathFilters',
            'nas_protocol': 'nasProtocol'
        }

        self._continue_on_error = continue_on_error
        self._file_path_filters = file_path_filters
        self._nas_protocol = nas_protocol

    @property
    def continue_on_error(self):
        """
        Gets the continue_on_error of this NasEnvJobParameters.
        Specifies if the backup should continue on with other Protection Sources even if the backup operation of some Protection Source fails. If true, the Cohesity Cluster ignores the errors and continues with remaining Protection Sources in the job. If false, the backup operation stops when an error occurs. This does not apply to non-snapshot based generic NAS backup jobs. If not set, default value is true.

        :return: The continue_on_error of this NasEnvJobParameters.
        :rtype: bool
        """
        return self._continue_on_error

    @continue_on_error.setter
    def continue_on_error(self, continue_on_error):
        """
        Sets the continue_on_error of this NasEnvJobParameters.
        Specifies if the backup should continue on with other Protection Sources even if the backup operation of some Protection Source fails. If true, the Cohesity Cluster ignores the errors and continues with remaining Protection Sources in the job. If false, the backup operation stops when an error occurs. This does not apply to non-snapshot based generic NAS backup jobs. If not set, default value is true.

        :param continue_on_error: The continue_on_error of this NasEnvJobParameters.
        :type: bool
        """

        self._continue_on_error = continue_on_error

    @property
    def file_path_filters(self):
        """
        Gets the file_path_filters of this NasEnvJobParameters.
        Specifies filters on the backup objects like files and directories. Specifying filters decide which objects within a source should be backed up. If this field is not specified, then all of the objects within the source will be backed up.

        :return: The file_path_filters of this NasEnvJobParameters.
        :rtype: FilePathFilter
        """
        return self._file_path_filters

    @file_path_filters.setter
    def file_path_filters(self, file_path_filters):
        """
        Sets the file_path_filters of this NasEnvJobParameters.
        Specifies filters on the backup objects like files and directories. Specifying filters decide which objects within a source should be backed up. If this field is not specified, then all of the objects within the source will be backed up.

        :param file_path_filters: The file_path_filters of this NasEnvJobParameters.
        :type: FilePathFilter
        """

        self._file_path_filters = file_path_filters

    @property
    def nas_protocol(self):
        """
        Gets the nas_protocol of this NasEnvJobParameters.
        Specifies the preferred protocol to use for backup. This does not apply to generic NAS and will be ignored. Specifies the protocol used by a NAS server. 'kNfs3' indicates NFS v3 protocol. 'kCifs1' indicates CIFS v1.0 protocol.

        :return: The nas_protocol of this NasEnvJobParameters.
        :rtype: str
        """
        return self._nas_protocol

    @nas_protocol.setter
    def nas_protocol(self, nas_protocol):
        """
        Sets the nas_protocol of this NasEnvJobParameters.
        Specifies the preferred protocol to use for backup. This does not apply to generic NAS and will be ignored. Specifies the protocol used by a NAS server. 'kNfs3' indicates NFS v3 protocol. 'kCifs1' indicates CIFS v1.0 protocol.

        :param nas_protocol: The nas_protocol of this NasEnvJobParameters.
        :type: str
        """
        allowed_values = ["kNfs3", "kCifs1"]
        if nas_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `nas_protocol` ({0}), must be one of {1}"
                .format(nas_protocol, allowed_values)
            )

        self._nas_protocol = nas_protocol

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
