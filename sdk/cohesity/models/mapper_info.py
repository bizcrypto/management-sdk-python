# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MapperInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, code=None, id=None, is_system_defined=None, jar_name=None, jar_path=None, language=None, name=None):
        """
        MapperInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'str',
            'id': 'int',
            'is_system_defined': 'bool',
            'jar_name': 'str',
            'jar_path': 'str',
            'language': 'int',
            'name': 'str'
        }

        self.attribute_map = {
            'code': 'code',
            'id': 'id',
            'is_system_defined': 'isSystemDefined',
            'jar_name': 'jarName',
            'jar_path': 'jarPath',
            'language': 'language',
            'name': 'name'
        }

        self._code = code
        self._id = id
        self._is_system_defined = is_system_defined
        self._jar_name = jar_name
        self._jar_path = jar_path
        self._language = language
        self._name = name

    @property
    def code(self):
        """
        Gets the code of this MapperInfo.
        The code of the mapper in the specified language. Should be UTF-8.

        :return: The code of this MapperInfo.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this MapperInfo.
        The code of the mapper in the specified language. Should be UTF-8.

        :param code: The code of this MapperInfo.
        :type: str
        """

        self._code = code

    @property
    def id(self):
        """
        Gets the id of this MapperInfo.
        Mapper ID generated by system. Absent when user is creating a new mapper. Mandatory in all other use cases.

        :return: The id of this MapperInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MapperInfo.
        Mapper ID generated by system. Absent when user is creating a new mapper. Mandatory in all other use cases.

        :param id: The id of this MapperInfo.
        :type: int
        """

        self._id = id

    @property
    def is_system_defined(self):
        """
        Gets the is_system_defined of this MapperInfo.
        Whether the mapper is system defined.

        :return: The is_system_defined of this MapperInfo.
        :rtype: bool
        """
        return self._is_system_defined

    @is_system_defined.setter
    def is_system_defined(self, is_system_defined):
        """
        Sets the is_system_defined of this MapperInfo.
        Whether the mapper is system defined.

        :param is_system_defined: The is_system_defined of this MapperInfo.
        :type: bool
        """

        self._is_system_defined = is_system_defined

    @property
    def jar_name(self):
        """
        Gets the jar_name of this MapperInfo.
        User can write their own mapper/reducer or upload jar files containing mappers and reducers. If this mapper was part of a jar file, then this field will have the JAR name.

        :return: The jar_name of this MapperInfo.
        :rtype: str
        """
        return self._jar_name

    @jar_name.setter
    def jar_name(self, jar_name):
        """
        Sets the jar_name of this MapperInfo.
        User can write their own mapper/reducer or upload jar files containing mappers and reducers. If this mapper was part of a jar file, then this field will have the JAR name.

        :param jar_name: The jar_name of this MapperInfo.
        :type: str
        """

        self._jar_name = jar_name

    @property
    def jar_path(self):
        """
        Gets the jar_path of this MapperInfo.
        path of JAR in which this mapper was found. This is applicable only when this mapper was uploaded via JAR. TODO(apurv): This is not immune to viewbox name change. Please write a proto to capture paths that are immune to this.

        :return: The jar_path of this MapperInfo.
        :rtype: str
        """
        return self._jar_path

    @jar_path.setter
    def jar_path(self, jar_path):
        """
        Sets the jar_path of this MapperInfo.
        path of JAR in which this mapper was found. This is applicable only when this mapper was uploaded via JAR. TODO(apurv): This is not immune to viewbox name change. Please write a proto to capture paths that are immune to this.

        :param jar_path: The jar_path of this MapperInfo.
        :type: str
        """

        self._jar_path = jar_path

    @property
    def language(self):
        """
        Gets the language of this MapperInfo.
        Language of the mapper.

        :return: The language of this MapperInfo.
        :rtype: int
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this MapperInfo.
        Language of the mapper.

        :param language: The language of this MapperInfo.
        :type: int
        """

        self._language = language

    @property
    def name(self):
        """
        Gets the name of this MapperInfo.
        Name of the mapper.

        :return: The name of this MapperInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MapperInfo.
        Name of the mapper.

        :param name: The name of this MapperInfo.
        :type: str
        """

        self._name = name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
