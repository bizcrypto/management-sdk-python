# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TaskNotification(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, created_time_msecs=None, description=None, dismissed=None, dismissed_time_msecs=None, entity_id=None, entity_type=None, notification_id=None):
        """
        TaskNotification - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'created_time_msecs': 'int',
            'description': 'str',
            'dismissed': 'int',
            'dismissed_time_msecs': 'int',
            'entity_id': 'int',
            'entity_type': 'str',
            'notification_id': 'str'
        }

        self.attribute_map = {
            'created_time_msecs': 'createdTimeMsecs',
            'description': 'description',
            'dismissed': 'dismissed',
            'dismissed_time_msecs': 'dismissedTimeMsecs',
            'entity_id': 'entityId',
            'entity_type': 'entityType',
            'notification_id': 'notificationId'
        }

        self._created_time_msecs = created_time_msecs
        self._description = description
        self._dismissed = dismissed
        self._dismissed_time_msecs = dismissed_time_msecs
        self._entity_id = entity_id
        self._entity_type = entity_type
        self._notification_id = notification_id

    @property
    def created_time_msecs(self):
        """
        Gets the created_time_msecs of this TaskNotification.
        Timestamp at which the notification was created.

        :return: The created_time_msecs of this TaskNotification.
        :rtype: int
        """
        return self._created_time_msecs

    @created_time_msecs.setter
    def created_time_msecs(self, created_time_msecs):
        """
        Sets the created_time_msecs of this TaskNotification.
        Timestamp at which the notification was created.

        :param created_time_msecs: The created_time_msecs of this TaskNotification.
        :type: int
        """

        self._created_time_msecs = created_time_msecs

    @property
    def description(self):
        """
        Gets the description of this TaskNotification.
        Description holds the actual notification text generated for the event.

        :return: The description of this TaskNotification.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this TaskNotification.
        Description holds the actual notification text generated for the event.

        :param description: The description of this TaskNotification.
        :type: str
        """

        self._description = description

    @property
    def dismissed(self):
        """
        Gets the dismissed of this TaskNotification.
        Dismissed keeps track of whether a notification has been seen or not. User may choose to dismiss individual event or all notifications at once. Nil or 0 value represents false.

        :return: The dismissed of this TaskNotification.
        :rtype: int
        """
        return self._dismissed

    @dismissed.setter
    def dismissed(self, dismissed):
        """
        Sets the dismissed of this TaskNotification.
        Dismissed keeps track of whether a notification has been seen or not. User may choose to dismiss individual event or all notifications at once. Nil or 0 value represents false.

        :param dismissed: The dismissed of this TaskNotification.
        :type: int
        """

        self._dismissed = dismissed

    @property
    def dismissed_time_msecs(self):
        """
        Gets the dismissed_time_msecs of this TaskNotification.
        Timestamp at which user dismissed this notification event

        :return: The dismissed_time_msecs of this TaskNotification.
        :rtype: int
        """
        return self._dismissed_time_msecs

    @dismissed_time_msecs.setter
    def dismissed_time_msecs(self, dismissed_time_msecs):
        """
        Sets the dismissed_time_msecs of this TaskNotification.
        Timestamp at which user dismissed this notification event

        :param dismissed_time_msecs: The dismissed_time_msecs of this TaskNotification.
        :type: int
        """

        self._dismissed_time_msecs = dismissed_time_msecs

    @property
    def entity_id(self):
        """
        Gets the entity_id of this TaskNotification.
        Entity fields will help clients navigate to the source page from where the notification event originated.

        :return: The entity_id of this TaskNotification.
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """
        Sets the entity_id of this TaskNotification.
        Entity fields will help clients navigate to the source page from where the notification event originated.

        :param entity_id: The entity_id of this TaskNotification.
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_type(self):
        """
        Gets the entity_type of this TaskNotification.


        :return: The entity_type of this TaskNotification.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """
        Sets the entity_type of this TaskNotification.


        :param entity_type: The entity_type of this TaskNotification.
        :type: str
        """

        self._entity_type = entity_type

    @property
    def notification_id(self):
        """
        Gets the notification_id of this TaskNotification.
        NotificationId identifies a user notification event uniquely. This can also be used to dismiss individual notifications.

        :return: The notification_id of this TaskNotification.
        :rtype: str
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """
        Sets the notification_id of this TaskNotification.
        NotificationId identifies a user notification event uniquely. This can also be used to dismiss individual notifications.

        :param notification_id: The notification_id of this TaskNotification.
        :type: str
        """

        self._notification_id = notification_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
