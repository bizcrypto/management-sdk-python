# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateViewBoxParamsDefaultUserQuotaPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, alert_limit=None, hard_limit=None, alert_limit_bytes=None, alert_threshold_percentage=None, hard_limit_bytes=None):
        """
        CreateViewBoxParamsDefaultUserQuotaPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'alert_limit': 'str',
            'hard_limit': 'str',
            'alert_limit_bytes': 'int',
            'alert_threshold_percentage': 'int',
            'hard_limit_bytes': 'int'
        }

        self.attribute_map = {
            'alert_limit': 'AlertLimit',
            'hard_limit': 'HardLimit',
            'alert_limit_bytes': 'alertLimitBytes',
            'alert_threshold_percentage': 'alertThresholdPercentage',
            'hard_limit_bytes': 'hardLimitBytes'
        }

        self._alert_limit = alert_limit
        self._hard_limit = hard_limit
        self._alert_limit_bytes = alert_limit_bytes
        self._alert_threshold_percentage = alert_threshold_percentage
        self._hard_limit_bytes = hard_limit_bytes

    @property
    def alert_limit(self):
        """
        Gets the alert_limit of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        AlertLimitBytes converted to GiB format for report purposes.

        :return: The alert_limit of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        :rtype: str
        """
        return self._alert_limit

    @alert_limit.setter
    def alert_limit(self, alert_limit):
        """
        Sets the alert_limit of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        AlertLimitBytes converted to GiB format for report purposes.

        :param alert_limit: The alert_limit of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        :type: str
        """

        self._alert_limit = alert_limit

    @property
    def hard_limit(self):
        """
        Gets the hard_limit of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        HardLimitBytes converted to GiB format for report purposes.

        :return: The hard_limit of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        :rtype: str
        """
        return self._hard_limit

    @hard_limit.setter
    def hard_limit(self, hard_limit):
        """
        Sets the hard_limit of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        HardLimitBytes converted to GiB format for report purposes.

        :param hard_limit: The hard_limit of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        :type: str
        """

        self._hard_limit = hard_limit

    @property
    def alert_limit_bytes(self):
        """
        Gets the alert_limit_bytes of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        Specifies if an alert should be triggered when the usage of this resource exceeds this quota limit. This limit is optional and is specified in bytes. If no value is specified, there is no limit.

        :return: The alert_limit_bytes of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        :rtype: int
        """
        return self._alert_limit_bytes

    @alert_limit_bytes.setter
    def alert_limit_bytes(self, alert_limit_bytes):
        """
        Sets the alert_limit_bytes of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        Specifies if an alert should be triggered when the usage of this resource exceeds this quota limit. This limit is optional and is specified in bytes. If no value is specified, there is no limit.

        :param alert_limit_bytes: The alert_limit_bytes of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        :type: int
        """

        self._alert_limit_bytes = alert_limit_bytes

    @property
    def alert_threshold_percentage(self):
        """
        Gets the alert_threshold_percentage of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        Supported only for user quota policy. Specifies when the uage goes above an alert threshold percentage which is: HardLimitBytes * AlertThresholdPercentage, eg: 80% of HardLimitBytes Can only be set if HardLimitBytes is set. Cannot be set if AlertLimitBytes is already set.

        :return: The alert_threshold_percentage of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        :rtype: int
        """
        return self._alert_threshold_percentage

    @alert_threshold_percentage.setter
    def alert_threshold_percentage(self, alert_threshold_percentage):
        """
        Sets the alert_threshold_percentage of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        Supported only for user quota policy. Specifies when the uage goes above an alert threshold percentage which is: HardLimitBytes * AlertThresholdPercentage, eg: 80% of HardLimitBytes Can only be set if HardLimitBytes is set. Cannot be set if AlertLimitBytes is already set.

        :param alert_threshold_percentage: The alert_threshold_percentage of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        :type: int
        """

        self._alert_threshold_percentage = alert_threshold_percentage

    @property
    def hard_limit_bytes(self):
        """
        Gets the hard_limit_bytes of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        Specifies an optional quota limit on the usage allowed for this resource. This limit is specified in bytes. If no value is specified, there is no limit.

        :return: The hard_limit_bytes of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        :rtype: int
        """
        return self._hard_limit_bytes

    @hard_limit_bytes.setter
    def hard_limit_bytes(self, hard_limit_bytes):
        """
        Sets the hard_limit_bytes of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        Specifies an optional quota limit on the usage allowed for this resource. This limit is specified in bytes. If no value is specified, there is no limit.

        :param hard_limit_bytes: The hard_limit_bytes of this CreateViewBoxParamsDefaultUserQuotaPolicy.
        :type: int
        """

        self._hard_limit_bytes = hard_limit_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
