# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UpdateMachineAccountsParams(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, machine_accounts=None, overwrite_existing_accounts=None, password=None, user_name=None):
        """
        UpdateMachineAccountsParams - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'machine_accounts': 'list[str]',
            'overwrite_existing_accounts': 'bool',
            'password': 'str',
            'user_name': 'str'
        }

        self.attribute_map = {
            'machine_accounts': 'machineAccounts',
            'overwrite_existing_accounts': 'overwriteExistingAccounts',
            'password': 'password',
            'user_name': 'userName'
        }

        self._machine_accounts = machine_accounts
        self._overwrite_existing_accounts = overwrite_existing_accounts
        self._password = password
        self._user_name = user_name

    @property
    def machine_accounts(self):
        """
        Gets the machine_accounts of this UpdateMachineAccountsParams.
        Specifies an array of computer names used to identify the Cohesity Cluster on the domain.

        :return: The machine_accounts of this UpdateMachineAccountsParams.
        :rtype: list[str]
        """
        return self._machine_accounts

    @machine_accounts.setter
    def machine_accounts(self, machine_accounts):
        """
        Sets the machine_accounts of this UpdateMachineAccountsParams.
        Specifies an array of computer names used to identify the Cohesity Cluster on the domain.

        :param machine_accounts: The machine_accounts of this UpdateMachineAccountsParams.
        :type: list[str]
        """

        self._machine_accounts = machine_accounts

    @property
    def overwrite_existing_accounts(self):
        """
        Gets the overwrite_existing_accounts of this UpdateMachineAccountsParams.
        Specifies whether the specified machine accounts should overwrite the existing machine accounts in this domain.

        :return: The overwrite_existing_accounts of this UpdateMachineAccountsParams.
        :rtype: bool
        """
        return self._overwrite_existing_accounts

    @overwrite_existing_accounts.setter
    def overwrite_existing_accounts(self, overwrite_existing_accounts):
        """
        Sets the overwrite_existing_accounts of this UpdateMachineAccountsParams.
        Specifies whether the specified machine accounts should overwrite the existing machine accounts in this domain.

        :param overwrite_existing_accounts: The overwrite_existing_accounts of this UpdateMachineAccountsParams.
        :type: bool
        """

        self._overwrite_existing_accounts = overwrite_existing_accounts

    @property
    def password(self):
        """
        Gets the password of this UpdateMachineAccountsParams.
        Specifies the password for the specified userName.

        :return: The password of this UpdateMachineAccountsParams.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this UpdateMachineAccountsParams.
        Specifies the password for the specified userName.

        :param password: The password of this UpdateMachineAccountsParams.
        :type: str
        """

        self._password = password

    @property
    def user_name(self):
        """
        Gets the user_name of this UpdateMachineAccountsParams.
        Specifies a userName that has administrative privileges in the domain.

        :return: The user_name of this UpdateMachineAccountsParams.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """
        Sets the user_name of this UpdateMachineAccountsParams.
        Specifies a userName that has administrative privileges in the domain.

        :param user_name: The user_name of this UpdateMachineAccountsParams.
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
