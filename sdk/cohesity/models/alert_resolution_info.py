# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AlertResolutionInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, resolution_details=None, resolution_summary=None):
        """
        AlertResolutionInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'resolution_details': 'str',
            'resolution_summary': 'str'
        }

        self.attribute_map = {
            'resolution_details': 'resolutionDetails',
            'resolution_summary': 'resolutionSummary'
        }

        self._resolution_details = resolution_details
        self._resolution_summary = resolution_summary

    @property
    def resolution_details(self):
        """
        Gets the resolution_details of this AlertResolutionInfo.
        Detailed notes about the Resolution.

        :return: The resolution_details of this AlertResolutionInfo.
        :rtype: str
        """
        return self._resolution_details

    @resolution_details.setter
    def resolution_details(self, resolution_details):
        """
        Sets the resolution_details of this AlertResolutionInfo.
        Detailed notes about the Resolution.

        :param resolution_details: The resolution_details of this AlertResolutionInfo.
        :type: str
        """

        self._resolution_details = resolution_details

    @property
    def resolution_summary(self):
        """
        Gets the resolution_summary of this AlertResolutionInfo.
        Short description about the Resolution.

        :return: The resolution_summary of this AlertResolutionInfo.
        :rtype: str
        """
        return self._resolution_summary

    @resolution_summary.setter
    def resolution_summary(self, resolution_summary):
        """
        Sets the resolution_summary of this AlertResolutionInfo.
        Short description about the Resolution.

        :param resolution_summary: The resolution_summary of this AlertResolutionInfo.
        :type: str
        """

        self._resolution_summary = resolution_summary

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
