# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Cluster(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bonding_mode=None, cluster_audit_log_config=None, cluster_software_version=None, cluster_type=None, created_time_msecs=None, current_op_scheduled_time_secs=None, current_operation=None, current_time_msecs=None, dns_server_ips=None, domain_names=None, enable_active_monitoring=None, enable_upgrade_pkg_polling=None, encryption_enabled=None, encryption_key_rotation_period_secs=None, eula_config=None, filer_audit_log_config=None, fips_mode_enabled=None, gateway=None, hardware_info=None, id=None, incarnation_id=None, is_documentation_local=None, language_locale=None, mtu=None, name=None, node_count=None, ntp_settings=None, reverse_tunnel_enabled=None, smb_ad_disabled=None, stats=None, supported_config=None, syslog_servers=None, target_software_version=None, timezone=None, turbo_mode=None):
        """
        Cluster - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bonding_mode': 'str',
            'cluster_audit_log_config': 'ClusterAuditLogConfiguration',
            'cluster_software_version': 'str',
            'cluster_type': 'str',
            'created_time_msecs': 'int',
            'current_op_scheduled_time_secs': 'int',
            'current_operation': 'str',
            'current_time_msecs': 'int',
            'dns_server_ips': 'list[str]',
            'domain_names': 'list[str]',
            'enable_active_monitoring': 'bool',
            'enable_upgrade_pkg_polling': 'bool',
            'encryption_enabled': 'bool',
            'encryption_key_rotation_period_secs': 'int',
            'eula_config': 'ClusterEulaConfig',
            'filer_audit_log_config': 'FilerAuditLogConfiguration',
            'fips_mode_enabled': 'bool',
            'gateway': 'str',
            'hardware_info': 'ClusterHardwareInfo',
            'id': 'int',
            'incarnation_id': 'int',
            'is_documentation_local': 'bool',
            'language_locale': 'str',
            'mtu': 'int',
            'name': 'str',
            'node_count': 'int',
            'ntp_settings': 'NtpSettingsConfig',
            'reverse_tunnel_enabled': 'bool',
            'smb_ad_disabled': 'bool',
            'stats': 'ClusterStats',
            'supported_config': 'SupportedConfig',
            'syslog_servers': 'list[SyslogServer]',
            'target_software_version': 'str',
            'timezone': 'str',
            'turbo_mode': 'bool'
        }

        self.attribute_map = {
            'bonding_mode': 'bondingMode',
            'cluster_audit_log_config': 'clusterAuditLogConfig',
            'cluster_software_version': 'clusterSoftwareVersion',
            'cluster_type': 'clusterType',
            'created_time_msecs': 'createdTimeMsecs',
            'current_op_scheduled_time_secs': 'currentOpScheduledTimeSecs',
            'current_operation': 'currentOperation',
            'current_time_msecs': 'currentTimeMsecs',
            'dns_server_ips': 'dnsServerIps',
            'domain_names': 'domainNames',
            'enable_active_monitoring': 'enableActiveMonitoring',
            'enable_upgrade_pkg_polling': 'enableUpgradePkgPolling',
            'encryption_enabled': 'encryptionEnabled',
            'encryption_key_rotation_period_secs': 'encryptionKeyRotationPeriodSecs',
            'eula_config': 'eulaConfig',
            'filer_audit_log_config': 'filerAuditLogConfig',
            'fips_mode_enabled': 'fipsModeEnabled',
            'gateway': 'gateway',
            'hardware_info': 'hardwareInfo',
            'id': 'id',
            'incarnation_id': 'incarnationId',
            'is_documentation_local': 'isDocumentationLocal',
            'language_locale': 'languageLocale',
            'mtu': 'mtu',
            'name': 'name',
            'node_count': 'nodeCount',
            'ntp_settings': 'ntpSettings',
            'reverse_tunnel_enabled': 'reverseTunnelEnabled',
            'smb_ad_disabled': 'smbAdDisabled',
            'stats': 'stats',
            'supported_config': 'supportedConfig',
            'syslog_servers': 'syslogServers',
            'target_software_version': 'targetSoftwareVersion',
            'timezone': 'timezone',
            'turbo_mode': 'turboMode'
        }

        self._bonding_mode = bonding_mode
        self._cluster_audit_log_config = cluster_audit_log_config
        self._cluster_software_version = cluster_software_version
        self._cluster_type = cluster_type
        self._created_time_msecs = created_time_msecs
        self._current_op_scheduled_time_secs = current_op_scheduled_time_secs
        self._current_operation = current_operation
        self._current_time_msecs = current_time_msecs
        self._dns_server_ips = dns_server_ips
        self._domain_names = domain_names
        self._enable_active_monitoring = enable_active_monitoring
        self._enable_upgrade_pkg_polling = enable_upgrade_pkg_polling
        self._encryption_enabled = encryption_enabled
        self._encryption_key_rotation_period_secs = encryption_key_rotation_period_secs
        self._eula_config = eula_config
        self._filer_audit_log_config = filer_audit_log_config
        self._fips_mode_enabled = fips_mode_enabled
        self._gateway = gateway
        self._hardware_info = hardware_info
        self._id = id
        self._incarnation_id = incarnation_id
        self._is_documentation_local = is_documentation_local
        self._language_locale = language_locale
        self._mtu = mtu
        self._name = name
        self._node_count = node_count
        self._ntp_settings = ntp_settings
        self._reverse_tunnel_enabled = reverse_tunnel_enabled
        self._smb_ad_disabled = smb_ad_disabled
        self._stats = stats
        self._supported_config = supported_config
        self._syslog_servers = syslog_servers
        self._target_software_version = target_software_version
        self._timezone = timezone
        self._turbo_mode = turbo_mode

    @property
    def bonding_mode(self):
        """
        Gets the bonding_mode of this Cluster.
        Specifies the bonding mode to use when bonding NICs to this Cluster. 'KActiveBackup' indicates an Active-backup policy bonding mode. 'K802_3ad' indicates an EEE 802.3ad Dynamic link aggregation bonding mode. 'KBalanceAlb' indicates a Adaptive load balancing bonding mode.

        :return: The bonding_mode of this Cluster.
        :rtype: str
        """
        return self._bonding_mode

    @bonding_mode.setter
    def bonding_mode(self, bonding_mode):
        """
        Sets the bonding_mode of this Cluster.
        Specifies the bonding mode to use when bonding NICs to this Cluster. 'KActiveBackup' indicates an Active-backup policy bonding mode. 'K802_3ad' indicates an EEE 802.3ad Dynamic link aggregation bonding mode. 'KBalanceAlb' indicates a Adaptive load balancing bonding mode.

        :param bonding_mode: The bonding_mode of this Cluster.
        :type: str
        """
        allowed_values = ["ActiveBackup", "802_3ad", "BalanceAlb"]
        if bonding_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `bonding_mode` ({0}), must be one of {1}"
                .format(bonding_mode, allowed_values)
            )

        self._bonding_mode = bonding_mode

    @property
    def cluster_audit_log_config(self):
        """
        Gets the cluster_audit_log_config of this Cluster.
        Cluster Audit Log Configuration.

        :return: The cluster_audit_log_config of this Cluster.
        :rtype: ClusterAuditLogConfiguration
        """
        return self._cluster_audit_log_config

    @cluster_audit_log_config.setter
    def cluster_audit_log_config(self, cluster_audit_log_config):
        """
        Sets the cluster_audit_log_config of this Cluster.
        Cluster Audit Log Configuration.

        :param cluster_audit_log_config: The cluster_audit_log_config of this Cluster.
        :type: ClusterAuditLogConfiguration
        """

        self._cluster_audit_log_config = cluster_audit_log_config

    @property
    def cluster_software_version(self):
        """
        Gets the cluster_software_version of this Cluster.
        Specifies the current release of the Cohesity software running on this Cohesity Cluster.

        :return: The cluster_software_version of this Cluster.
        :rtype: str
        """
        return self._cluster_software_version

    @cluster_software_version.setter
    def cluster_software_version(self, cluster_software_version):
        """
        Sets the cluster_software_version of this Cluster.
        Specifies the current release of the Cohesity software running on this Cohesity Cluster.

        :param cluster_software_version: The cluster_software_version of this Cluster.
        :type: str
        """

        self._cluster_software_version = cluster_software_version

    @property
    def cluster_type(self):
        """
        Gets the cluster_type of this Cluster.
        Specifies the type of Cluster such as kPhysical. 'kPhysical' indicates the Cohesity Cluster is hosted directly on hardware. 'kVirtualRobo' indicates the Cohesity Cluster is hosted in a VM on a ESXi Host of a VMware vCenter Server using Cohesity's Virtual Edition. 'kMicrosoftCloud' indicates the Cohesity Cluster is hosed in a VM on Microsoft Azure using Cohesity's Cloud Edition. 'kAmazonCloud' indicates the Cohesity Cluster is hosed in a VM on Amazon S3 using Cohesity's Cloud Edition. 'kGoogleCloud' indicates the Cohesity Cluster is hosed in a VM on Google Cloud Platform using Cohesity's Cloud Edition.

        :return: The cluster_type of this Cluster.
        :rtype: str
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """
        Sets the cluster_type of this Cluster.
        Specifies the type of Cluster such as kPhysical. 'kPhysical' indicates the Cohesity Cluster is hosted directly on hardware. 'kVirtualRobo' indicates the Cohesity Cluster is hosted in a VM on a ESXi Host of a VMware vCenter Server using Cohesity's Virtual Edition. 'kMicrosoftCloud' indicates the Cohesity Cluster is hosed in a VM on Microsoft Azure using Cohesity's Cloud Edition. 'kAmazonCloud' indicates the Cohesity Cluster is hosed in a VM on Amazon S3 using Cohesity's Cloud Edition. 'kGoogleCloud' indicates the Cohesity Cluster is hosed in a VM on Google Cloud Platform using Cohesity's Cloud Edition.

        :param cluster_type: The cluster_type of this Cluster.
        :type: str
        """
        allowed_values = ["kPhysical", "kVirtualRobo", "kMicrosoftCloud", "kAmazonCloud", "kGoogleCloud"]
        if cluster_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cluster_type` ({0}), must be one of {1}"
                .format(cluster_type, allowed_values)
            )

        self._cluster_type = cluster_type

    @property
    def created_time_msecs(self):
        """
        Gets the created_time_msecs of this Cluster.
        Specifies the time when the Cohesity Cluster was created. This value is specified as a Unix epoch Timestamp (in microseconds).

        :return: The created_time_msecs of this Cluster.
        :rtype: int
        """
        return self._created_time_msecs

    @created_time_msecs.setter
    def created_time_msecs(self, created_time_msecs):
        """
        Sets the created_time_msecs of this Cluster.
        Specifies the time when the Cohesity Cluster was created. This value is specified as a Unix epoch Timestamp (in microseconds).

        :param created_time_msecs: The created_time_msecs of this Cluster.
        :type: int
        """

        self._created_time_msecs = created_time_msecs

    @property
    def current_op_scheduled_time_secs(self):
        """
        Gets the current_op_scheduled_time_secs of this Cluster.
        Specifies the time scheduled by the Cohesity Cluster to start the current running operation.

        :return: The current_op_scheduled_time_secs of this Cluster.
        :rtype: int
        """
        return self._current_op_scheduled_time_secs

    @current_op_scheduled_time_secs.setter
    def current_op_scheduled_time_secs(self, current_op_scheduled_time_secs):
        """
        Sets the current_op_scheduled_time_secs of this Cluster.
        Specifies the time scheduled by the Cohesity Cluster to start the current running operation.

        :param current_op_scheduled_time_secs: The current_op_scheduled_time_secs of this Cluster.
        :type: int
        """

        self._current_op_scheduled_time_secs = current_op_scheduled_time_secs

    @property
    def current_operation(self):
        """
        Gets the current_operation of this Cluster.
        Specifies the current Cluster-level operation in progress. 'kUpgrade' indicates the Cohesity Cluster is upgrading to a new release. 'kRemoveNode' indicates the Cohesity Cluster is removing a Node from the Cluster. 'kNone' indicates no action is occurring on the Cohesity Cluster.

        :return: The current_operation of this Cluster.
        :rtype: str
        """
        return self._current_operation

    @current_operation.setter
    def current_operation(self, current_operation):
        """
        Sets the current_operation of this Cluster.
        Specifies the current Cluster-level operation in progress. 'kUpgrade' indicates the Cohesity Cluster is upgrading to a new release. 'kRemoveNode' indicates the Cohesity Cluster is removing a Node from the Cluster. 'kNone' indicates no action is occurring on the Cohesity Cluster.

        :param current_operation: The current_operation of this Cluster.
        :type: str
        """
        allowed_values = ["kRemoveNode", "kUpgrade", "kNone"]
        if current_operation not in allowed_values:
            raise ValueError(
                "Invalid value for `current_operation` ({0}), must be one of {1}"
                .format(current_operation, allowed_values)
            )

        self._current_operation = current_operation

    @property
    def current_time_msecs(self):
        """
        Gets the current_time_msecs of this Cluster.
        Specifies the current system time on the Cohesity Cluster. This value is specified as a Unix epoch Timestamp (in microseconds).

        :return: The current_time_msecs of this Cluster.
        :rtype: int
        """
        return self._current_time_msecs

    @current_time_msecs.setter
    def current_time_msecs(self, current_time_msecs):
        """
        Sets the current_time_msecs of this Cluster.
        Specifies the current system time on the Cohesity Cluster. This value is specified as a Unix epoch Timestamp (in microseconds).

        :param current_time_msecs: The current_time_msecs of this Cluster.
        :type: int
        """

        self._current_time_msecs = current_time_msecs

    @property
    def dns_server_ips(self):
        """
        Gets the dns_server_ips of this Cluster.
        Specifies the IP addresses of the DNS Servers used by the Cohesity Cluster.

        :return: The dns_server_ips of this Cluster.
        :rtype: list[str]
        """
        return self._dns_server_ips

    @dns_server_ips.setter
    def dns_server_ips(self, dns_server_ips):
        """
        Sets the dns_server_ips of this Cluster.
        Specifies the IP addresses of the DNS Servers used by the Cohesity Cluster.

        :param dns_server_ips: The dns_server_ips of this Cluster.
        :type: list[str]
        """

        self._dns_server_ips = dns_server_ips

    @property
    def domain_names(self):
        """
        Gets the domain_names of this Cluster.
        The first domain name specified in the array is the fully qualified domain name assigned to the Cohesity Cluster. Any additional domain names specified are used for the domain search list for hostname look-up.

        :return: The domain_names of this Cluster.
        :rtype: list[str]
        """
        return self._domain_names

    @domain_names.setter
    def domain_names(self, domain_names):
        """
        Sets the domain_names of this Cluster.
        The first domain name specified in the array is the fully qualified domain name assigned to the Cohesity Cluster. Any additional domain names specified are used for the domain search list for hostname look-up.

        :param domain_names: The domain_names of this Cluster.
        :type: list[str]
        """

        self._domain_names = domain_names

    @property
    def enable_active_monitoring(self):
        """
        Gets the enable_active_monitoring of this Cluster.
        Specifies if Cohesity can receive monitoring information from the Cohesity Cluster. If 'true', remote monitoring of the Cohesity Cluster is allowed.

        :return: The enable_active_monitoring of this Cluster.
        :rtype: bool
        """
        return self._enable_active_monitoring

    @enable_active_monitoring.setter
    def enable_active_monitoring(self, enable_active_monitoring):
        """
        Sets the enable_active_monitoring of this Cluster.
        Specifies if Cohesity can receive monitoring information from the Cohesity Cluster. If 'true', remote monitoring of the Cohesity Cluster is allowed.

        :param enable_active_monitoring: The enable_active_monitoring of this Cluster.
        :type: bool
        """

        self._enable_active_monitoring = enable_active_monitoring

    @property
    def enable_upgrade_pkg_polling(self):
        """
        Gets the enable_upgrade_pkg_polling of this Cluster.
        If 'true', Cohesity's upgrade server is polled for new releases.

        :return: The enable_upgrade_pkg_polling of this Cluster.
        :rtype: bool
        """
        return self._enable_upgrade_pkg_polling

    @enable_upgrade_pkg_polling.setter
    def enable_upgrade_pkg_polling(self, enable_upgrade_pkg_polling):
        """
        Sets the enable_upgrade_pkg_polling of this Cluster.
        If 'true', Cohesity's upgrade server is polled for new releases.

        :param enable_upgrade_pkg_polling: The enable_upgrade_pkg_polling of this Cluster.
        :type: bool
        """

        self._enable_upgrade_pkg_polling = enable_upgrade_pkg_polling

    @property
    def encryption_enabled(self):
        """
        Gets the encryption_enabled of this Cluster.
        If 'true', the entire Cohesity Cluster is encrypted including all View Boxes.

        :return: The encryption_enabled of this Cluster.
        :rtype: bool
        """
        return self._encryption_enabled

    @encryption_enabled.setter
    def encryption_enabled(self, encryption_enabled):
        """
        Sets the encryption_enabled of this Cluster.
        If 'true', the entire Cohesity Cluster is encrypted including all View Boxes.

        :param encryption_enabled: The encryption_enabled of this Cluster.
        :type: bool
        """

        self._encryption_enabled = encryption_enabled

    @property
    def encryption_key_rotation_period_secs(self):
        """
        Gets the encryption_key_rotation_period_secs of this Cluster.
        Specifies the period of time (in seconds) when encryption keys are rotated. By default, the encryption keys are rotated every 77760000 seconds (30 days).

        :return: The encryption_key_rotation_period_secs of this Cluster.
        :rtype: int
        """
        return self._encryption_key_rotation_period_secs

    @encryption_key_rotation_period_secs.setter
    def encryption_key_rotation_period_secs(self, encryption_key_rotation_period_secs):
        """
        Sets the encryption_key_rotation_period_secs of this Cluster.
        Specifies the period of time (in seconds) when encryption keys are rotated. By default, the encryption keys are rotated every 77760000 seconds (30 days).

        :param encryption_key_rotation_period_secs: The encryption_key_rotation_period_secs of this Cluster.
        :type: int
        """

        self._encryption_key_rotation_period_secs = encryption_key_rotation_period_secs

    @property
    def eula_config(self):
        """
        Gets the eula_config of this Cluster.


        :return: The eula_config of this Cluster.
        :rtype: ClusterEulaConfig
        """
        return self._eula_config

    @eula_config.setter
    def eula_config(self, eula_config):
        """
        Sets the eula_config of this Cluster.


        :param eula_config: The eula_config of this Cluster.
        :type: ClusterEulaConfig
        """

        self._eula_config = eula_config

    @property
    def filer_audit_log_config(self):
        """
        Gets the filer_audit_log_config of this Cluster.
        Filer Audit Log Configuration.

        :return: The filer_audit_log_config of this Cluster.
        :rtype: FilerAuditLogConfiguration
        """
        return self._filer_audit_log_config

    @filer_audit_log_config.setter
    def filer_audit_log_config(self, filer_audit_log_config):
        """
        Sets the filer_audit_log_config of this Cluster.
        Filer Audit Log Configuration.

        :param filer_audit_log_config: The filer_audit_log_config of this Cluster.
        :type: FilerAuditLogConfiguration
        """

        self._filer_audit_log_config = filer_audit_log_config

    @property
    def fips_mode_enabled(self):
        """
        Gets the fips_mode_enabled of this Cluster.
        Specifies if the Cohesity Cluster should operate in the FIPS mode, which is compliant with the Federal Information Processing Standard 140-2 certification.

        :return: The fips_mode_enabled of this Cluster.
        :rtype: bool
        """
        return self._fips_mode_enabled

    @fips_mode_enabled.setter
    def fips_mode_enabled(self, fips_mode_enabled):
        """
        Sets the fips_mode_enabled of this Cluster.
        Specifies if the Cohesity Cluster should operate in the FIPS mode, which is compliant with the Federal Information Processing Standard 140-2 certification.

        :param fips_mode_enabled: The fips_mode_enabled of this Cluster.
        :type: bool
        """

        self._fips_mode_enabled = fips_mode_enabled

    @property
    def gateway(self):
        """
        Gets the gateway of this Cluster.
        Specifies the gateway IP address.

        :return: The gateway of this Cluster.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """
        Sets the gateway of this Cluster.
        Specifies the gateway IP address.

        :param gateway: The gateway of this Cluster.
        :type: str
        """

        self._gateway = gateway

    @property
    def hardware_info(self):
        """
        Gets the hardware_info of this Cluster.
        Specifies a hardware type for motherboard of the nodes that make up this Cohesity Cluster such as S2600WB for Ivy Bridge or S2600TP for Haswell.

        :return: The hardware_info of this Cluster.
        :rtype: ClusterHardwareInfo
        """
        return self._hardware_info

    @hardware_info.setter
    def hardware_info(self, hardware_info):
        """
        Sets the hardware_info of this Cluster.
        Specifies a hardware type for motherboard of the nodes that make up this Cohesity Cluster such as S2600WB for Ivy Bridge or S2600TP for Haswell.

        :param hardware_info: The hardware_info of this Cluster.
        :type: ClusterHardwareInfo
        """

        self._hardware_info = hardware_info

    @property
    def id(self):
        """
        Gets the id of this Cluster.
        Specifies the unique id of Cohesity Cluster.

        :return: The id of this Cluster.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Cluster.
        Specifies the unique id of Cohesity Cluster.

        :param id: The id of this Cluster.
        :type: int
        """

        self._id = id

    @property
    def incarnation_id(self):
        """
        Gets the incarnation_id of this Cluster.
        Specifies the unique incarnation id of the Cohesity Cluster.

        :return: The incarnation_id of this Cluster.
        :rtype: int
        """
        return self._incarnation_id

    @incarnation_id.setter
    def incarnation_id(self, incarnation_id):
        """
        Sets the incarnation_id of this Cluster.
        Specifies the unique incarnation id of the Cohesity Cluster.

        :param incarnation_id: The incarnation_id of this Cluster.
        :type: int
        """

        self._incarnation_id = incarnation_id

    @property
    def is_documentation_local(self):
        """
        Gets the is_documentation_local of this Cluster.
        Specifies what version of the documentation is used. If 'true', the version of documentation stored locally on the Cohesity Cluster is used. If 'false', the documentation stored on a Cohesity Web Server is used. The default is 'false'. Cohesity recommends accessing the Help from the Cohesity Web site which provides the newest and most complete version of Help.

        :return: The is_documentation_local of this Cluster.
        :rtype: bool
        """
        return self._is_documentation_local

    @is_documentation_local.setter
    def is_documentation_local(self, is_documentation_local):
        """
        Sets the is_documentation_local of this Cluster.
        Specifies what version of the documentation is used. If 'true', the version of documentation stored locally on the Cohesity Cluster is used. If 'false', the documentation stored on a Cohesity Web Server is used. The default is 'false'. Cohesity recommends accessing the Help from the Cohesity Web site which provides the newest and most complete version of Help.

        :param is_documentation_local: The is_documentation_local of this Cluster.
        :type: bool
        """

        self._is_documentation_local = is_documentation_local

    @property
    def language_locale(self):
        """
        Gets the language_locale of this Cluster.
        Specifies the language and locale for this Cohesity Cluster.

        :return: The language_locale of this Cluster.
        :rtype: str
        """
        return self._language_locale

    @language_locale.setter
    def language_locale(self, language_locale):
        """
        Sets the language_locale of this Cluster.
        Specifies the language and locale for this Cohesity Cluster.

        :param language_locale: The language_locale of this Cluster.
        :type: str
        """

        self._language_locale = language_locale

    @property
    def mtu(self):
        """
        Gets the mtu of this Cluster.
        Specifies the Maxium Transmission Unit (MTU) in bytes of the network.

        :return: The mtu of this Cluster.
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """
        Sets the mtu of this Cluster.
        Specifies the Maxium Transmission Unit (MTU) in bytes of the network.

        :param mtu: The mtu of this Cluster.
        :type: int
        """

        self._mtu = mtu

    @property
    def name(self):
        """
        Gets the name of this Cluster.
        Specifies the name of the Cohesity Cluster.

        :return: The name of this Cluster.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Cluster.
        Specifies the name of the Cohesity Cluster.

        :param name: The name of this Cluster.
        :type: str
        """

        self._name = name

    @property
    def node_count(self):
        """
        Gets the node_count of this Cluster.
        Specifies the number of Nodes in the Cohesity Cluster.

        :return: The node_count of this Cluster.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """
        Sets the node_count of this Cluster.
        Specifies the number of Nodes in the Cohesity Cluster.

        :param node_count: The node_count of this Cluster.
        :type: int
        """

        self._node_count = node_count

    @property
    def ntp_settings(self):
        """
        Gets the ntp_settings of this Cluster.
        Specifies if the ntp/master slave scheme should be disabled for this cluster.

        :return: The ntp_settings of this Cluster.
        :rtype: NtpSettingsConfig
        """
        return self._ntp_settings

    @ntp_settings.setter
    def ntp_settings(self, ntp_settings):
        """
        Sets the ntp_settings of this Cluster.
        Specifies if the ntp/master slave scheme should be disabled for this cluster.

        :param ntp_settings: The ntp_settings of this Cluster.
        :type: NtpSettingsConfig
        """

        self._ntp_settings = ntp_settings

    @property
    def reverse_tunnel_enabled(self):
        """
        Gets the reverse_tunnel_enabled of this Cluster.
        If 'true', Cohesity's Remote Tunnel is enabled. Cohesity can access the Cluster and provide remote assistance via a Remote Tunnel.

        :return: The reverse_tunnel_enabled of this Cluster.
        :rtype: bool
        """
        return self._reverse_tunnel_enabled

    @reverse_tunnel_enabled.setter
    def reverse_tunnel_enabled(self, reverse_tunnel_enabled):
        """
        Sets the reverse_tunnel_enabled of this Cluster.
        If 'true', Cohesity's Remote Tunnel is enabled. Cohesity can access the Cluster and provide remote assistance via a Remote Tunnel.

        :param reverse_tunnel_enabled: The reverse_tunnel_enabled of this Cluster.
        :type: bool
        """

        self._reverse_tunnel_enabled = reverse_tunnel_enabled

    @property
    def smb_ad_disabled(self):
        """
        Gets the smb_ad_disabled of this Cluster.
        Specifies if Active Directory should be disabled for authentication of SMB shares. If 'true', Active Directory is disabled.

        :return: The smb_ad_disabled of this Cluster.
        :rtype: bool
        """
        return self._smb_ad_disabled

    @smb_ad_disabled.setter
    def smb_ad_disabled(self, smb_ad_disabled):
        """
        Sets the smb_ad_disabled of this Cluster.
        Specifies if Active Directory should be disabled for authentication of SMB shares. If 'true', Active Directory is disabled.

        :param smb_ad_disabled: The smb_ad_disabled of this Cluster.
        :type: bool
        """

        self._smb_ad_disabled = smb_ad_disabled

    @property
    def stats(self):
        """
        Gets the stats of this Cluster.
        Specifies statistics about this Cohesity Cluster.

        :return: The stats of this Cluster.
        :rtype: ClusterStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """
        Sets the stats of this Cluster.
        Specifies statistics about this Cohesity Cluster.

        :param stats: The stats of this Cluster.
        :type: ClusterStats
        """

        self._stats = stats

    @property
    def supported_config(self):
        """
        Gets the supported_config of this Cluster.
        Information about supported configuration. For example, it contains minimum number of nodes supported for the cluster.

        :return: The supported_config of this Cluster.
        :rtype: SupportedConfig
        """
        return self._supported_config

    @supported_config.setter
    def supported_config(self, supported_config):
        """
        Sets the supported_config of this Cluster.
        Information about supported configuration. For example, it contains minimum number of nodes supported for the cluster.

        :param supported_config: The supported_config of this Cluster.
        :type: SupportedConfig
        """

        self._supported_config = supported_config

    @property
    def syslog_servers(self):
        """
        Gets the syslog_servers of this Cluster.
        Specifies a list of Syslog servers to send audit logs to.

        :return: The syslog_servers of this Cluster.
        :rtype: list[SyslogServer]
        """
        return self._syslog_servers

    @syslog_servers.setter
    def syslog_servers(self, syslog_servers):
        """
        Sets the syslog_servers of this Cluster.
        Specifies a list of Syslog servers to send audit logs to.

        :param syslog_servers: The syslog_servers of this Cluster.
        :type: list[SyslogServer]
        """

        self._syslog_servers = syslog_servers

    @property
    def target_software_version(self):
        """
        Gets the target_software_version of this Cluster.
        Specifies the Cohesity release that this Cluster is being upgraded to if an upgrade operation is in progress.

        :return: The target_software_version of this Cluster.
        :rtype: str
        """
        return self._target_software_version

    @target_software_version.setter
    def target_software_version(self, target_software_version):
        """
        Sets the target_software_version of this Cluster.
        Specifies the Cohesity release that this Cluster is being upgraded to if an upgrade operation is in progress.

        :param target_software_version: The target_software_version of this Cluster.
        :type: str
        """

        self._target_software_version = target_software_version

    @property
    def timezone(self):
        """
        Gets the timezone of this Cluster.
        Specifies the timezone to use for showing time in emails, reports, filer audit logs, etc.

        :return: The timezone of this Cluster.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this Cluster.
        Specifies the timezone to use for showing time in emails, reports, filer audit logs, etc.

        :param timezone: The timezone of this Cluster.
        :type: str
        """

        self._timezone = timezone

    @property
    def turbo_mode(self):
        """
        Gets the turbo_mode of this Cluster.
        Specifies if the cluster is in Turbo mode.

        :return: The turbo_mode of this Cluster.
        :rtype: bool
        """
        return self._turbo_mode

    @turbo_mode.setter
    def turbo_mode(self, turbo_mode):
        """
        Sets the turbo_mode of this Cluster.
        Specifies if the cluster is in Turbo mode.

        :param turbo_mode: The turbo_mode of this Cluster.
        :type: bool
        """

        self._turbo_mode = turbo_mode

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
