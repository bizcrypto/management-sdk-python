# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, output_format=None, parameters=None, type=None):
        """
        SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'output_format': 'str',
            'parameters': 'SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReportParameters',
            'type': 'str'
        }

        self.attribute_map = {
            'output_format': 'outputFormat',
            'parameters': 'parameters',
            'type': 'type'
        }

        self._output_format = output_format
        self._parameters = parameters
        self._type = type

    @property
    def output_format(self):
        """
        Gets the output_format of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.
        Specifies the output format of the report.

        :return: The output_format of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """
        Sets the output_format of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.
        Specifies the output format of the report.

        :param output_format: The output_format of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.
        :type: str
        """

        self._output_format = output_format

    @property
    def parameters(self):
        """
        Gets the parameters of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.


        :return: The parameters of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.
        :rtype: SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReportParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """
        Sets the parameters of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.


        :param parameters: The parameters of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.
        :type: SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReportParameters
        """

        self._parameters = parameters

    @property
    def type(self):
        """
        Gets the type of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.
        Specifies the report type. The enum which has all the various report types. kAvailableLocalSnapshotsReport, kBackupSummarySReport, kFailedObjectsReport, kProtectionDetailsPerObjectReport, kProtectionJobsInventoryAndScheduleReport, kProtectionSummaryByObjectTypeReport, kSourceGrowthAndVarianceReport, kStorageConsumedByBackupReport, kStorageConsumedByFileCategoriesReport, kStorageConsumedByServersReport, kStorageConsumedByViewBoxReport, kDataTransferredToExternalTargetsReports,

        :return: The type of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.
        Specifies the report type. The enum which has all the various report types. kAvailableLocalSnapshotsReport, kBackupSummarySReport, kFailedObjectsReport, kProtectionDetailsPerObjectReport, kProtectionJobsInventoryAndScheduleReport, kProtectionSummaryByObjectTypeReport, kSourceGrowthAndVarianceReport, kStorageConsumedByBackupReport, kStorageConsumedByFileCategoriesReport, kStorageConsumedByServersReport, kStorageConsumedByViewBoxReport, kDataTransferredToExternalTargetsReports,

        :param type: The type of this SchedulerProtoSchedulerJobScheduleJobParametersReportJobParameterReport.
        :type: str
        """
        allowed_values = ["kUnprotectedVMsReport"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
