# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class FileSnapshotInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, has_archival_copy=None, has_local_copy=None, has_remote_copy=None, modified_time_usecs=None, size_bytes=None, snapshot=None):
        """
        FileSnapshotInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'has_archival_copy': 'bool',
            'has_local_copy': 'bool',
            'has_remote_copy': 'bool',
            'modified_time_usecs': 'int',
            'size_bytes': 'int',
            'snapshot': 'SnapshotAttempt'
        }

        self.attribute_map = {
            'has_archival_copy': 'hasArchivalCopy',
            'has_local_copy': 'hasLocalCopy',
            'has_remote_copy': 'hasRemoteCopy',
            'modified_time_usecs': 'modifiedTimeUsecs',
            'size_bytes': 'sizeBytes',
            'snapshot': 'snapshot'
        }

        self._has_archival_copy = has_archival_copy
        self._has_local_copy = has_local_copy
        self._has_remote_copy = has_remote_copy
        self._modified_time_usecs = modified_time_usecs
        self._size_bytes = size_bytes
        self._snapshot = snapshot

    @property
    def has_archival_copy(self):
        """
        Gets the has_archival_copy of this FileSnapshotInformation.
        If true, this snapshot is located on an archival target (such as a tape or AWS).

        :return: The has_archival_copy of this FileSnapshotInformation.
        :rtype: bool
        """
        return self._has_archival_copy

    @has_archival_copy.setter
    def has_archival_copy(self, has_archival_copy):
        """
        Sets the has_archival_copy of this FileSnapshotInformation.
        If true, this snapshot is located on an archival target (such as a tape or AWS).

        :param has_archival_copy: The has_archival_copy of this FileSnapshotInformation.
        :type: bool
        """

        self._has_archival_copy = has_archival_copy

    @property
    def has_local_copy(self):
        """
        Gets the has_local_copy of this FileSnapshotInformation.
        If true, this snapshot is located on a local Cohesity Cluster.

        :return: The has_local_copy of this FileSnapshotInformation.
        :rtype: bool
        """
        return self._has_local_copy

    @has_local_copy.setter
    def has_local_copy(self, has_local_copy):
        """
        Sets the has_local_copy of this FileSnapshotInformation.
        If true, this snapshot is located on a local Cohesity Cluster.

        :param has_local_copy: The has_local_copy of this FileSnapshotInformation.
        :type: bool
        """

        self._has_local_copy = has_local_copy

    @property
    def has_remote_copy(self):
        """
        Gets the has_remote_copy of this FileSnapshotInformation.
        If true, this snapshot is located on a Remote Cohesity Cluster.

        :return: The has_remote_copy of this FileSnapshotInformation.
        :rtype: bool
        """
        return self._has_remote_copy

    @has_remote_copy.setter
    def has_remote_copy(self, has_remote_copy):
        """
        Sets the has_remote_copy of this FileSnapshotInformation.
        If true, this snapshot is located on a Remote Cohesity Cluster.

        :param has_remote_copy: The has_remote_copy of this FileSnapshotInformation.
        :type: bool
        """

        self._has_remote_copy = has_remote_copy

    @property
    def modified_time_usecs(self):
        """
        Gets the modified_time_usecs of this FileSnapshotInformation.
        Specifies the time when the file or folder was last modified. Specified as a Unix epoch Timestamp (in microseconds).

        :return: The modified_time_usecs of this FileSnapshotInformation.
        :rtype: int
        """
        return self._modified_time_usecs

    @modified_time_usecs.setter
    def modified_time_usecs(self, modified_time_usecs):
        """
        Sets the modified_time_usecs of this FileSnapshotInformation.
        Specifies the time when the file or folder was last modified. Specified as a Unix epoch Timestamp (in microseconds).

        :param modified_time_usecs: The modified_time_usecs of this FileSnapshotInformation.
        :type: int
        """

        self._modified_time_usecs = modified_time_usecs

    @property
    def size_bytes(self):
        """
        Gets the size_bytes of this FileSnapshotInformation.
        Specifies the size of the file or folder in bytes.

        :return: The size_bytes of this FileSnapshotInformation.
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """
        Sets the size_bytes of this FileSnapshotInformation.
        Specifies the size of the file or folder in bytes.

        :param size_bytes: The size_bytes of this FileSnapshotInformation.
        :type: int
        """

        self._size_bytes = size_bytes

    @property
    def snapshot(self):
        """
        Gets the snapshot of this FileSnapshotInformation.
        Specifies the snapshot that contains the specified file or folder.

        :return: The snapshot of this FileSnapshotInformation.
        :rtype: SnapshotAttempt
        """
        return self._snapshot

    @snapshot.setter
    def snapshot(self, snapshot):
        """
        Sets the snapshot of this FileSnapshotInformation.
        Specifies the snapshot that contains the specified file or folder.

        :param snapshot: The snapshot of this FileSnapshotInformation.
        :type: SnapshotAttempt
        """

        self._snapshot = snapshot

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
