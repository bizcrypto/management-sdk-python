# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SnapshotCopyTask(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, copy_status=None, expiry_time_usecs=None, message=None, snapshot_target=None):
        """
        SnapshotCopyTask - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'copy_status': 'str',
            'expiry_time_usecs': 'int',
            'message': 'str',
            'snapshot_target': 'SnapshotTarget'
        }

        self.attribute_map = {
            'copy_status': 'copyStatus',
            'expiry_time_usecs': 'expiryTimeUsecs',
            'message': 'message',
            'snapshot_target': 'snapshotTarget'
        }

        self._copy_status = copy_status
        self._expiry_time_usecs = expiry_time_usecs
        self._message = message
        self._snapshot_target = snapshot_target

    @property
    def copy_status(self):
        """
        Gets the copy_status of this SnapshotCopyTask.
        Specifies the status of the copy task.

        :return: The copy_status of this SnapshotCopyTask.
        :rtype: str
        """
        return self._copy_status

    @copy_status.setter
    def copy_status(self, copy_status):
        """
        Sets the copy_status of this SnapshotCopyTask.
        Specifies the status of the copy task.

        :param copy_status: The copy_status of this SnapshotCopyTask.
        :type: str
        """

        self._copy_status = copy_status

    @property
    def expiry_time_usecs(self):
        """
        Gets the expiry_time_usecs of this SnapshotCopyTask.
        Specifies when the Snapshot expires on the target.

        :return: The expiry_time_usecs of this SnapshotCopyTask.
        :rtype: int
        """
        return self._expiry_time_usecs

    @expiry_time_usecs.setter
    def expiry_time_usecs(self, expiry_time_usecs):
        """
        Sets the expiry_time_usecs of this SnapshotCopyTask.
        Specifies when the Snapshot expires on the target.

        :param expiry_time_usecs: The expiry_time_usecs of this SnapshotCopyTask.
        :type: int
        """

        self._expiry_time_usecs = expiry_time_usecs

    @property
    def message(self):
        """
        Gets the message of this SnapshotCopyTask.
        Specifies warning or error information when the copy task is not successful.

        :return: The message of this SnapshotCopyTask.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this SnapshotCopyTask.
        Specifies warning or error information when the copy task is not successful.

        :param message: The message of this SnapshotCopyTask.
        :type: str
        """

        self._message = message

    @property
    def snapshot_target(self):
        """
        Gets the snapshot_target of this SnapshotCopyTask.
        Specifies the target location where the Snapshot was copied to.

        :return: The snapshot_target of this SnapshotCopyTask.
        :rtype: SnapshotTarget
        """
        return self._snapshot_target

    @snapshot_target.setter
    def snapshot_target(self, snapshot_target):
        """
        Sets the snapshot_target of this SnapshotCopyTask.
        Specifies the target location where the Snapshot was copied to.

        :param snapshot_target: The snapshot_target of this SnapshotCopyTask.
        :type: SnapshotTarget
        """

        self._snapshot_target = snapshot_target

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
