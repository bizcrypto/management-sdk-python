# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class NetappVolumeInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, aggregate_name=None, capacity_bytes=None, cifs_shares=None, creation_time_usecs=None, data_protocols=None, export_policy_name=None, junction_path=None, name=None, security_info=None, state=None, type=None, used_bytes=None):
        """
        NetappVolumeInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'aggregate_name': 'str',
            'capacity_bytes': 'int',
            'cifs_shares': 'list[CifsShareInfo]',
            'creation_time_usecs': 'int',
            'data_protocols': 'list[str]',
            'export_policy_name': 'str',
            'junction_path': 'str',
            'name': 'str',
            'security_info': 'VolumeSecurityInfo',
            'state': 'str',
            'type': 'str',
            'used_bytes': 'int'
        }

        self.attribute_map = {
            'aggregate_name': 'aggregateName',
            'capacity_bytes': 'capacityBytes',
            'cifs_shares': 'cifsShares',
            'creation_time_usecs': 'creationTimeUsecs',
            'data_protocols': 'dataProtocols',
            'export_policy_name': 'exportPolicyName',
            'junction_path': 'junctionPath',
            'name': 'name',
            'security_info': 'securityInfo',
            'state': 'state',
            'type': 'type',
            'used_bytes': 'usedBytes'
        }

        self._aggregate_name = aggregate_name
        self._capacity_bytes = capacity_bytes
        self._cifs_shares = cifs_shares
        self._creation_time_usecs = creation_time_usecs
        self._data_protocols = data_protocols
        self._export_policy_name = export_policy_name
        self._junction_path = junction_path
        self._name = name
        self._security_info = security_info
        self._state = state
        self._type = type
        self._used_bytes = used_bytes

    @property
    def aggregate_name(self):
        """
        Gets the aggregate_name of this NetappVolumeInfo.
        Specifies the containing aggregate name of this volume.

        :return: The aggregate_name of this NetappVolumeInfo.
        :rtype: str
        """
        return self._aggregate_name

    @aggregate_name.setter
    def aggregate_name(self, aggregate_name):
        """
        Sets the aggregate_name of this NetappVolumeInfo.
        Specifies the containing aggregate name of this volume.

        :param aggregate_name: The aggregate_name of this NetappVolumeInfo.
        :type: str
        """

        self._aggregate_name = aggregate_name

    @property
    def capacity_bytes(self):
        """
        Gets the capacity_bytes of this NetappVolumeInfo.
        Specifies the total capacity in bytes of this volume.

        :return: The capacity_bytes of this NetappVolumeInfo.
        :rtype: int
        """
        return self._capacity_bytes

    @capacity_bytes.setter
    def capacity_bytes(self, capacity_bytes):
        """
        Sets the capacity_bytes of this NetappVolumeInfo.
        Specifies the total capacity in bytes of this volume.

        :param capacity_bytes: The capacity_bytes of this NetappVolumeInfo.
        :type: int
        """

        self._capacity_bytes = capacity_bytes

    @property
    def cifs_shares(self):
        """
        Gets the cifs_shares of this NetappVolumeInfo.
        Specifies the set of CIFS Shares exported for this volume.

        :return: The cifs_shares of this NetappVolumeInfo.
        :rtype: list[CifsShareInfo]
        """
        return self._cifs_shares

    @cifs_shares.setter
    def cifs_shares(self, cifs_shares):
        """
        Sets the cifs_shares of this NetappVolumeInfo.
        Specifies the set of CIFS Shares exported for this volume.

        :param cifs_shares: The cifs_shares of this NetappVolumeInfo.
        :type: list[CifsShareInfo]
        """

        self._cifs_shares = cifs_shares

    @property
    def creation_time_usecs(self):
        """
        Gets the creation_time_usecs of this NetappVolumeInfo.
        Specifies the creation time of the volume specified in Unix epoch time (in microseconds).

        :return: The creation_time_usecs of this NetappVolumeInfo.
        :rtype: int
        """
        return self._creation_time_usecs

    @creation_time_usecs.setter
    def creation_time_usecs(self, creation_time_usecs):
        """
        Sets the creation_time_usecs of this NetappVolumeInfo.
        Specifies the creation time of the volume specified in Unix epoch time (in microseconds).

        :param creation_time_usecs: The creation_time_usecs of this NetappVolumeInfo.
        :type: int
        """

        self._creation_time_usecs = creation_time_usecs

    @property
    def data_protocols(self):
        """
        Gets the data_protocols of this NetappVolumeInfo.
        Specifies the set of data protocols supported by this volume. 'kNfs' indicates NFS connections. 'kCifs' indicates SMB (CIFS) connections. 'kIscsi' indicates iSCSI connections. 'kFc' indicates Fiber Channel connections. 'kFcache' indicates Flex Cache connections. 'kHttp' indicates HTTP connections. 'kNdmp' indicates NDMP connections. 'kManagement' indicates non-data connections used for management purposes.

        :return: The data_protocols of this NetappVolumeInfo.
        :rtype: list[str]
        """
        return self._data_protocols

    @data_protocols.setter
    def data_protocols(self, data_protocols):
        """
        Sets the data_protocols of this NetappVolumeInfo.
        Specifies the set of data protocols supported by this volume. 'kNfs' indicates NFS connections. 'kCifs' indicates SMB (CIFS) connections. 'kIscsi' indicates iSCSI connections. 'kFc' indicates Fiber Channel connections. 'kFcache' indicates Flex Cache connections. 'kHttp' indicates HTTP connections. 'kNdmp' indicates NDMP connections. 'kManagement' indicates non-data connections used for management purposes.

        :param data_protocols: The data_protocols of this NetappVolumeInfo.
        :type: list[str]
        """
        allowed_values = ["kNfs", "kCifs", "kIscsi", "kFc", "kFcache", "kHttp", "kNdmp", "kManagement"]
        if data_protocols not in allowed_values:
            raise ValueError(
                "Invalid value for `data_protocols` ({0}), must be one of {1}"
                .format(data_protocols, allowed_values)
            )

        self._data_protocols = data_protocols

    @property
    def export_policy_name(self):
        """
        Gets the export_policy_name of this NetappVolumeInfo.
        Specifies the name of the export policy (which defines the access permissions for the mount client) that has been assigned to this volume.

        :return: The export_policy_name of this NetappVolumeInfo.
        :rtype: str
        """
        return self._export_policy_name

    @export_policy_name.setter
    def export_policy_name(self, export_policy_name):
        """
        Sets the export_policy_name of this NetappVolumeInfo.
        Specifies the name of the export policy (which defines the access permissions for the mount client) that has been assigned to this volume.

        :param export_policy_name: The export_policy_name of this NetappVolumeInfo.
        :type: str
        """

        self._export_policy_name = export_policy_name

    @property
    def junction_path(self):
        """
        Gets the junction_path of this NetappVolumeInfo.
        Specifies the junction path of this volume. This path can be used to mount this volume via protocols such as NFS.

        :return: The junction_path of this NetappVolumeInfo.
        :rtype: str
        """
        return self._junction_path

    @junction_path.setter
    def junction_path(self, junction_path):
        """
        Sets the junction_path of this NetappVolumeInfo.
        Specifies the junction path of this volume. This path can be used to mount this volume via protocols such as NFS.

        :param junction_path: The junction_path of this NetappVolumeInfo.
        :type: str
        """

        self._junction_path = junction_path

    @property
    def name(self):
        """
        Gets the name of this NetappVolumeInfo.
        Specifies the name of the NetApp Vserver that this volume belongs to.

        :return: The name of this NetappVolumeInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NetappVolumeInfo.
        Specifies the name of the NetApp Vserver that this volume belongs to.

        :param name: The name of this NetappVolumeInfo.
        :type: str
        """

        self._name = name

    @property
    def security_info(self):
        """
        Gets the security_info of this NetappVolumeInfo.
        Specifies the security information of this volume.

        :return: The security_info of this NetappVolumeInfo.
        :rtype: VolumeSecurityInfo
        """
        return self._security_info

    @security_info.setter
    def security_info(self, security_info):
        """
        Sets the security_info of this NetappVolumeInfo.
        Specifies the security information of this volume.

        :param security_info: The security_info of this NetappVolumeInfo.
        :type: VolumeSecurityInfo
        """

        self._security_info = security_info

    @property
    def state(self):
        """
        Gets the state of this NetappVolumeInfo.
        Specifies the state of this volume. Specifies the state of a NetApp Volume. 'kOnline' indicates the volume is online. Read and write access to this volume is allowed. 'kRestricted' indicates the volume is restricted. Some operations, such as parity reconstruction, are allowed, but data access is not allowed. 'kOffline' indicates the volume is offline. No access to the volume is allowed. 'kMixed' indicates the volume is in mixed state, which means its aggregates are not all in the same state. 'kUnknownState' indicates the volume is in an unknown state.

        :return: The state of this NetappVolumeInfo.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this NetappVolumeInfo.
        Specifies the state of this volume. Specifies the state of a NetApp Volume. 'kOnline' indicates the volume is online. Read and write access to this volume is allowed. 'kRestricted' indicates the volume is restricted. Some operations, such as parity reconstruction, are allowed, but data access is not allowed. 'kOffline' indicates the volume is offline. No access to the volume is allowed. 'kMixed' indicates the volume is in mixed state, which means its aggregates are not all in the same state. 'kUnknownState' indicates the volume is in an unknown state.

        :param state: The state of this NetappVolumeInfo.
        :type: str
        """
        allowed_values = ["kReadWrite", "kLoadSharing", "kDataProtection", "kDataCache", "kTmp", "kUnknownType"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """
        Gets the type of this NetappVolumeInfo.
        Specifies the NetApp type of this volume. Specifies the type of a NetApp Volume. 'kReadWrite' indicates read-write volume. 'kLoadSharing' indicates load-sharing volume. 'kDataProtection' indicates data-protection volume. 'kDataCache' indicates data-cache volume. 'kTmp' indicates temporaray purpose. 'kUnknownType' indicates unknown type.

        :return: The type of this NetappVolumeInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this NetappVolumeInfo.
        Specifies the NetApp type of this volume. Specifies the type of a NetApp Volume. 'kReadWrite' indicates read-write volume. 'kLoadSharing' indicates load-sharing volume. 'kDataProtection' indicates data-protection volume. 'kDataCache' indicates data-cache volume. 'kTmp' indicates temporaray purpose. 'kUnknownType' indicates unknown type.

        :param type: The type of this NetappVolumeInfo.
        :type: str
        """
        allowed_values = ["kReadWrite", "kLoadSharing", "kDataProtection", "kDataCache", "kTmp", "kUnknownType"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def used_bytes(self):
        """
        Gets the used_bytes of this NetappVolumeInfo.
        Specifies the total space (in bytes) used in this volume.

        :return: The used_bytes of this NetappVolumeInfo.
        :rtype: int
        """
        return self._used_bytes

    @used_bytes.setter
    def used_bytes(self, used_bytes):
        """
        Sets the used_bytes of this NetappVolumeInfo.
        Specifies the total space (in bytes) used in this volume.

        :param used_bytes: The used_bytes of this NetappVolumeInfo.
        :type: int
        """

        self._used_bytes = used_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
