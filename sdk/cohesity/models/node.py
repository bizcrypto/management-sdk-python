# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Node(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, capacity_by_tier=None, chassis_info=None, cluster_partition_id=None, cluster_partition_name=None, disk_count=None, id=None, ip=None, is_marked_for_removal=None, max_physical_capacity_bytes=None, node_hardware_info=None, node_incarnation_id=None, node_software_version=None, offline_mount_paths_of_disks=None, removal_state=None, stats=None, system_disks=None):
        """
        Node - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'capacity_by_tier': 'list[CapacityByTier]',
            'chassis_info': 'ChassisInfo',
            'cluster_partition_id': 'int',
            'cluster_partition_name': 'str',
            'disk_count': 'int',
            'id': 'int',
            'ip': 'str',
            'is_marked_for_removal': 'bool',
            'max_physical_capacity_bytes': 'int',
            'node_hardware_info': 'NodeHardwareInfo',
            'node_incarnation_id': 'int',
            'node_software_version': 'str',
            'offline_mount_paths_of_disks': 'list[str]',
            'removal_state': 'str',
            'stats': 'NodeStats',
            'system_disks': 'list[NodeSystemDiskInfo]'
        }

        self.attribute_map = {
            'capacity_by_tier': 'capacityByTier',
            'chassis_info': 'chassisInfo',
            'cluster_partition_id': 'clusterPartitionId',
            'cluster_partition_name': 'clusterPartitionName',
            'disk_count': 'diskCount',
            'id': 'id',
            'ip': 'ip',
            'is_marked_for_removal': 'isMarkedForRemoval',
            'max_physical_capacity_bytes': 'maxPhysicalCapacityBytes',
            'node_hardware_info': 'nodeHardwareInfo',
            'node_incarnation_id': 'nodeIncarnationId',
            'node_software_version': 'nodeSoftwareVersion',
            'offline_mount_paths_of_disks': 'offlineMountPathsOfDisks',
            'removal_state': 'removalState',
            'stats': 'stats',
            'system_disks': 'systemDisks'
        }

        self._capacity_by_tier = capacity_by_tier
        self._chassis_info = chassis_info
        self._cluster_partition_id = cluster_partition_id
        self._cluster_partition_name = cluster_partition_name
        self._disk_count = disk_count
        self._id = id
        self._ip = ip
        self._is_marked_for_removal = is_marked_for_removal
        self._max_physical_capacity_bytes = max_physical_capacity_bytes
        self._node_hardware_info = node_hardware_info
        self._node_incarnation_id = node_incarnation_id
        self._node_software_version = node_software_version
        self._offline_mount_paths_of_disks = offline_mount_paths_of_disks
        self._removal_state = removal_state
        self._stats = stats
        self._system_disks = system_disks

    @property
    def capacity_by_tier(self):
        """
        Gets the capacity_by_tier of this Node.


        :return: The capacity_by_tier of this Node.
        :rtype: list[CapacityByTier]
        """
        return self._capacity_by_tier

    @capacity_by_tier.setter
    def capacity_by_tier(self, capacity_by_tier):
        """
        Sets the capacity_by_tier of this Node.


        :param capacity_by_tier: The capacity_by_tier of this Node.
        :type: list[CapacityByTier]
        """

        self._capacity_by_tier = capacity_by_tier

    @property
    def chassis_info(self):
        """
        Gets the chassis_info of this Node.
        ChassisInfo describes the information for the chassis of the node.

        :return: The chassis_info of this Node.
        :rtype: ChassisInfo
        """
        return self._chassis_info

    @chassis_info.setter
    def chassis_info(self, chassis_info):
        """
        Sets the chassis_info of this Node.
        ChassisInfo describes the information for the chassis of the node.

        :param chassis_info: The chassis_info of this Node.
        :type: ChassisInfo
        """

        self._chassis_info = chassis_info

    @property
    def cluster_partition_id(self):
        """
        Gets the cluster_partition_id of this Node.
        ClusterPartitionId is the Id of the cluster partition to which the Node belongs.

        :return: The cluster_partition_id of this Node.
        :rtype: int
        """
        return self._cluster_partition_id

    @cluster_partition_id.setter
    def cluster_partition_id(self, cluster_partition_id):
        """
        Sets the cluster_partition_id of this Node.
        ClusterPartitionId is the Id of the cluster partition to which the Node belongs.

        :param cluster_partition_id: The cluster_partition_id of this Node.
        :type: int
        """

        self._cluster_partition_id = cluster_partition_id

    @property
    def cluster_partition_name(self):
        """
        Gets the cluster_partition_name of this Node.
        ClusterPartitionName is the name of the cluster to which the Node belongs.

        :return: The cluster_partition_name of this Node.
        :rtype: str
        """
        return self._cluster_partition_name

    @cluster_partition_name.setter
    def cluster_partition_name(self, cluster_partition_name):
        """
        Sets the cluster_partition_name of this Node.
        ClusterPartitionName is the name of the cluster to which the Node belongs.

        :param cluster_partition_name: The cluster_partition_name of this Node.
        :type: str
        """

        self._cluster_partition_name = cluster_partition_name

    @property
    def disk_count(self):
        """
        Gets the disk_count of this Node.
        DiskCount is the number of disks in a node.

        :return: The disk_count of this Node.
        :rtype: int
        """
        return self._disk_count

    @disk_count.setter
    def disk_count(self, disk_count):
        """
        Sets the disk_count of this Node.
        DiskCount is the number of disks in a node.

        :param disk_count: The disk_count of this Node.
        :type: int
        """

        self._disk_count = disk_count

    @property
    def id(self):
        """
        Gets the id of this Node.
        Id is the Id of the Node.

        :return: The id of this Node.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Node.
        Id is the Id of the Node.

        :param id: The id of this Node.
        :type: int
        """

        self._id = id

    @property
    def ip(self):
        """
        Gets the ip of this Node.
        Ip is the IP address of the Node.

        :return: The ip of this Node.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this Node.
        Ip is the IP address of the Node.

        :param ip: The ip of this Node.
        :type: str
        """

        self._ip = ip

    @property
    def is_marked_for_removal(self):
        """
        Gets the is_marked_for_removal of this Node.
        IsMarkedForRemoval specifies whether the node has been marked for removal.

        :return: The is_marked_for_removal of this Node.
        :rtype: bool
        """
        return self._is_marked_for_removal

    @is_marked_for_removal.setter
    def is_marked_for_removal(self, is_marked_for_removal):
        """
        Sets the is_marked_for_removal of this Node.
        IsMarkedForRemoval specifies whether the node has been marked for removal.

        :param is_marked_for_removal: The is_marked_for_removal of this Node.
        :type: bool
        """

        self._is_marked_for_removal = is_marked_for_removal

    @property
    def max_physical_capacity_bytes(self):
        """
        Gets the max_physical_capacity_bytes of this Node.
        MaxPhysicalCapacityBytes specifies the maximum physical capacity of the node in bytes.

        :return: The max_physical_capacity_bytes of this Node.
        :rtype: int
        """
        return self._max_physical_capacity_bytes

    @max_physical_capacity_bytes.setter
    def max_physical_capacity_bytes(self, max_physical_capacity_bytes):
        """
        Sets the max_physical_capacity_bytes of this Node.
        MaxPhysicalCapacityBytes specifies the maximum physical capacity of the node in bytes.

        :param max_physical_capacity_bytes: The max_physical_capacity_bytes of this Node.
        :type: int
        """

        self._max_physical_capacity_bytes = max_physical_capacity_bytes

    @property
    def node_hardware_info(self):
        """
        Gets the node_hardware_info of this Node.
        HardwareInfo describes the hardware of the node.

        :return: The node_hardware_info of this Node.
        :rtype: NodeHardwareInfo
        """
        return self._node_hardware_info

    @node_hardware_info.setter
    def node_hardware_info(self, node_hardware_info):
        """
        Sets the node_hardware_info of this Node.
        HardwareInfo describes the hardware of the node.

        :param node_hardware_info: The node_hardware_info of this Node.
        :type: NodeHardwareInfo
        """

        self._node_hardware_info = node_hardware_info

    @property
    def node_incarnation_id(self):
        """
        Gets the node_incarnation_id of this Node.
        NodeIncarnationId is the incarnation id  of this node. The incarnation id is changed every time the data is wiped from the node. Various services on a node is only run if incarnation id of the node matches the incarnation id of the cluster. Whenever a mismatch is detected, Nexus will stop all services and clean the data from the node. After clean operation is completed, Nexus will set the node incarnation id to cluster incarnation id and start the services.

        :return: The node_incarnation_id of this Node.
        :rtype: int
        """
        return self._node_incarnation_id

    @node_incarnation_id.setter
    def node_incarnation_id(self, node_incarnation_id):
        """
        Sets the node_incarnation_id of this Node.
        NodeIncarnationId is the incarnation id  of this node. The incarnation id is changed every time the data is wiped from the node. Various services on a node is only run if incarnation id of the node matches the incarnation id of the cluster. Whenever a mismatch is detected, Nexus will stop all services and clean the data from the node. After clean operation is completed, Nexus will set the node incarnation id to cluster incarnation id and start the services.

        :param node_incarnation_id: The node_incarnation_id of this Node.
        :type: int
        """

        self._node_incarnation_id = node_incarnation_id

    @property
    def node_software_version(self):
        """
        Gets the node_software_version of this Node.
        NodeSoftwareVersion is the current version of Cohesity software installed on a node.

        :return: The node_software_version of this Node.
        :rtype: str
        """
        return self._node_software_version

    @node_software_version.setter
    def node_software_version(self, node_software_version):
        """
        Sets the node_software_version of this Node.
        NodeSoftwareVersion is the current version of Cohesity software installed on a node.

        :param node_software_version: The node_software_version of this Node.
        :type: str
        """

        self._node_software_version = node_software_version

    @property
    def offline_mount_paths_of_disks(self):
        """
        Gets the offline_mount_paths_of_disks of this Node.
        OfflineMountPathsOfDisks provides the corresponding mount paths for direct attached disks that are currently offline - access to these were detected to hang sometime in the past. After these disks have been fixed, their mount paths needs to be removed from the following list before these will be accessed again.

        :return: The offline_mount_paths_of_disks of this Node.
        :rtype: list[str]
        """
        return self._offline_mount_paths_of_disks

    @offline_mount_paths_of_disks.setter
    def offline_mount_paths_of_disks(self, offline_mount_paths_of_disks):
        """
        Sets the offline_mount_paths_of_disks of this Node.
        OfflineMountPathsOfDisks provides the corresponding mount paths for direct attached disks that are currently offline - access to these were detected to hang sometime in the past. After these disks have been fixed, their mount paths needs to be removed from the following list before these will be accessed again.

        :param offline_mount_paths_of_disks: The offline_mount_paths_of_disks of this Node.
        :type: list[str]
        """

        self._offline_mount_paths_of_disks = offline_mount_paths_of_disks

    @property
    def removal_state(self):
        """
        Gets the removal_state of this Node.
        RemovalState specifies the removal state of the node. 'kDontRemove' means the state of object is functional and it is not being removed. 'kMarkedForRemoval' means the object is being removed. 'kOkToRemove' means the object has been removed on the Cohesity Cluster and if the object is physical, it can be removed from the Cohesity Cluster.

        :return: The removal_state of this Node.
        :rtype: str
        """
        return self._removal_state

    @removal_state.setter
    def removal_state(self, removal_state):
        """
        Sets the removal_state of this Node.
        RemovalState specifies the removal state of the node. 'kDontRemove' means the state of object is functional and it is not being removed. 'kMarkedForRemoval' means the object is being removed. 'kOkToRemove' means the object has been removed on the Cohesity Cluster and if the object is physical, it can be removed from the Cohesity Cluster.

        :param removal_state: The removal_state of this Node.
        :type: str
        """
        allowed_values = ["kDontRemove", "kMarkedForRemoval", "kOkToRemove"]
        if removal_state not in allowed_values:
            raise ValueError(
                "Invalid value for `removal_state` ({0}), must be one of {1}"
                .format(removal_state, allowed_values)
            )

        self._removal_state = removal_state

    @property
    def stats(self):
        """
        Gets the stats of this Node.
        Stats describes the node stats.

        :return: The stats of this Node.
        :rtype: NodeStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """
        Sets the stats of this Node.
        Stats describes the node stats.

        :param stats: The stats of this Node.
        :type: NodeStats
        """

        self._stats = stats

    @property
    def system_disks(self):
        """
        Gets the system_disks of this Node.


        :return: The system_disks of this Node.
        :rtype: list[NodeSystemDiskInfo]
        """
        return self._system_disks

    @system_disks.setter
    def system_disks(self, system_disks):
        """
        Sets the system_disks of this Node.


        :param system_disks: The system_disks of this Node.
        :type: list[NodeSystemDiskInfo]
        """

        self._system_disks = system_disks

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
