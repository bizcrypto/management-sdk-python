# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SmbPermission(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, access=None, mode=None, sid=None, special_access_mask=None, special_type=None, type=None):
        """
        SmbPermission - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'access': 'str',
            'mode': 'str',
            'sid': 'str',
            'special_access_mask': 'int',
            'special_type': 'int',
            'type': 'str'
        }

        self.attribute_map = {
            'access': 'access',
            'mode': 'mode',
            'sid': 'sid',
            'special_access_mask': 'specialAccessMask',
            'special_type': 'specialType',
            'type': 'type'
        }

        self._access = access
        self._mode = mode
        self._sid = sid
        self._special_access_mask = special_access_mask
        self._special_type = special_type
        self._type = type

    @property
    def access(self):
        """
        Gets the access of this SmbPermission.
        Specifies the read/write access to the SMB share. 'kReadyOnly' indicates read only access to the SMB share. 'kReadWrite' indicates read and write access to the SMB share. 'kFullControl' indicates full administrative control of the SMB share. 'kSpecialAccess' indicates custom permissions to the SMB share using access masks structures.

        :return: The access of this SmbPermission.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """
        Sets the access of this SmbPermission.
        Specifies the read/write access to the SMB share. 'kReadyOnly' indicates read only access to the SMB share. 'kReadWrite' indicates read and write access to the SMB share. 'kFullControl' indicates full administrative control of the SMB share. 'kSpecialAccess' indicates custom permissions to the SMB share using access masks structures.

        :param access: The access of this SmbPermission.
        :type: str
        """
        allowed_values = ["kReadOnly", "kReadWrite", "kModify", "kFullControl", "kSpecialAccess"]
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def mode(self):
        """
        Gets the mode of this SmbPermission.
        Specifies how the permission should be applied to folders and/or files.

        :return: The mode of this SmbPermission.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """
        Sets the mode of this SmbPermission.
        Specifies how the permission should be applied to folders and/or files.

        :param mode: The mode of this SmbPermission.
        :type: str
        """
        allowed_values = ["kFolderSubFoldersAndFiles", "kFolderAndSubFolders", "kFolderAndFiles", "kFolderOnly", "kSubFoldersAndFilesOnly", "kSubFoldersOnly", "kFilesOnly"]
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def sid(self):
        """
        Gets the sid of this SmbPermission.
        Specifies the security identifier (SID) of the principal.

        :return: The sid of this SmbPermission.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """
        Sets the sid of this SmbPermission.
        Specifies the security identifier (SID) of the principal.

        :param sid: The sid of this SmbPermission.
        :type: str
        """

        self._sid = sid

    @property
    def special_access_mask(self):
        """
        Gets the special_access_mask of this SmbPermission.
        Specifies custom access permissions. When the access mask from the Access Control Entry (ACE) cannot be mapped to one of the enums in 'access', this field is populated with the custom mask derived from the ACE and 'access' is set to kSpecialAccess. This is a placeholder for storing an unmapped access permission and should not be set when creating and editing a View.

        :return: The special_access_mask of this SmbPermission.
        :rtype: int
        """
        return self._special_access_mask

    @special_access_mask.setter
    def special_access_mask(self, special_access_mask):
        """
        Sets the special_access_mask of this SmbPermission.
        Specifies custom access permissions. When the access mask from the Access Control Entry (ACE) cannot be mapped to one of the enums in 'access', this field is populated with the custom mask derived from the ACE and 'access' is set to kSpecialAccess. This is a placeholder for storing an unmapped access permission and should not be set when creating and editing a View.

        :param special_access_mask: The special_access_mask of this SmbPermission.
        :type: int
        """

        self._special_access_mask = special_access_mask

    @property
    def special_type(self):
        """
        Gets the special_type of this SmbPermission.
        Specifies a custom type. When the type from the Access Control Entry (ACE) cannot be mapped to one of the enums in 'type', this field is populated with the custom type derived from the ACE and 'type' is set to kSpecialType. This is a placeholder for storing an unmapped type and should not be set when creating and editing a View.

        :return: The special_type of this SmbPermission.
        :rtype: int
        """
        return self._special_type

    @special_type.setter
    def special_type(self, special_type):
        """
        Sets the special_type of this SmbPermission.
        Specifies a custom type. When the type from the Access Control Entry (ACE) cannot be mapped to one of the enums in 'type', this field is populated with the custom type derived from the ACE and 'type' is set to kSpecialType. This is a placeholder for storing an unmapped type and should not be set when creating and editing a View.

        :param special_type: The special_type of this SmbPermission.
        :type: int
        """

        self._special_type = special_type

    @property
    def type(self):
        """
        Gets the type of this SmbPermission.
        Specifies the type of permission. 'kAllow' indicates access is allowed. 'kDeny' indicates access is denied. 'kSpecialType' indicates a type defined in the Access Control Entry (ACE) does not map to 'kAllow' or 'kDeny'.

        :return: The type of this SmbPermission.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SmbPermission.
        Specifies the type of permission. 'kAllow' indicates access is allowed. 'kDeny' indicates access is denied. 'kSpecialType' indicates a type defined in the Access Control Entry (ACE) does not map to 'kAllow' or 'kDeny'.

        :param type: The type of this SmbPermission.
        :type: str
        """
        allowed_values = ["kAllow", "kDeny", "kSpecialType"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
