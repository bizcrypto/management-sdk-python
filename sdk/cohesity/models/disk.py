# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Disk(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, disk_blocks=None, disk_format=None, disk_partitions=None, partition_table_format=None, sector_size_bytes=None, uuid=None, vmdk_file_name=None, vmdk_size_bytes=None):
        """
        Disk - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'disk_blocks': 'list[DiskBlock]',
            'disk_format': 'str',
            'disk_partitions': 'list[DiskPartition]',
            'partition_table_format': 'str',
            'sector_size_bytes': 'int',
            'uuid': 'str',
            'vmdk_file_name': 'str',
            'vmdk_size_bytes': 'int'
        }

        self.attribute_map = {
            'disk_blocks': 'diskBlocks',
            'disk_format': 'diskFormat',
            'disk_partitions': 'diskPartitions',
            'partition_table_format': 'partitionTableFormat',
            'sector_size_bytes': 'sectorSizeBytes',
            'uuid': 'uuid',
            'vmdk_file_name': 'vmdkFileName',
            'vmdk_size_bytes': 'vmdkSizeBytes'
        }

        self._disk_blocks = disk_blocks
        self._disk_format = disk_format
        self._disk_partitions = disk_partitions
        self._partition_table_format = partition_table_format
        self._sector_size_bytes = sector_size_bytes
        self._uuid = uuid
        self._vmdk_file_name = vmdk_file_name
        self._vmdk_size_bytes = vmdk_size_bytes

    @property
    def disk_blocks(self):
        """
        Gets the disk_blocks of this Disk.
        Specifies a set of disk blocks by defining the location and offset of disk blocks in a disk.

        :return: The disk_blocks of this Disk.
        :rtype: list[DiskBlock]
        """
        return self._disk_blocks

    @disk_blocks.setter
    def disk_blocks(self, disk_blocks):
        """
        Sets the disk_blocks of this Disk.
        Specifies a set of disk blocks by defining the location and offset of disk blocks in a disk.

        :param disk_blocks: The disk_blocks of this Disk.
        :type: list[DiskBlock]
        """

        self._disk_blocks = disk_blocks

    @property
    def disk_format(self):
        """
        Gets the disk_format of this Disk.
        Specifies the format of the virtual disk. 'kVMDK' indicates VMware's Virtual Disk format. 'kVHD' indicates Microsoft's Virtual Hard Drive format. 'kVHDx' indicates Microsoft's Hyper-V Virtual Hard Drive format.

        :return: The disk_format of this Disk.
        :rtype: str
        """
        return self._disk_format

    @disk_format.setter
    def disk_format(self, disk_format):
        """
        Sets the disk_format of this Disk.
        Specifies the format of the virtual disk. 'kVMDK' indicates VMware's Virtual Disk format. 'kVHD' indicates Microsoft's Virtual Hard Drive format. 'kVHDx' indicates Microsoft's Hyper-V Virtual Hard Drive format.

        :param disk_format: The disk_format of this Disk.
        :type: str
        """
        allowed_values = ["kVMDK", "kVHD", "kVHDx"]
        if disk_format not in allowed_values:
            raise ValueError(
                "Invalid value for `disk_format` ({0}), must be one of {1}"
                .format(disk_format, allowed_values)
            )

        self._disk_format = disk_format

    @property
    def disk_partitions(self):
        """
        Gets the disk_partitions of this Disk.
        Specifies information about all the partitions in this disk.

        :return: The disk_partitions of this Disk.
        :rtype: list[DiskPartition]
        """
        return self._disk_partitions

    @disk_partitions.setter
    def disk_partitions(self, disk_partitions):
        """
        Sets the disk_partitions of this Disk.
        Specifies information about all the partitions in this disk.

        :param disk_partitions: The disk_partitions of this Disk.
        :type: list[DiskPartition]
        """

        self._disk_partitions = disk_partitions

    @property
    def partition_table_format(self):
        """
        Gets the partition_table_format of this Disk.
        Specifies partition table format on a disk. 'kNoPartition' indicates missing partition table. 'kMBRPartition' indicates partition table is in Master Boot Record format. 'kGPTPartition' indicates partition table is in Guid Partition Table format. 'kSGIPartition' indicates partition table uses SGI scheme. 'kSUNPartition' indicates partition table uses SUN scheme.

        :return: The partition_table_format of this Disk.
        :rtype: str
        """
        return self._partition_table_format

    @partition_table_format.setter
    def partition_table_format(self, partition_table_format):
        """
        Sets the partition_table_format of this Disk.
        Specifies partition table format on a disk. 'kNoPartition' indicates missing partition table. 'kMBRPartition' indicates partition table is in Master Boot Record format. 'kGPTPartition' indicates partition table is in Guid Partition Table format. 'kSGIPartition' indicates partition table uses SGI scheme. 'kSUNPartition' indicates partition table uses SUN scheme.

        :param partition_table_format: The partition_table_format of this Disk.
        :type: str
        """
        allowed_values = ["kNoPartition", "kMBRPartition", "kGPTPartition", "kSGIPartition", "kSUNPartition"]
        if partition_table_format not in allowed_values:
            raise ValueError(
                "Invalid value for `partition_table_format` ({0}), must be one of {1}"
                .format(partition_table_format, allowed_values)
            )

        self._partition_table_format = partition_table_format

    @property
    def sector_size_bytes(self):
        """
        Gets the sector_size_bytes of this Disk.
        Specifies the sector size of hard disk. It is used for mapping the disk blocks of the disk file into a linear list of sectors.

        :return: The sector_size_bytes of this Disk.
        :rtype: int
        """
        return self._sector_size_bytes

    @sector_size_bytes.setter
    def sector_size_bytes(self, sector_size_bytes):
        """
        Sets the sector_size_bytes of this Disk.
        Specifies the sector size of hard disk. It is used for mapping the disk blocks of the disk file into a linear list of sectors.

        :param sector_size_bytes: The sector_size_bytes of this Disk.
        :type: int
        """

        self._sector_size_bytes = sector_size_bytes

    @property
    def uuid(self):
        """
        Gets the uuid of this Disk.
        Specifies the disk uuid.

        :return: The uuid of this Disk.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this Disk.
        Specifies the disk uuid.

        :param uuid: The uuid of this Disk.
        :type: str
        """

        self._uuid = uuid

    @property
    def vmdk_file_name(self):
        """
        Gets the vmdk_file_name of this Disk.
        Specifies the disk file name. This is the VMDK name and not the flat file name.

        :return: The vmdk_file_name of this Disk.
        :rtype: str
        """
        return self._vmdk_file_name

    @vmdk_file_name.setter
    def vmdk_file_name(self, vmdk_file_name):
        """
        Sets the vmdk_file_name of this Disk.
        Specifies the disk file name. This is the VMDK name and not the flat file name.

        :param vmdk_file_name: The vmdk_file_name of this Disk.
        :type: str
        """

        self._vmdk_file_name = vmdk_file_name

    @property
    def vmdk_size_bytes(self):
        """
        Gets the vmdk_size_bytes of this Disk.
        Specifies the disk size in bytes.

        :return: The vmdk_size_bytes of this Disk.
        :rtype: int
        """
        return self._vmdk_size_bytes

    @vmdk_size_bytes.setter
    def vmdk_size_bytes(self, vmdk_size_bytes):
        """
        Sets the vmdk_size_bytes of this Disk.
        Specifies the disk size in bytes.

        :param vmdk_size_bytes: The vmdk_size_bytes of this Disk.
        :type: int
        """

        self._vmdk_size_bytes = vmdk_size_bytes

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
