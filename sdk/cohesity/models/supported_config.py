# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SupportedConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, min_nodes_allowed=None, supported_erasure_coding=None):
        """
        SupportedConfig - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'min_nodes_allowed': 'int',
            'supported_erasure_coding': 'list[str]'
        }

        self.attribute_map = {
            'min_nodes_allowed': 'minNodesAllowed',
            'supported_erasure_coding': 'supportedErasureCoding'
        }

        self._min_nodes_allowed = min_nodes_allowed
        self._supported_erasure_coding = supported_erasure_coding

    @property
    def min_nodes_allowed(self):
        """
        Gets the min_nodes_allowed of this SupportedConfig.
        Specifies the minimum number of Nodes supported for this Cluster type. For example, a Cohesity Cluster hosted directly on hardware must have at least 3 Nodes.

        :return: The min_nodes_allowed of this SupportedConfig.
        :rtype: int
        """
        return self._min_nodes_allowed

    @min_nodes_allowed.setter
    def min_nodes_allowed(self, min_nodes_allowed):
        """
        Sets the min_nodes_allowed of this SupportedConfig.
        Specifies the minimum number of Nodes supported for this Cluster type. For example, a Cohesity Cluster hosted directly on hardware must have at least 3 Nodes.

        :param min_nodes_allowed: The min_nodes_allowed of this SupportedConfig.
        :type: int
        """

        self._min_nodes_allowed = min_nodes_allowed

    @property
    def supported_erasure_coding(self):
        """
        Gets the supported_erasure_coding of this SupportedConfig.
        List the supported Erasure Coding options for the current number of Nodes (nodeCount) in this Cluster. Each string in the array is in the following format: \"NumDataStripes:NumCodedStripes\" For example if there are 3 nodes in the Cluster, the following Erasure Coding mode is returned: 2:1. See the Cohesity Dashboard help documentation for details.

        :return: The supported_erasure_coding of this SupportedConfig.
        :rtype: list[str]
        """
        return self._supported_erasure_coding

    @supported_erasure_coding.setter
    def supported_erasure_coding(self, supported_erasure_coding):
        """
        Sets the supported_erasure_coding of this SupportedConfig.
        List the supported Erasure Coding options for the current number of Nodes (nodeCount) in this Cluster. Each string in the array is in the following format: \"NumDataStripes:NumCodedStripes\" For example if there are 3 nodes in the Cluster, the following Erasure Coding mode is returned: 2:1. See the Cohesity Dashboard help documentation for details.

        :param supported_erasure_coding: The supported_erasure_coding of this SupportedConfig.
        :type: list[str]
        """

        self._supported_erasure_coding = supported_erasure_coding

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
