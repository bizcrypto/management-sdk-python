# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class InputSpecInputFilesSelector(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, file_time_filter=None, filename_glob=None, partition_id=None, root_dir=None, view_box_id=None, view_name=None):
        """
        InputSpecInputFilesSelector - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'file_time_filter': 'InputSpecFileTimeFilter',
            'filename_glob': 'list[str]',
            'partition_id': 'int',
            'root_dir': 'str',
            'view_box_id': 'int',
            'view_name': 'str'
        }

        self.attribute_map = {
            'file_time_filter': 'fileTimeFilter',
            'filename_glob': 'filenameGlob',
            'partition_id': 'partitionId',
            'root_dir': 'rootDir',
            'view_box_id': 'viewBoxId',
            'view_name': 'viewName'
        }

        self._file_time_filter = file_time_filter
        self._filename_glob = filename_glob
        self._partition_id = partition_id
        self._root_dir = root_dir
        self._view_box_id = view_box_id
        self._view_name = view_name

    @property
    def file_time_filter(self):
        """
        Gets the file_time_filter of this InputSpecInputFilesSelector.
        File time filter for file's last change time.

        :return: The file_time_filter of this InputSpecInputFilesSelector.
        :rtype: InputSpecFileTimeFilter
        """
        return self._file_time_filter

    @file_time_filter.setter
    def file_time_filter(self, file_time_filter):
        """
        Sets the file_time_filter of this InputSpecInputFilesSelector.
        File time filter for file's last change time.

        :param file_time_filter: The file_time_filter of this InputSpecInputFilesSelector.
        :type: InputSpecFileTimeFilter
        """

        self._file_time_filter = file_time_filter

    @property
    def filename_glob(self):
        """
        Gets the filename_glob of this InputSpecInputFilesSelector.
        Glob patterns to match on file. e.g. {*.txt, *.cc}

        :return: The filename_glob of this InputSpecInputFilesSelector.
        :rtype: list[str]
        """
        return self._filename_glob

    @filename_glob.setter
    def filename_glob(self, filename_glob):
        """
        Sets the filename_glob of this InputSpecInputFilesSelector.
        Glob patterns to match on file. e.g. {*.txt, *.cc}

        :param filename_glob: The filename_glob of this InputSpecInputFilesSelector.
        :type: list[str]
        """

        self._filename_glob = filename_glob

    @property
    def partition_id(self):
        """
        Gets the partition_id of this InputSpecInputFilesSelector.


        :return: The partition_id of this InputSpecInputFilesSelector.
        :rtype: int
        """
        return self._partition_id

    @partition_id.setter
    def partition_id(self, partition_id):
        """
        Sets the partition_id of this InputSpecInputFilesSelector.


        :param partition_id: The partition_id of this InputSpecInputFilesSelector.
        :type: int
        """

        self._partition_id = partition_id

    @property
    def root_dir(self):
        """
        Gets the root_dir of this InputSpecInputFilesSelector.
        Within each volume, traversal will be rooted at this directory. A typical value here might be /home

        :return: The root_dir of this InputSpecInputFilesSelector.
        :rtype: str
        """
        return self._root_dir

    @root_dir.setter
    def root_dir(self, root_dir):
        """
        Sets the root_dir of this InputSpecInputFilesSelector.
        Within each volume, traversal will be rooted at this directory. A typical value here might be /home

        :param root_dir: The root_dir of this InputSpecInputFilesSelector.
        :type: str
        """

        self._root_dir = root_dir

    @property
    def view_box_id(self):
        """
        Gets the view_box_id of this InputSpecInputFilesSelector.


        :return: The view_box_id of this InputSpecInputFilesSelector.
        :rtype: int
        """
        return self._view_box_id

    @view_box_id.setter
    def view_box_id(self, view_box_id):
        """
        Sets the view_box_id of this InputSpecInputFilesSelector.


        :param view_box_id: The view_box_id of this InputSpecInputFilesSelector.
        :type: int
        """

        self._view_box_id = view_box_id

    @property
    def view_name(self):
        """
        Gets the view_name of this InputSpecInputFilesSelector.


        :return: The view_name of this InputSpecInputFilesSelector.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """
        Sets the view_name of this InputSpecInputFilesSelector.


        :param view_name: The view_name of this InputSpecInputFilesSelector.
        :type: str
        """

        self._view_name = view_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
