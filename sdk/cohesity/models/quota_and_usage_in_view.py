# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class QuotaAndUsageInView(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, quota=None, usage_bytes=None, view_id=None, view_name=None):
        """
        QuotaAndUsageInView - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'quota': 'QuotaPolicy',
            'usage_bytes': 'int',
            'view_id': 'int',
            'view_name': 'str'
        }

        self.attribute_map = {
            'quota': 'quota',
            'usage_bytes': 'usageBytes',
            'view_id': 'viewId',
            'view_name': 'viewName'
        }

        self._quota = quota
        self._usage_bytes = usage_bytes
        self._view_id = view_id
        self._view_name = view_name

    @property
    def quota(self):
        """
        Gets the quota of this QuotaAndUsageInView.
        User quota policy applied to this user.

        :return: The quota of this QuotaAndUsageInView.
        :rtype: QuotaPolicy
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """
        Sets the quota of this QuotaAndUsageInView.
        User quota policy applied to this user.

        :param quota: The quota of this QuotaAndUsageInView.
        :type: QuotaPolicy
        """

        self._quota = quota

    @property
    def usage_bytes(self):
        """
        Gets the usage_bytes of this QuotaAndUsageInView.
        Usage in bytes of this user in this view.

        :return: The usage_bytes of this QuotaAndUsageInView.
        :rtype: int
        """
        return self._usage_bytes

    @usage_bytes.setter
    def usage_bytes(self, usage_bytes):
        """
        Sets the usage_bytes of this QuotaAndUsageInView.
        Usage in bytes of this user in this view.

        :param usage_bytes: The usage_bytes of this QuotaAndUsageInView.
        :type: int
        """

        self._usage_bytes = usage_bytes

    @property
    def view_id(self):
        """
        Gets the view_id of this QuotaAndUsageInView.
        The usage and quota policy information of this user for this view.

        :return: The view_id of this QuotaAndUsageInView.
        :rtype: int
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """
        Sets the view_id of this QuotaAndUsageInView.
        The usage and quota policy information of this user for this view.

        :param view_id: The view_id of this QuotaAndUsageInView.
        :type: int
        """

        self._view_id = view_id

    @property
    def view_name(self):
        """
        Gets the view_name of this QuotaAndUsageInView.
        View name.

        :return: The view_name of this QuotaAndUsageInView.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """
        Sets the view_name of this QuotaAndUsageInView.
        View name.

        :param view_name: The view_name of this QuotaAndUsageInView.
        :type: str
        """

        self._view_name = view_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
