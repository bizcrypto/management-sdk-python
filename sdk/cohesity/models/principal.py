# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Principal(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, domain=None, full_name=None, object_class=None, principal_name=None, sid=None):
        """
        Principal - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'domain': 'str',
            'full_name': 'str',
            'object_class': 'str',
            'principal_name': 'str',
            'sid': 'str'
        }

        self.attribute_map = {
            'domain': 'domain',
            'full_name': 'fullName',
            'object_class': 'objectClass',
            'principal_name': 'principalName',
            'sid': 'sid'
        }

        self._domain = domain
        self._full_name = full_name
        self._object_class = object_class
        self._principal_name = principal_name
        self._sid = sid

    @property
    def domain(self):
        """
        Gets the domain of this Principal.
        Specifies the domain name of the where the principal' account is maintained.

        :return: The domain of this Principal.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """
        Sets the domain of this Principal.
        Specifies the domain name of the where the principal' account is maintained.

        :param domain: The domain of this Principal.
        :type: str
        """

        self._domain = domain

    @property
    def full_name(self):
        """
        Gets the full_name of this Principal.
        Specifies the full name (first and last names) of the principal.

        :return: The full_name of this Principal.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """
        Sets the full_name of this Principal.
        Specifies the full name (first and last names) of the principal.

        :param full_name: The full_name of this Principal.
        :type: str
        """

        self._full_name = full_name

    @property
    def object_class(self):
        """
        Gets the object_class of this Principal.
        Specifies the object class of the principal (either 'kGroup' or 'kUser'). 'kUser' specifies a user object class. 'kGroup' specifies a group object class.

        :return: The object_class of this Principal.
        :rtype: str
        """
        return self._object_class

    @object_class.setter
    def object_class(self, object_class):
        """
        Sets the object_class of this Principal.
        Specifies the object class of the principal (either 'kGroup' or 'kUser'). 'kUser' specifies a user object class. 'kGroup' specifies a group object class.

        :param object_class: The object_class of this Principal.
        :type: str
        """
        allowed_values = ["kUser", "kGroup"]
        if object_class not in allowed_values:
            raise ValueError(
                "Invalid value for `object_class` ({0}), must be one of {1}"
                .format(object_class, allowed_values)
            )

        self._object_class = object_class

    @property
    def principal_name(self):
        """
        Gets the principal_name of this Principal.
        Specifies the name of the principal.

        :return: The principal_name of this Principal.
        :rtype: str
        """
        return self._principal_name

    @principal_name.setter
    def principal_name(self, principal_name):
        """
        Sets the principal_name of this Principal.
        Specifies the name of the principal.

        :param principal_name: The principal_name of this Principal.
        :type: str
        """

        self._principal_name = principal_name

    @property
    def sid(self):
        """
        Gets the sid of this Principal.
        Specifies the unique Security id (SID) of the principal.

        :return: The sid of this Principal.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """
        Sets the sid of this Principal.
        Specifies the unique Security id (SID) of the principal.

        :param sid: The sid of this Principal.
        :type: str
        """

        self._sid = sid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
