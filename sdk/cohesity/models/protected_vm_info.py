# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProtectedVmInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, protection_jobs=None, protection_policies=None, protection_source=None, stats=None):
        """
        ProtectedVmInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'protection_jobs': 'list[ProtectionJob]',
            'protection_policies': 'list[ProtectionPolicy]',
            'protection_source': 'ProtectionSource',
            'stats': 'ProtectedVmInfoStats'
        }

        self.attribute_map = {
            'protection_jobs': 'protectionJobs',
            'protection_policies': 'protectionPolicies',
            'protection_source': 'protectionSource',
            'stats': 'stats'
        }

        self._protection_jobs = protection_jobs
        self._protection_policies = protection_policies
        self._protection_source = protection_source
        self._stats = stats

    @property
    def protection_jobs(self):
        """
        Gets the protection_jobs of this ProtectedVmInfo.


        :return: The protection_jobs of this ProtectedVmInfo.
        :rtype: list[ProtectionJob]
        """
        return self._protection_jobs

    @protection_jobs.setter
    def protection_jobs(self, protection_jobs):
        """
        Sets the protection_jobs of this ProtectedVmInfo.


        :param protection_jobs: The protection_jobs of this ProtectedVmInfo.
        :type: list[ProtectionJob]
        """

        self._protection_jobs = protection_jobs

    @property
    def protection_policies(self):
        """
        Gets the protection_policies of this ProtectedVmInfo.


        :return: The protection_policies of this ProtectedVmInfo.
        :rtype: list[ProtectionPolicy]
        """
        return self._protection_policies

    @protection_policies.setter
    def protection_policies(self, protection_policies):
        """
        Sets the protection_policies of this ProtectedVmInfo.


        :param protection_policies: The protection_policies of this ProtectedVmInfo.
        :type: list[ProtectionPolicy]
        """

        self._protection_policies = protection_policies

    @property
    def protection_source(self):
        """
        Gets the protection_source of this ProtectedVmInfo.
        Specifies a VM that is being protected on the Cohesity Cluster.

        :return: The protection_source of this ProtectedVmInfo.
        :rtype: ProtectionSource
        """
        return self._protection_source

    @protection_source.setter
    def protection_source(self, protection_source):
        """
        Sets the protection_source of this ProtectedVmInfo.
        Specifies a VM that is being protected on the Cohesity Cluster.

        :param protection_source: The protection_source of this ProtectedVmInfo.
        :type: ProtectionSource
        """

        self._protection_source = protection_source

    @property
    def stats(self):
        """
        Gets the stats of this ProtectedVmInfo.


        :return: The stats of this ProtectedVmInfo.
        :rtype: ProtectedVmInfoStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """
        Sets the stats of this ProtectedVmInfo.


        :param stats: The stats of this ProtectedVmInfo.
        :type: ProtectedVmInfoStats
        """

        self._stats = stats

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
