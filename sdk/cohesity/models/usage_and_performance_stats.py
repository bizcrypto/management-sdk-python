# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UsageAndPerformanceStats(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, data_in_bytes=None, data_in_bytes_after_reduction=None, min_usable_physical_capacity_bytes=None, num_bytes_read=None, num_bytes_written=None, physical_capacity_bytes=None, read_ios=None, read_latency_msecs=None, system_capacity_bytes=None, system_usage_bytes=None, total_physical_raw_usage_bytes=None, total_physical_usage_bytes=None, write_ios=None, write_latency_msecs=None):
        """
        UsageAndPerformanceStats - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data_in_bytes': 'int',
            'data_in_bytes_after_reduction': 'int',
            'min_usable_physical_capacity_bytes': 'int',
            'num_bytes_read': 'int',
            'num_bytes_written': 'int',
            'physical_capacity_bytes': 'int',
            'read_ios': 'int',
            'read_latency_msecs': 'float',
            'system_capacity_bytes': 'int',
            'system_usage_bytes': 'int',
            'total_physical_raw_usage_bytes': 'int',
            'total_physical_usage_bytes': 'int',
            'write_ios': 'int',
            'write_latency_msecs': 'float'
        }

        self.attribute_map = {
            'data_in_bytes': 'dataInBytes',
            'data_in_bytes_after_reduction': 'dataInBytesAfterReduction',
            'min_usable_physical_capacity_bytes': 'minUsablePhysicalCapacityBytes',
            'num_bytes_read': 'numBytesRead',
            'num_bytes_written': 'numBytesWritten',
            'physical_capacity_bytes': 'physicalCapacityBytes',
            'read_ios': 'readIos',
            'read_latency_msecs': 'readLatencyMsecs',
            'system_capacity_bytes': 'systemCapacityBytes',
            'system_usage_bytes': 'systemUsageBytes',
            'total_physical_raw_usage_bytes': 'totalPhysicalRawUsageBytes',
            'total_physical_usage_bytes': 'totalPhysicalUsageBytes',
            'write_ios': 'writeIos',
            'write_latency_msecs': 'writeLatencyMsecs'
        }

        self._data_in_bytes = data_in_bytes
        self._data_in_bytes_after_reduction = data_in_bytes_after_reduction
        self._min_usable_physical_capacity_bytes = min_usable_physical_capacity_bytes
        self._num_bytes_read = num_bytes_read
        self._num_bytes_written = num_bytes_written
        self._physical_capacity_bytes = physical_capacity_bytes
        self._read_ios = read_ios
        self._read_latency_msecs = read_latency_msecs
        self._system_capacity_bytes = system_capacity_bytes
        self._system_usage_bytes = system_usage_bytes
        self._total_physical_raw_usage_bytes = total_physical_raw_usage_bytes
        self._total_physical_usage_bytes = total_physical_usage_bytes
        self._write_ios = write_ios
        self._write_latency_msecs = write_latency_msecs

    @property
    def data_in_bytes(self):
        """
        Gets the data_in_bytes of this UsageAndPerformanceStats.
        Data brought into the cluster. This is the usage before data reduction if we ignore the zeroes and effects of cloning.

        :return: The data_in_bytes of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._data_in_bytes

    @data_in_bytes.setter
    def data_in_bytes(self, data_in_bytes):
        """
        Sets the data_in_bytes of this UsageAndPerformanceStats.
        Data brought into the cluster. This is the usage before data reduction if we ignore the zeroes and effects of cloning.

        :param data_in_bytes: The data_in_bytes of this UsageAndPerformanceStats.
        :type: int
        """

        self._data_in_bytes = data_in_bytes

    @property
    def data_in_bytes_after_reduction(self):
        """
        Gets the data_in_bytes_after_reduction of this UsageAndPerformanceStats.
        Morphed Usage before data is replicated to other nodes as per RF or Erasure Coding policy.

        :return: The data_in_bytes_after_reduction of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._data_in_bytes_after_reduction

    @data_in_bytes_after_reduction.setter
    def data_in_bytes_after_reduction(self, data_in_bytes_after_reduction):
        """
        Sets the data_in_bytes_after_reduction of this UsageAndPerformanceStats.
        Morphed Usage before data is replicated to other nodes as per RF or Erasure Coding policy.

        :param data_in_bytes_after_reduction: The data_in_bytes_after_reduction of this UsageAndPerformanceStats.
        :type: int
        """

        self._data_in_bytes_after_reduction = data_in_bytes_after_reduction

    @property
    def min_usable_physical_capacity_bytes(self):
        """
        Gets the min_usable_physical_capacity_bytes of this UsageAndPerformanceStats.
        Specifies the minimum usable capacity available after erasure coding or RF. This will only be populated for cluster. If a cluster has multiple Domains (View Boxes) with different RF or erasure coding, this metric will be computed using the scheme that will provide least saving.

        :return: The min_usable_physical_capacity_bytes of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._min_usable_physical_capacity_bytes

    @min_usable_physical_capacity_bytes.setter
    def min_usable_physical_capacity_bytes(self, min_usable_physical_capacity_bytes):
        """
        Sets the min_usable_physical_capacity_bytes of this UsageAndPerformanceStats.
        Specifies the minimum usable capacity available after erasure coding or RF. This will only be populated for cluster. If a cluster has multiple Domains (View Boxes) with different RF or erasure coding, this metric will be computed using the scheme that will provide least saving.

        :param min_usable_physical_capacity_bytes: The min_usable_physical_capacity_bytes of this UsageAndPerformanceStats.
        :type: int
        """

        self._min_usable_physical_capacity_bytes = min_usable_physical_capacity_bytes

    @property
    def num_bytes_read(self):
        """
        Gets the num_bytes_read of this UsageAndPerformanceStats.
        Provides the total number of bytes read in the last 30 seconds.

        :return: The num_bytes_read of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._num_bytes_read

    @num_bytes_read.setter
    def num_bytes_read(self, num_bytes_read):
        """
        Sets the num_bytes_read of this UsageAndPerformanceStats.
        Provides the total number of bytes read in the last 30 seconds.

        :param num_bytes_read: The num_bytes_read of this UsageAndPerformanceStats.
        :type: int
        """

        self._num_bytes_read = num_bytes_read

    @property
    def num_bytes_written(self):
        """
        Gets the num_bytes_written of this UsageAndPerformanceStats.
        Provides the total number of bytes written in the last 30 second.

        :return: The num_bytes_written of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._num_bytes_written

    @num_bytes_written.setter
    def num_bytes_written(self, num_bytes_written):
        """
        Sets the num_bytes_written of this UsageAndPerformanceStats.
        Provides the total number of bytes written in the last 30 second.

        :param num_bytes_written: The num_bytes_written of this UsageAndPerformanceStats.
        :type: int
        """

        self._num_bytes_written = num_bytes_written

    @property
    def physical_capacity_bytes(self):
        """
        Gets the physical_capacity_bytes of this UsageAndPerformanceStats.
        Provides the total physical capacity in bytes as computed by the Cohesity Cluster.

        :return: The physical_capacity_bytes of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._physical_capacity_bytes

    @physical_capacity_bytes.setter
    def physical_capacity_bytes(self, physical_capacity_bytes):
        """
        Sets the physical_capacity_bytes of this UsageAndPerformanceStats.
        Provides the total physical capacity in bytes as computed by the Cohesity Cluster.

        :param physical_capacity_bytes: The physical_capacity_bytes of this UsageAndPerformanceStats.
        :type: int
        """

        self._physical_capacity_bytes = physical_capacity_bytes

    @property
    def read_ios(self):
        """
        Gets the read_ios of this UsageAndPerformanceStats.
        Provides the number of Read IOs that occurred in the last 30 seconds.

        :return: The read_ios of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._read_ios

    @read_ios.setter
    def read_ios(self, read_ios):
        """
        Sets the read_ios of this UsageAndPerformanceStats.
        Provides the number of Read IOs that occurred in the last 30 seconds.

        :param read_ios: The read_ios of this UsageAndPerformanceStats.
        :type: int
        """

        self._read_ios = read_ios

    @property
    def read_latency_msecs(self):
        """
        Gets the read_latency_msecs of this UsageAndPerformanceStats.
        Provides the Read latency in milliseconds for the Read IOs that occurred during the last 30 seconds.

        :return: The read_latency_msecs of this UsageAndPerformanceStats.
        :rtype: float
        """
        return self._read_latency_msecs

    @read_latency_msecs.setter
    def read_latency_msecs(self, read_latency_msecs):
        """
        Sets the read_latency_msecs of this UsageAndPerformanceStats.
        Provides the Read latency in milliseconds for the Read IOs that occurred during the last 30 seconds.

        :param read_latency_msecs: The read_latency_msecs of this UsageAndPerformanceStats.
        :type: float
        """

        self._read_latency_msecs = read_latency_msecs

    @property
    def system_capacity_bytes(self):
        """
        Gets the system_capacity_bytes of this UsageAndPerformanceStats.
        Provides the total available capacity as computed by the Linux 'statfs' command.

        :return: The system_capacity_bytes of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._system_capacity_bytes

    @system_capacity_bytes.setter
    def system_capacity_bytes(self, system_capacity_bytes):
        """
        Sets the system_capacity_bytes of this UsageAndPerformanceStats.
        Provides the total available capacity as computed by the Linux 'statfs' command.

        :param system_capacity_bytes: The system_capacity_bytes of this UsageAndPerformanceStats.
        :type: int
        """

        self._system_capacity_bytes = system_capacity_bytes

    @property
    def system_usage_bytes(self):
        """
        Gets the system_usage_bytes of this UsageAndPerformanceStats.
        Provides the usage of bytes, as computed by the Linux 'statfs' command, after the size of the data is reduced by change-block tracking, compression and deduplication.

        :return: The system_usage_bytes of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._system_usage_bytes

    @system_usage_bytes.setter
    def system_usage_bytes(self, system_usage_bytes):
        """
        Sets the system_usage_bytes of this UsageAndPerformanceStats.
        Provides the usage of bytes, as computed by the Linux 'statfs' command, after the size of the data is reduced by change-block tracking, compression and deduplication.

        :param system_usage_bytes: The system_usage_bytes of this UsageAndPerformanceStats.
        :type: int
        """

        self._system_usage_bytes = system_usage_bytes

    @property
    def total_physical_raw_usage_bytes(self):
        """
        Gets the total_physical_raw_usage_bytes of this UsageAndPerformanceStats.
        Provides the usage of bytes, as computed by the Cohesity Cluster, before the size of the data is reduced by change-block tracking, compression and deduplication.

        :return: The total_physical_raw_usage_bytes of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._total_physical_raw_usage_bytes

    @total_physical_raw_usage_bytes.setter
    def total_physical_raw_usage_bytes(self, total_physical_raw_usage_bytes):
        """
        Sets the total_physical_raw_usage_bytes of this UsageAndPerformanceStats.
        Provides the usage of bytes, as computed by the Cohesity Cluster, before the size of the data is reduced by change-block tracking, compression and deduplication.

        :param total_physical_raw_usage_bytes: The total_physical_raw_usage_bytes of this UsageAndPerformanceStats.
        :type: int
        """

        self._total_physical_raw_usage_bytes = total_physical_raw_usage_bytes

    @property
    def total_physical_usage_bytes(self):
        """
        Gets the total_physical_usage_bytes of this UsageAndPerformanceStats.
        Provides the total capacity, as computed by the Cohesity Cluster, after the size of the data has been reduced by change-block tracking, compression and deduplication.

        :return: The total_physical_usage_bytes of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._total_physical_usage_bytes

    @total_physical_usage_bytes.setter
    def total_physical_usage_bytes(self, total_physical_usage_bytes):
        """
        Sets the total_physical_usage_bytes of this UsageAndPerformanceStats.
        Provides the total capacity, as computed by the Cohesity Cluster, after the size of the data has been reduced by change-block tracking, compression and deduplication.

        :param total_physical_usage_bytes: The total_physical_usage_bytes of this UsageAndPerformanceStats.
        :type: int
        """

        self._total_physical_usage_bytes = total_physical_usage_bytes

    @property
    def write_ios(self):
        """
        Gets the write_ios of this UsageAndPerformanceStats.
        Provides the number of Write IOs that occurred in the last 30 seconds.

        :return: The write_ios of this UsageAndPerformanceStats.
        :rtype: int
        """
        return self._write_ios

    @write_ios.setter
    def write_ios(self, write_ios):
        """
        Sets the write_ios of this UsageAndPerformanceStats.
        Provides the number of Write IOs that occurred in the last 30 seconds.

        :param write_ios: The write_ios of this UsageAndPerformanceStats.
        :type: int
        """

        self._write_ios = write_ios

    @property
    def write_latency_msecs(self):
        """
        Gets the write_latency_msecs of this UsageAndPerformanceStats.
        Provides the Write latency in milliseconds for the Write IOs that occurred during the last 30 seconds.

        :return: The write_latency_msecs of this UsageAndPerformanceStats.
        :rtype: float
        """
        return self._write_latency_msecs

    @write_latency_msecs.setter
    def write_latency_msecs(self, write_latency_msecs):
        """
        Sets the write_latency_msecs of this UsageAndPerformanceStats.
        Provides the Write latency in milliseconds for the Write IOs that occurred during the last 30 seconds.

        :param write_latency_msecs: The write_latency_msecs of this UsageAndPerformanceStats.
        :type: float
        """

        self._write_latency_msecs = write_latency_msecs

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
