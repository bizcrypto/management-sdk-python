# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DeleteViewUsersQuotaParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, delete_all=None, user_ids=None, view_name=None):
        """
        DeleteViewUsersQuotaParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'delete_all': 'bool',
            'user_ids': 'list[UserId]',
            'view_name': 'str'
        }

        self.attribute_map = {
            'delete_all': 'deleteAll',
            'user_ids': 'userIds',
            'view_name': 'viewName'
        }

        self._delete_all = delete_all
        self._user_ids = user_ids
        self._view_name = view_name

    @property
    def delete_all(self):
        """
        Gets the delete_all of this DeleteViewUsersQuotaParameters.
        Delete all existing user quota override policies.

        :return: The delete_all of this DeleteViewUsersQuotaParameters.
        :rtype: bool
        """
        return self._delete_all

    @delete_all.setter
    def delete_all(self, delete_all):
        """
        Sets the delete_all of this DeleteViewUsersQuotaParameters.
        Delete all existing user quota override policies.

        :param delete_all: The delete_all of this DeleteViewUsersQuotaParameters.
        :type: bool
        """

        self._delete_all = delete_all

    @property
    def user_ids(self):
        """
        Gets the user_ids of this DeleteViewUsersQuotaParameters.


        :return: The user_ids of this DeleteViewUsersQuotaParameters.
        :rtype: list[UserId]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """
        Sets the user_ids of this DeleteViewUsersQuotaParameters.


        :param user_ids: The user_ids of this DeleteViewUsersQuotaParameters.
        :type: list[UserId]
        """

        self._user_ids = user_ids

    @property
    def view_name(self):
        """
        Gets the view_name of this DeleteViewUsersQuotaParameters.
        View name of input view.

        :return: The view_name of this DeleteViewUsersQuotaParameters.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """
        Sets the view_name of this DeleteViewUsersQuotaParameters.
        View name of input view.

        :param view_name: The view_name of this DeleteViewUsersQuotaParameters.
        :type: str
        """

        self._view_name = view_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
