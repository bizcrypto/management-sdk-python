# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MapReduceInstanceRunInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, end_time=None, error_message=None, execution_start_time_usecs=None, files_processed=None, map_done_time_usecs=None, map_input_bytes=None, mappers_spawned=None, num_map_outputs=None, num_reduce_outputs=None, percentage_completion=None, percentage_mapper_completion=None, percentage_reducer_completion=None, reducers_spawned=None, remaining_time_mins=None, start_time=None, status=None, total_num_mappers=None, total_num_reducers=None):
        """
        MapReduceInstanceRunInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'end_time': 'int',
            'error_message': 'str',
            'execution_start_time_usecs': 'int',
            'files_processed': 'int',
            'map_done_time_usecs': 'int',
            'map_input_bytes': 'int',
            'mappers_spawned': 'int',
            'num_map_outputs': 'int',
            'num_reduce_outputs': 'int',
            'percentage_completion': 'float',
            'percentage_mapper_completion': 'float',
            'percentage_reducer_completion': 'float',
            'reducers_spawned': 'int',
            'remaining_time_mins': 'int',
            'start_time': 'int',
            'status': 'int',
            'total_num_mappers': 'int',
            'total_num_reducers': 'int'
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'error_message': 'errorMessage',
            'execution_start_time_usecs': 'executionStartTimeUsecs',
            'files_processed': 'filesProcessed',
            'map_done_time_usecs': 'mapDoneTimeUsecs',
            'map_input_bytes': 'mapInputBytes',
            'mappers_spawned': 'mappersSpawned',
            'num_map_outputs': 'numMapOutputs',
            'num_reduce_outputs': 'numReduceOutputs',
            'percentage_completion': 'percentageCompletion',
            'percentage_mapper_completion': 'percentageMapperCompletion',
            'percentage_reducer_completion': 'percentageReducerCompletion',
            'reducers_spawned': 'reducersSpawned',
            'remaining_time_mins': 'remainingTimeMins',
            'start_time': 'startTime',
            'status': 'status',
            'total_num_mappers': 'totalNumMappers',
            'total_num_reducers': 'totalNumReducers'
        }

        self._end_time = end_time
        self._error_message = error_message
        self._execution_start_time_usecs = execution_start_time_usecs
        self._files_processed = files_processed
        self._map_done_time_usecs = map_done_time_usecs
        self._map_input_bytes = map_input_bytes
        self._mappers_spawned = mappers_spawned
        self._num_map_outputs = num_map_outputs
        self._num_reduce_outputs = num_reduce_outputs
        self._percentage_completion = percentage_completion
        self._percentage_mapper_completion = percentage_mapper_completion
        self._percentage_reducer_completion = percentage_reducer_completion
        self._reducers_spawned = reducers_spawned
        self._remaining_time_mins = remaining_time_mins
        self._start_time = start_time
        self._status = status
        self._total_num_mappers = total_num_mappers
        self._total_num_reducers = total_num_reducers

    @property
    def end_time(self):
        """
        Gets the end_time of this MapReduceInstanceRunInfo.
        Time when map redcue job completed.

        :return: The end_time of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this MapReduceInstanceRunInfo.
        Time when map redcue job completed.

        :param end_time: The end_time of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._end_time = end_time

    @property
    def error_message(self):
        """
        Gets the error_message of this MapReduceInstanceRunInfo.
        If this run failed, then error message for failure.

        :return: The error_message of this MapReduceInstanceRunInfo.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this MapReduceInstanceRunInfo.
        If this run failed, then error message for failure.

        :param error_message: The error_message of this MapReduceInstanceRunInfo.
        :type: str
        """

        self._error_message = error_message

    @property
    def execution_start_time_usecs(self):
        """
        Gets the execution_start_time_usecs of this MapReduceInstanceRunInfo.
        Time (in usecs) when job was picked up for execution.

        :return: The execution_start_time_usecs of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._execution_start_time_usecs

    @execution_start_time_usecs.setter
    def execution_start_time_usecs(self, execution_start_time_usecs):
        """
        Sets the execution_start_time_usecs of this MapReduceInstanceRunInfo.
        Time (in usecs) when job was picked up for execution.

        :param execution_start_time_usecs: The execution_start_time_usecs of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._execution_start_time_usecs = execution_start_time_usecs

    @property
    def files_processed(self):
        """
        Gets the files_processed of this MapReduceInstanceRunInfo.
        Number of files processed in this run.

        :return: The files_processed of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._files_processed

    @files_processed.setter
    def files_processed(self, files_processed):
        """
        Sets the files_processed of this MapReduceInstanceRunInfo.
        Number of files processed in this run.

        :param files_processed: The files_processed of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._files_processed = files_processed

    @property
    def map_done_time_usecs(self):
        """
        Gets the map_done_time_usecs of this MapReduceInstanceRunInfo.
        Time (in usecs) when map tasks were done.

        :return: The map_done_time_usecs of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._map_done_time_usecs

    @map_done_time_usecs.setter
    def map_done_time_usecs(self, map_done_time_usecs):
        """
        Sets the map_done_time_usecs of this MapReduceInstanceRunInfo.
        Time (in usecs) when map tasks were done.

        :param map_done_time_usecs: The map_done_time_usecs of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._map_done_time_usecs = map_done_time_usecs

    @property
    def map_input_bytes(self):
        """
        Gets the map_input_bytes of this MapReduceInstanceRunInfo.
        Total size of data processed by this run in bytes.

        :return: The map_input_bytes of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._map_input_bytes

    @map_input_bytes.setter
    def map_input_bytes(self, map_input_bytes):
        """
        Sets the map_input_bytes of this MapReduceInstanceRunInfo.
        Total size of data processed by this run in bytes.

        :param map_input_bytes: The map_input_bytes of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._map_input_bytes = map_input_bytes

    @property
    def mappers_spawned(self):
        """
        Gets the mappers_spawned of this MapReduceInstanceRunInfo.
        Number of mappers spawned till now.

        :return: The mappers_spawned of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._mappers_spawned

    @mappers_spawned.setter
    def mappers_spawned(self, mappers_spawned):
        """
        Sets the mappers_spawned of this MapReduceInstanceRunInfo.
        Number of mappers spawned till now.

        :param mappers_spawned: The mappers_spawned of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._mappers_spawned = mappers_spawned

    @property
    def num_map_outputs(self):
        """
        Gets the num_map_outputs of this MapReduceInstanceRunInfo.
        Number of outputs from mappers.

        :return: The num_map_outputs of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._num_map_outputs

    @num_map_outputs.setter
    def num_map_outputs(self, num_map_outputs):
        """
        Sets the num_map_outputs of this MapReduceInstanceRunInfo.
        Number of outputs from mappers.

        :param num_map_outputs: The num_map_outputs of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._num_map_outputs = num_map_outputs

    @property
    def num_reduce_outputs(self):
        """
        Gets the num_reduce_outputs of this MapReduceInstanceRunInfo.
        Number of outputs from reducers.

        :return: The num_reduce_outputs of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._num_reduce_outputs

    @num_reduce_outputs.setter
    def num_reduce_outputs(self, num_reduce_outputs):
        """
        Sets the num_reduce_outputs of this MapReduceInstanceRunInfo.
        Number of outputs from reducers.

        :param num_reduce_outputs: The num_reduce_outputs of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._num_reduce_outputs = num_reduce_outputs

    @property
    def percentage_completion(self):
        """
        Gets the percentage_completion of this MapReduceInstanceRunInfo.
        Percentage completion of this run so far.

        :return: The percentage_completion of this MapReduceInstanceRunInfo.
        :rtype: float
        """
        return self._percentage_completion

    @percentage_completion.setter
    def percentage_completion(self, percentage_completion):
        """
        Sets the percentage_completion of this MapReduceInstanceRunInfo.
        Percentage completion of this run so far.

        :param percentage_completion: The percentage_completion of this MapReduceInstanceRunInfo.
        :type: float
        """

        self._percentage_completion = percentage_completion

    @property
    def percentage_mapper_completion(self):
        """
        Gets the percentage_mapper_completion of this MapReduceInstanceRunInfo.
        Percentage of mapper phase completed.

        :return: The percentage_mapper_completion of this MapReduceInstanceRunInfo.
        :rtype: float
        """
        return self._percentage_mapper_completion

    @percentage_mapper_completion.setter
    def percentage_mapper_completion(self, percentage_mapper_completion):
        """
        Sets the percentage_mapper_completion of this MapReduceInstanceRunInfo.
        Percentage of mapper phase completed.

        :param percentage_mapper_completion: The percentage_mapper_completion of this MapReduceInstanceRunInfo.
        :type: float
        """

        self._percentage_mapper_completion = percentage_mapper_completion

    @property
    def percentage_reducer_completion(self):
        """
        Gets the percentage_reducer_completion of this MapReduceInstanceRunInfo.
        Percentage of reducer phase completed.

        :return: The percentage_reducer_completion of this MapReduceInstanceRunInfo.
        :rtype: float
        """
        return self._percentage_reducer_completion

    @percentage_reducer_completion.setter
    def percentage_reducer_completion(self, percentage_reducer_completion):
        """
        Sets the percentage_reducer_completion of this MapReduceInstanceRunInfo.
        Percentage of reducer phase completed.

        :param percentage_reducer_completion: The percentage_reducer_completion of this MapReduceInstanceRunInfo.
        :type: float
        """

        self._percentage_reducer_completion = percentage_reducer_completion

    @property
    def reducers_spawned(self):
        """
        Gets the reducers_spawned of this MapReduceInstanceRunInfo.
        Number of reducers spawned till now.

        :return: The reducers_spawned of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._reducers_spawned

    @reducers_spawned.setter
    def reducers_spawned(self, reducers_spawned):
        """
        Sets the reducers_spawned of this MapReduceInstanceRunInfo.
        Number of reducers spawned till now.

        :param reducers_spawned: The reducers_spawned of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._reducers_spawned = reducers_spawned

    @property
    def remaining_time_mins(self):
        """
        Gets the remaining_time_mins of this MapReduceInstanceRunInfo.
        Expected remaining time in minutes for completion of this run.

        :return: The remaining_time_mins of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._remaining_time_mins

    @remaining_time_mins.setter
    def remaining_time_mins(self, remaining_time_mins):
        """
        Sets the remaining_time_mins of this MapReduceInstanceRunInfo.
        Expected remaining time in minutes for completion of this run.

        :param remaining_time_mins: The remaining_time_mins of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._remaining_time_mins = remaining_time_mins

    @property
    def start_time(self):
        """
        Gets the start_time of this MapReduceInstanceRunInfo.
        Time when map reduce job was started by user.

        :return: The start_time of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this MapReduceInstanceRunInfo.
        Time when map reduce job was started by user.

        :param start_time: The start_time of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._start_time = start_time

    @property
    def status(self):
        """
        Gets the status of this MapReduceInstanceRunInfo.
        Status of this run.

        :return: The status of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this MapReduceInstanceRunInfo.
        Status of this run.

        :param status: The status of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._status = status

    @property
    def total_num_mappers(self):
        """
        Gets the total_num_mappers of this MapReduceInstanceRunInfo.
        Total number of mappers to be spawned.

        :return: The total_num_mappers of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._total_num_mappers

    @total_num_mappers.setter
    def total_num_mappers(self, total_num_mappers):
        """
        Sets the total_num_mappers of this MapReduceInstanceRunInfo.
        Total number of mappers to be spawned.

        :param total_num_mappers: The total_num_mappers of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._total_num_mappers = total_num_mappers

    @property
    def total_num_reducers(self):
        """
        Gets the total_num_reducers of this MapReduceInstanceRunInfo.
        Total number of reducers to be spawned.

        :return: The total_num_reducers of this MapReduceInstanceRunInfo.
        :rtype: int
        """
        return self._total_num_reducers

    @total_num_reducers.setter
    def total_num_reducers(self, total_num_reducers):
        """
        Sets the total_num_reducers of this MapReduceInstanceRunInfo.
        Total number of reducers to be spawned.

        :param total_num_reducers: The total_num_reducers of this MapReduceInstanceRunInfo.
        :type: int
        """

        self._total_num_reducers = total_num_reducers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
