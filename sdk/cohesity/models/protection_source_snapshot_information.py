# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProtectionSourceSnapshotInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, copy_tasks=None, job_id=None, job_name=None, job_run_id=None, last_run_end_time_usecs=None, last_run_start_time_usecs=None, message=None, num_bytes_read=None, num_logical_bytes_protected=None, pagination_cookie=None, run_status=None, run_type=None):
        """
        ProtectionSourceSnapshotInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'copy_tasks': 'list[SnapshotCopyTask]',
            'job_id': 'int',
            'job_name': 'str',
            'job_run_id': 'int',
            'last_run_end_time_usecs': 'int',
            'last_run_start_time_usecs': 'int',
            'message': 'str',
            'num_bytes_read': 'int',
            'num_logical_bytes_protected': 'int',
            'pagination_cookie': 'int',
            'run_status': 'str',
            'run_type': 'str'
        }

        self.attribute_map = {
            'copy_tasks': 'copyTasks',
            'job_id': 'jobId',
            'job_name': 'jobName',
            'job_run_id': 'jobRunId',
            'last_run_end_time_usecs': 'lastRunEndTimeUsecs',
            'last_run_start_time_usecs': 'lastRunStartTimeUsecs',
            'message': 'message',
            'num_bytes_read': 'numBytesRead',
            'num_logical_bytes_protected': 'numLogicalBytesProtected',
            'pagination_cookie': 'paginationCookie',
            'run_status': 'runStatus',
            'run_type': 'runType'
        }

        self._copy_tasks = copy_tasks
        self._job_id = job_id
        self._job_name = job_name
        self._job_run_id = job_run_id
        self._last_run_end_time_usecs = last_run_end_time_usecs
        self._last_run_start_time_usecs = last_run_start_time_usecs
        self._message = message
        self._num_bytes_read = num_bytes_read
        self._num_logical_bytes_protected = num_logical_bytes_protected
        self._pagination_cookie = pagination_cookie
        self._run_status = run_status
        self._run_type = run_type

    @property
    def copy_tasks(self):
        """
        Gets the copy_tasks of this ProtectionSourceSnapshotInformation.
        Specifies a list of copy tasks (such as replication and archival tasks).

        :return: The copy_tasks of this ProtectionSourceSnapshotInformation.
        :rtype: list[SnapshotCopyTask]
        """
        return self._copy_tasks

    @copy_tasks.setter
    def copy_tasks(self, copy_tasks):
        """
        Sets the copy_tasks of this ProtectionSourceSnapshotInformation.
        Specifies a list of copy tasks (such as replication and archival tasks).

        :param copy_tasks: The copy_tasks of this ProtectionSourceSnapshotInformation.
        :type: list[SnapshotCopyTask]
        """

        self._copy_tasks = copy_tasks

    @property
    def job_id(self):
        """
        Gets the job_id of this ProtectionSourceSnapshotInformation.
        Specifies the id of the Protection Job.

        :return: The job_id of this ProtectionSourceSnapshotInformation.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this ProtectionSourceSnapshotInformation.
        Specifies the id of the Protection Job.

        :param job_id: The job_id of this ProtectionSourceSnapshotInformation.
        :type: int
        """

        self._job_id = job_id

    @property
    def job_name(self):
        """
        Gets the job_name of this ProtectionSourceSnapshotInformation.
        Specifies the name of the Protection Job.

        :return: The job_name of this ProtectionSourceSnapshotInformation.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """
        Sets the job_name of this ProtectionSourceSnapshotInformation.
        Specifies the name of the Protection Job.

        :param job_name: The job_name of this ProtectionSourceSnapshotInformation.
        :type: str
        """

        self._job_name = job_name

    @property
    def job_run_id(self):
        """
        Gets the job_run_id of this ProtectionSourceSnapshotInformation.
        Specifies the id of the Job Run.

        :return: The job_run_id of this ProtectionSourceSnapshotInformation.
        :rtype: int
        """
        return self._job_run_id

    @job_run_id.setter
    def job_run_id(self, job_run_id):
        """
        Sets the job_run_id of this ProtectionSourceSnapshotInformation.
        Specifies the id of the Job Run.

        :param job_run_id: The job_run_id of this ProtectionSourceSnapshotInformation.
        :type: int
        """

        self._job_run_id = job_run_id

    @property
    def last_run_end_time_usecs(self):
        """
        Gets the last_run_end_time_usecs of this ProtectionSourceSnapshotInformation.
        Specifies the end time of the last Job Run. The time is specified in Unix epoch Timestamp (in microseconds).

        :return: The last_run_end_time_usecs of this ProtectionSourceSnapshotInformation.
        :rtype: int
        """
        return self._last_run_end_time_usecs

    @last_run_end_time_usecs.setter
    def last_run_end_time_usecs(self, last_run_end_time_usecs):
        """
        Sets the last_run_end_time_usecs of this ProtectionSourceSnapshotInformation.
        Specifies the end time of the last Job Run. The time is specified in Unix epoch Timestamp (in microseconds).

        :param last_run_end_time_usecs: The last_run_end_time_usecs of this ProtectionSourceSnapshotInformation.
        :type: int
        """

        self._last_run_end_time_usecs = last_run_end_time_usecs

    @property
    def last_run_start_time_usecs(self):
        """
        Gets the last_run_start_time_usecs of this ProtectionSourceSnapshotInformation.
        Specifies the start time of the last Job Run. The time is specified in Unix epoch Timestamp (in microseconds).

        :return: The last_run_start_time_usecs of this ProtectionSourceSnapshotInformation.
        :rtype: int
        """
        return self._last_run_start_time_usecs

    @last_run_start_time_usecs.setter
    def last_run_start_time_usecs(self, last_run_start_time_usecs):
        """
        Sets the last_run_start_time_usecs of this ProtectionSourceSnapshotInformation.
        Specifies the start time of the last Job Run. The time is specified in Unix epoch Timestamp (in microseconds).

        :param last_run_start_time_usecs: The last_run_start_time_usecs of this ProtectionSourceSnapshotInformation.
        :type: int
        """

        self._last_run_start_time_usecs = last_run_start_time_usecs

    @property
    def message(self):
        """
        Gets the message of this ProtectionSourceSnapshotInformation.
        Specifies warning or error information when the Job Run is not successful.

        :return: The message of this ProtectionSourceSnapshotInformation.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ProtectionSourceSnapshotInformation.
        Specifies warning or error information when the Job Run is not successful.

        :param message: The message of this ProtectionSourceSnapshotInformation.
        :type: str
        """

        self._message = message

    @property
    def num_bytes_read(self):
        """
        Gets the num_bytes_read of this ProtectionSourceSnapshotInformation.
        Specifies the total number of bytes read.

        :return: The num_bytes_read of this ProtectionSourceSnapshotInformation.
        :rtype: int
        """
        return self._num_bytes_read

    @num_bytes_read.setter
    def num_bytes_read(self, num_bytes_read):
        """
        Sets the num_bytes_read of this ProtectionSourceSnapshotInformation.
        Specifies the total number of bytes read.

        :param num_bytes_read: The num_bytes_read of this ProtectionSourceSnapshotInformation.
        :type: int
        """

        self._num_bytes_read = num_bytes_read

    @property
    def num_logical_bytes_protected(self):
        """
        Gets the num_logical_bytes_protected of this ProtectionSourceSnapshotInformation.
        Specifies the total number of logical bytes that are protected. The logical size is when the data is fully hydrated or expanded.

        :return: The num_logical_bytes_protected of this ProtectionSourceSnapshotInformation.
        :rtype: int
        """
        return self._num_logical_bytes_protected

    @num_logical_bytes_protected.setter
    def num_logical_bytes_protected(self, num_logical_bytes_protected):
        """
        Sets the num_logical_bytes_protected of this ProtectionSourceSnapshotInformation.
        Specifies the total number of logical bytes that are protected. The logical size is when the data is fully hydrated or expanded.

        :param num_logical_bytes_protected: The num_logical_bytes_protected of this ProtectionSourceSnapshotInformation.
        :type: int
        """

        self._num_logical_bytes_protected = num_logical_bytes_protected

    @property
    def pagination_cookie(self):
        """
        Gets the pagination_cookie of this ProtectionSourceSnapshotInformation.
        Specifies an opaque string to pass into the next request to get the next set of Snapshots for pagination purposes. If null, this is the last set of Snapshots or the number of Snapshots returned is equal to or less than the specified pageCount.

        :return: The pagination_cookie of this ProtectionSourceSnapshotInformation.
        :rtype: int
        """
        return self._pagination_cookie

    @pagination_cookie.setter
    def pagination_cookie(self, pagination_cookie):
        """
        Sets the pagination_cookie of this ProtectionSourceSnapshotInformation.
        Specifies an opaque string to pass into the next request to get the next set of Snapshots for pagination purposes. If null, this is the last set of Snapshots or the number of Snapshots returned is equal to or less than the specified pageCount.

        :param pagination_cookie: The pagination_cookie of this ProtectionSourceSnapshotInformation.
        :type: int
        """

        self._pagination_cookie = pagination_cookie

    @property
    def run_status(self):
        """
        Gets the run_status of this ProtectionSourceSnapshotInformation.
        Specifies the type of the Job Run. 'kSuccess' indicates that the Job Run was successful. 'kRunning' indicates that the Job Run is currently running. 'kWarning' indicates that the Job Run was successful but warnings were issued. 'kCancelled' indicates that the Job Run was canceled. 'kError' indicates the Job Run encountered an error and did not run to completion.

        :return: The run_status of this ProtectionSourceSnapshotInformation.
        :rtype: str
        """
        return self._run_status

    @run_status.setter
    def run_status(self, run_status):
        """
        Sets the run_status of this ProtectionSourceSnapshotInformation.
        Specifies the type of the Job Run. 'kSuccess' indicates that the Job Run was successful. 'kRunning' indicates that the Job Run is currently running. 'kWarning' indicates that the Job Run was successful but warnings were issued. 'kCancelled' indicates that the Job Run was canceled. 'kError' indicates the Job Run encountered an error and did not run to completion.

        :param run_status: The run_status of this ProtectionSourceSnapshotInformation.
        :type: str
        """
        allowed_values = ["kSuccess", "kRunning", "kWarning", "kCancelled", "kError"]
        if run_status not in allowed_values:
            raise ValueError(
                "Invalid value for `run_status` ({0}), must be one of {1}"
                .format(run_status, allowed_values)
            )

        self._run_status = run_status

    @property
    def run_type(self):
        """
        Gets the run_type of this ProtectionSourceSnapshotInformation.
        Specifies the status of the Job Run. 'kRegular' indicates an incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time.

        :return: The run_type of this ProtectionSourceSnapshotInformation.
        :rtype: str
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """
        Sets the run_type of this ProtectionSourceSnapshotInformation.
        Specifies the status of the Job Run. 'kRegular' indicates an incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time.

        :param run_type: The run_type of this ProtectionSourceSnapshotInformation.
        :type: str
        """
        allowed_values = ["kRegular", "kFull", "kLog"]
        if run_type not in allowed_values:
            raise ValueError(
                "Invalid value for `run_type` ({0}), must be one of {1}"
                .format(run_type, allowed_values)
            )

        self._run_type = run_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
