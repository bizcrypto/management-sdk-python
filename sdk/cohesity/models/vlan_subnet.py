# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VlanSubnet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, ip=None, netmask_bits=None, netmask_ip4=None):
        """
        VlanSubnet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'ip': 'str',
            'netmask_bits': 'int',
            'netmask_ip4': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'ip': 'ip',
            'netmask_bits': 'netmaskBits',
            'netmask_ip4': 'netmaskIp4'
        }

        self._description = description
        self._ip = ip
        self._netmask_bits = netmask_bits
        self._netmask_ip4 = netmask_ip4

    @property
    def description(self):
        """
        Gets the description of this VlanSubnet.
        Description of the subnet.

        :return: The description of this VlanSubnet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this VlanSubnet.
        Description of the subnet.

        :param description: The description of this VlanSubnet.
        :type: str
        """

        self._description = description

    @property
    def ip(self):
        """
        Gets the ip of this VlanSubnet.
        Specifies either an IPv6 address or an IPv4 address.

        :return: The ip of this VlanSubnet.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """
        Sets the ip of this VlanSubnet.
        Specifies either an IPv6 address or an IPv4 address.

        :param ip: The ip of this VlanSubnet.
        :type: str
        """

        self._ip = ip

    @property
    def netmask_bits(self):
        """
        Gets the netmask_bits of this VlanSubnet.
        Specifies the netmask using bits.

        :return: The netmask_bits of this VlanSubnet.
        :rtype: int
        """
        return self._netmask_bits

    @netmask_bits.setter
    def netmask_bits(self, netmask_bits):
        """
        Sets the netmask_bits of this VlanSubnet.
        Specifies the netmask using bits.

        :param netmask_bits: The netmask_bits of this VlanSubnet.
        :type: int
        """

        self._netmask_bits = netmask_bits

    @property
    def netmask_ip4(self):
        """
        Gets the netmask_ip4 of this VlanSubnet.
        Specifies the netmask using an IP4 address. The netmask can only be set using netmaskIp4 if the IP address is an IPv4 address.

        :return: The netmask_ip4 of this VlanSubnet.
        :rtype: str
        """
        return self._netmask_ip4

    @netmask_ip4.setter
    def netmask_ip4(self, netmask_ip4):
        """
        Sets the netmask_ip4 of this VlanSubnet.
        Specifies the netmask using an IP4 address. The netmask can only be set using netmaskIp4 if the IP address is an IPv4 address.

        :param netmask_ip4: The netmask_ip4 of this VlanSubnet.
        :type: str
        """

        self._netmask_ip4 = netmask_ip4

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
