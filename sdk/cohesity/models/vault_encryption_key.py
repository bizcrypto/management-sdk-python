# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class VaultEncryptionKey(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_name=None, encryption_key_data=None, key_uid=None, vault_id=None, vault_name=None):
        """
        VaultEncryptionKey - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cluster_name': 'str',
            'encryption_key_data': 'str',
            'key_uid': 'VaultEncryptionKeyKeyUid',
            'vault_id': 'int',
            'vault_name': 'str'
        }

        self.attribute_map = {
            'cluster_name': 'clusterName',
            'encryption_key_data': 'encryptionKeyData',
            'key_uid': 'keyUid',
            'vault_id': 'vaultId',
            'vault_name': 'vaultName'
        }

        self._cluster_name = cluster_name
        self._encryption_key_data = encryption_key_data
        self._key_uid = key_uid
        self._vault_id = vault_id
        self._vault_name = vault_name

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this VaultEncryptionKey.
        Specifies the name of the source Cohesity Cluster that archived the data on the Vault.

        :return: The cluster_name of this VaultEncryptionKey.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this VaultEncryptionKey.
        Specifies the name of the source Cohesity Cluster that archived the data on the Vault.

        :param cluster_name: The cluster_name of this VaultEncryptionKey.
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def encryption_key_data(self):
        """
        Gets the encryption_key_data of this VaultEncryptionKey.
        Specifies the encryption key data corresponding to the specified keyUid. It contains a Key Encryption Key (KEK) or a Encrypted Data Encryption Key (eDEK).

        :return: The encryption_key_data of this VaultEncryptionKey.
        :rtype: str
        """
        return self._encryption_key_data

    @encryption_key_data.setter
    def encryption_key_data(self, encryption_key_data):
        """
        Sets the encryption_key_data of this VaultEncryptionKey.
        Specifies the encryption key data corresponding to the specified keyUid. It contains a Key Encryption Key (KEK) or a Encrypted Data Encryption Key (eDEK).

        :param encryption_key_data: The encryption_key_data of this VaultEncryptionKey.
        :type: str
        """

        self._encryption_key_data = encryption_key_data

    @property
    def key_uid(self):
        """
        Gets the key_uid of this VaultEncryptionKey.


        :return: The key_uid of this VaultEncryptionKey.
        :rtype: VaultEncryptionKeyKeyUid
        """
        return self._key_uid

    @key_uid.setter
    def key_uid(self, key_uid):
        """
        Sets the key_uid of this VaultEncryptionKey.


        :param key_uid: The key_uid of this VaultEncryptionKey.
        :type: VaultEncryptionKeyKeyUid
        """

        self._key_uid = key_uid

    @property
    def vault_id(self):
        """
        Gets the vault_id of this VaultEncryptionKey.
        Specifies the id of the Vault whose data is encrypted by this key.

        :return: The vault_id of this VaultEncryptionKey.
        :rtype: int
        """
        return self._vault_id

    @vault_id.setter
    def vault_id(self, vault_id):
        """
        Sets the vault_id of this VaultEncryptionKey.
        Specifies the id of the Vault whose data is encrypted by this key.

        :param vault_id: The vault_id of this VaultEncryptionKey.
        :type: int
        """

        self._vault_id = vault_id

    @property
    def vault_name(self):
        """
        Gets the vault_name of this VaultEncryptionKey.
        Specifies the name of the Vault whose data is encrypted by this key.

        :return: The vault_name of this VaultEncryptionKey.
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """
        Sets the vault_name of this VaultEncryptionKey.
        Specifies the name of the Vault whose data is encrypted by this key.

        :param vault_name: The vault_name of this VaultEncryptionKey.
        :type: str
        """

        self._vault_name = vault_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
