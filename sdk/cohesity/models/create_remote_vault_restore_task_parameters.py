# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateRemoteVaultRestoreTaskParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, restore_objects=None, search_job_uid=None, task_name=None, vault_id=None):
        """
        CreateRemoteVaultRestoreTaskParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'restore_objects': 'list[IndexAndSnapshots]',
            'search_job_uid': 'CreateRemoteVaultRestoreTaskParametersSearchJobUid',
            'task_name': 'str',
            'vault_id': 'int'
        }

        self.attribute_map = {
            'restore_objects': 'restoreObjects',
            'search_job_uid': 'searchJobUid',
            'task_name': 'taskName',
            'vault_id': 'vaultId'
        }

        self._restore_objects = restore_objects
        self._search_job_uid = search_job_uid
        self._task_name = task_name
        self._vault_id = vault_id

    @property
    def restore_objects(self):
        """
        Gets the restore_objects of this CreateRemoteVaultRestoreTaskParameters.
        Specifies the list of Snapshots and the index to be restored from the remote Vault. The data on the remote Vault may have been originally archived from multiple remote Clusters.

        :return: The restore_objects of this CreateRemoteVaultRestoreTaskParameters.
        :rtype: list[IndexAndSnapshots]
        """
        return self._restore_objects

    @restore_objects.setter
    def restore_objects(self, restore_objects):
        """
        Sets the restore_objects of this CreateRemoteVaultRestoreTaskParameters.
        Specifies the list of Snapshots and the index to be restored from the remote Vault. The data on the remote Vault may have been originally archived from multiple remote Clusters.

        :param restore_objects: The restore_objects of this CreateRemoteVaultRestoreTaskParameters.
        :type: list[IndexAndSnapshots]
        """

        self._restore_objects = restore_objects

    @property
    def search_job_uid(self):
        """
        Gets the search_job_uid of this CreateRemoteVaultRestoreTaskParameters.


        :return: The search_job_uid of this CreateRemoteVaultRestoreTaskParameters.
        :rtype: CreateRemoteVaultRestoreTaskParametersSearchJobUid
        """
        return self._search_job_uid

    @search_job_uid.setter
    def search_job_uid(self, search_job_uid):
        """
        Sets the search_job_uid of this CreateRemoteVaultRestoreTaskParameters.


        :param search_job_uid: The search_job_uid of this CreateRemoteVaultRestoreTaskParameters.
        :type: CreateRemoteVaultRestoreTaskParametersSearchJobUid
        """

        self._search_job_uid = search_job_uid

    @property
    def task_name(self):
        """
        Gets the task_name of this CreateRemoteVaultRestoreTaskParameters.
        Specifies a name of the restore task.

        :return: The task_name of this CreateRemoteVaultRestoreTaskParameters.
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """
        Sets the task_name of this CreateRemoteVaultRestoreTaskParameters.
        Specifies a name of the restore task.

        :param task_name: The task_name of this CreateRemoteVaultRestoreTaskParameters.
        :type: str
        """

        self._task_name = task_name

    @property
    def vault_id(self):
        """
        Gets the vault_id of this CreateRemoteVaultRestoreTaskParameters.
        Specifies the id of the Vault that contains the index and Snapshots to restore to the current Cluster. This is the id assigned by the Cohesity Cluster when Vault was registered as an External Target.

        :return: The vault_id of this CreateRemoteVaultRestoreTaskParameters.
        :rtype: int
        """
        return self._vault_id

    @vault_id.setter
    def vault_id(self, vault_id):
        """
        Sets the vault_id of this CreateRemoteVaultRestoreTaskParameters.
        Specifies the id of the Vault that contains the index and Snapshots to restore to the current Cluster. This is the id assigned by the Cohesity Cluster when Vault was registered as an External Target.

        :param vault_id: The vault_id of this CreateRemoteVaultRestoreTaskParameters.
        :type: int
        """

        self._vault_id = vault_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
