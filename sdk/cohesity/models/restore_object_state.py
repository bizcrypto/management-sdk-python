# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RestoreObjectState(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, error=None, object_status=None, resource_pool_id=None, restored_object_id=None, source_object_id=None):
        """
        RestoreObjectState - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'error': 'RequestError',
            'object_status': 'str',
            'resource_pool_id': 'int',
            'restored_object_id': 'int',
            'source_object_id': 'int'
        }

        self.attribute_map = {
            'error': 'error',
            'object_status': 'objectStatus',
            'resource_pool_id': 'resourcePoolId',
            'restored_object_id': 'restoredObjectId',
            'source_object_id': 'sourceObjectId'
        }

        self._error = error
        self._object_status = object_status
        self._resource_pool_id = resource_pool_id
        self._restored_object_id = restored_object_id
        self._source_object_id = source_object_id

    @property
    def error(self):
        """
        Gets the error of this RestoreObjectState.
        Specifies if an error occurred during the restore operation.

        :return: The error of this RestoreObjectState.
        :rtype: RequestError
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this RestoreObjectState.
        Specifies if an error occurred during the restore operation.

        :param error: The error of this RestoreObjectState.
        :type: RequestError
        """

        self._error = error

    @property
    def object_status(self):
        """
        Gets the object_status of this RestoreObjectState.
        Specifies the status of an object during a Restore Task. 'kFilesCloned' indicates that the cloning has completed. 'kFetchedEntityInfo' indicates that information about the object was fetched from the primary source. 'kVMCreated' indicates that the new VM was created. 'kRelocationStarted' indicates that restoring to a different resource pool has started. 'kFinished' indicates that the Restore Task has finished. Whether it was successful or not is indicated by the error code that that is stored with the Restore Task. 'kAborted' indicates that the Restore Task was aborted before trying to restore this object. This can happen if the Restore Task encounters a global error. For example during a 'kCloneVMs' Restore Task, the datastore could not be mounted. The entire Restore Task is aborted before trying to create VMs on the primary source.

        :return: The object_status of this RestoreObjectState.
        :rtype: str
        """
        return self._object_status

    @object_status.setter
    def object_status(self, object_status):
        """
        Sets the object_status of this RestoreObjectState.
        Specifies the status of an object during a Restore Task. 'kFilesCloned' indicates that the cloning has completed. 'kFetchedEntityInfo' indicates that information about the object was fetched from the primary source. 'kVMCreated' indicates that the new VM was created. 'kRelocationStarted' indicates that restoring to a different resource pool has started. 'kFinished' indicates that the Restore Task has finished. Whether it was successful or not is indicated by the error code that that is stored with the Restore Task. 'kAborted' indicates that the Restore Task was aborted before trying to restore this object. This can happen if the Restore Task encounters a global error. For example during a 'kCloneVMs' Restore Task, the datastore could not be mounted. The entire Restore Task is aborted before trying to create VMs on the primary source.

        :param object_status: The object_status of this RestoreObjectState.
        :type: str
        """
        allowed_values = ["kFilesCloned", "kFetchedEntityInfo", "kVMCreated", "kRelocationStarted", "kFinished", "kAborted"]
        if object_status not in allowed_values:
            raise ValueError(
                "Invalid value for `object_status` ({0}), must be one of {1}"
                .format(object_status, allowed_values)
            )

        self._object_status = object_status

    @property
    def resource_pool_id(self):
        """
        Gets the resource_pool_id of this RestoreObjectState.
        Specifies the id of the Resource Pool that the restored object is attached to. For a 'kRecoverVMs' Restore Task, an object can be recovered back to its original resource pool. This means while recovering a set of objects, this field can reference different resource pools. For a 'kCloneVMs' Restore Task, all objects are attached to the same resource pool. However, this field will still be populated. NOTE: This field may not be populated if the restore of the object fails.

        :return: The resource_pool_id of this RestoreObjectState.
        :rtype: int
        """
        return self._resource_pool_id

    @resource_pool_id.setter
    def resource_pool_id(self, resource_pool_id):
        """
        Sets the resource_pool_id of this RestoreObjectState.
        Specifies the id of the Resource Pool that the restored object is attached to. For a 'kRecoverVMs' Restore Task, an object can be recovered back to its original resource pool. This means while recovering a set of objects, this field can reference different resource pools. For a 'kCloneVMs' Restore Task, all objects are attached to the same resource pool. However, this field will still be populated. NOTE: This field may not be populated if the restore of the object fails.

        :param resource_pool_id: The resource_pool_id of this RestoreObjectState.
        :type: int
        """

        self._resource_pool_id = resource_pool_id

    @property
    def restored_object_id(self):
        """
        Gets the restored_object_id of this RestoreObjectState.
        Specifies the Id of the recovered or cloned object. NOTE: For a Restore Task that is recovering or cloning an object in the VMware environment, after the VM is created it is storage vMotioned to its primary datastore. If storage vMotion fails, the Cohesity Cluster marks the recovery task as failed. However, this field is still populated with the id of the recovered VM. This id can be used later to clean up the VM from primary environment (i.e, the vCenter Server).

        :return: The restored_object_id of this RestoreObjectState.
        :rtype: int
        """
        return self._restored_object_id

    @restored_object_id.setter
    def restored_object_id(self, restored_object_id):
        """
        Sets the restored_object_id of this RestoreObjectState.
        Specifies the Id of the recovered or cloned object. NOTE: For a Restore Task that is recovering or cloning an object in the VMware environment, after the VM is created it is storage vMotioned to its primary datastore. If storage vMotion fails, the Cohesity Cluster marks the recovery task as failed. However, this field is still populated with the id of the recovered VM. This id can be used later to clean up the VM from primary environment (i.e, the vCenter Server).

        :param restored_object_id: The restored_object_id of this RestoreObjectState.
        :type: int
        """

        self._restored_object_id = restored_object_id

    @property
    def source_object_id(self):
        """
        Gets the source_object_id of this RestoreObjectState.
        Specifies the Protection Source id of the object to be recovered or cloned.

        :return: The source_object_id of this RestoreObjectState.
        :rtype: int
        """
        return self._source_object_id

    @source_object_id.setter
    def source_object_id(self, source_object_id):
        """
        Sets the source_object_id of this RestoreObjectState.
        Specifies the Protection Source id of the object to be recovered or cloned.

        :param source_object_id: The source_object_id of this RestoreObjectState.
        :type: int
        """

        self._source_object_id = source_object_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
