# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MountVolumeResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, mount_error=None, mount_point=None, volume_name=None):
        """
        MountVolumeResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'mount_error': 'MountVolumeResultMountError',
            'mount_point': 'str',
            'volume_name': 'str'
        }

        self.attribute_map = {
            'mount_error': 'mountError',
            'mount_point': 'mountPoint',
            'volume_name': 'volumeName'
        }

        self._mount_error = mount_error
        self._mount_point = mount_point
        self._volume_name = volume_name

    @property
    def mount_error(self):
        """
        Gets the mount_error of this MountVolumeResult.


        :return: The mount_error of this MountVolumeResult.
        :rtype: MountVolumeResultMountError
        """
        return self._mount_error

    @mount_error.setter
    def mount_error(self, mount_error):
        """
        Sets the mount_error of this MountVolumeResult.


        :param mount_error: The mount_error of this MountVolumeResult.
        :type: MountVolumeResultMountError
        """

        self._mount_error = mount_error

    @property
    def mount_point(self):
        """
        Gets the mount_point of this MountVolumeResult.
        Specifies the mount point where the volume is mounted. NOTE: This field may not be populated for VM environments if the onlining of disks is not requested or there was any issue during onlining.

        :return: The mount_point of this MountVolumeResult.
        :rtype: str
        """
        return self._mount_point

    @mount_point.setter
    def mount_point(self, mount_point):
        """
        Sets the mount_point of this MountVolumeResult.
        Specifies the mount point where the volume is mounted. NOTE: This field may not be populated for VM environments if the onlining of disks is not requested or there was any issue during onlining.

        :param mount_point: The mount_point of this MountVolumeResult.
        :type: str
        """

        self._mount_point = mount_point

    @property
    def volume_name(self):
        """
        Gets the volume_name of this MountVolumeResult.
        Specifies the name of the original volume.

        :return: The volume_name of this MountVolumeResult.
        :rtype: str
        """
        return self._volume_name

    @volume_name.setter
    def volume_name(self, volume_name):
        """
        Sets the volume_name of this MountVolumeResult.
        Specifies the name of the original volume.

        :param volume_name: The volume_name of this MountVolumeResult.
        :type: str
        """

        self._volume_name = volume_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
