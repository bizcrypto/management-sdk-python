# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CreateRemoteVaultSearchJobParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_match_string=None, encryption_keys=None, end_time_usecs=None, job_match_string=None, search_job_name=None, start_time_usecs=None, vault_id=None):
        """
        CreateRemoteVaultSearchJobParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cluster_match_string': 'str',
            'encryption_keys': 'list[VaultEncryptionKey]',
            'end_time_usecs': 'int',
            'job_match_string': 'str',
            'search_job_name': 'str',
            'start_time_usecs': 'int',
            'vault_id': 'int'
        }

        self.attribute_map = {
            'cluster_match_string': 'clusterMatchString',
            'encryption_keys': 'encryptionKeys',
            'end_time_usecs': 'endTimeUsecs',
            'job_match_string': 'jobMatchString',
            'search_job_name': 'searchJobName',
            'start_time_usecs': 'startTimeUsecs',
            'vault_id': 'vaultId'
        }

        self._cluster_match_string = cluster_match_string
        self._encryption_keys = encryption_keys
        self._end_time_usecs = end_time_usecs
        self._job_match_string = job_match_string
        self._search_job_name = search_job_name
        self._start_time_usecs = start_time_usecs
        self._vault_id = vault_id

    @property
    def cluster_match_string(self):
        """
        Gets the cluster_match_string of this CreateRemoteVaultSearchJobParameters.
        Filter by specifying a Cluster name prefix string. Only Clusters with names that start with this prefix string are returned in the search result. If not set, all Clusters archiving data to the Vault are returned in the search results.

        :return: The cluster_match_string of this CreateRemoteVaultSearchJobParameters.
        :rtype: str
        """
        return self._cluster_match_string

    @cluster_match_string.setter
    def cluster_match_string(self, cluster_match_string):
        """
        Sets the cluster_match_string of this CreateRemoteVaultSearchJobParameters.
        Filter by specifying a Cluster name prefix string. Only Clusters with names that start with this prefix string are returned in the search result. If not set, all Clusters archiving data to the Vault are returned in the search results.

        :param cluster_match_string: The cluster_match_string of this CreateRemoteVaultSearchJobParameters.
        :type: str
        """

        self._cluster_match_string = cluster_match_string

    @property
    def encryption_keys(self):
        """
        Gets the encryption_keys of this CreateRemoteVaultSearchJobParameters.
        Specifies an optional list of encryption keys that may be needed to search and restore data that was archived to a remote Vault. Archived data cannot be searched or restored without the corresponding encryption key used by the original Cluster to archive the data. Encryption keys can be uploaded using the REST API public/remoteVaults/encryptionKeys operation. If the key is already uploaded, this field does not need to be specified.

        :return: The encryption_keys of this CreateRemoteVaultSearchJobParameters.
        :rtype: list[VaultEncryptionKey]
        """
        return self._encryption_keys

    @encryption_keys.setter
    def encryption_keys(self, encryption_keys):
        """
        Sets the encryption_keys of this CreateRemoteVaultSearchJobParameters.
        Specifies an optional list of encryption keys that may be needed to search and restore data that was archived to a remote Vault. Archived data cannot be searched or restored without the corresponding encryption key used by the original Cluster to archive the data. Encryption keys can be uploaded using the REST API public/remoteVaults/encryptionKeys operation. If the key is already uploaded, this field does not need to be specified.

        :param encryption_keys: The encryption_keys of this CreateRemoteVaultSearchJobParameters.
        :type: list[VaultEncryptionKey]
        """

        self._encryption_keys = encryption_keys

    @property
    def end_time_usecs(self):
        """
        Gets the end_time_usecs of this CreateRemoteVaultSearchJobParameters.
        Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that completed before the specified end time are included in the search results.

        :return: The end_time_usecs of this CreateRemoteVaultSearchJobParameters.
        :rtype: int
        """
        return self._end_time_usecs

    @end_time_usecs.setter
    def end_time_usecs(self, end_time_usecs):
        """
        Sets the end_time_usecs of this CreateRemoteVaultSearchJobParameters.
        Filter by a end time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that completed before the specified end time are included in the search results.

        :param end_time_usecs: The end_time_usecs of this CreateRemoteVaultSearchJobParameters.
        :type: int
        """

        self._end_time_usecs = end_time_usecs

    @property
    def job_match_string(self):
        """
        Gets the job_match_string of this CreateRemoteVaultSearchJobParameters.
        Filter by specifying a Protection Job name prefix string. Only Protection Jobs with names that start with this prefix string are returned in the search result. If not set, all Protection Jobs archiving data to the Vault are returned in the search results.

        :return: The job_match_string of this CreateRemoteVaultSearchJobParameters.
        :rtype: str
        """
        return self._job_match_string

    @job_match_string.setter
    def job_match_string(self, job_match_string):
        """
        Sets the job_match_string of this CreateRemoteVaultSearchJobParameters.
        Filter by specifying a Protection Job name prefix string. Only Protection Jobs with names that start with this prefix string are returned in the search result. If not set, all Protection Jobs archiving data to the Vault are returned in the search results.

        :param job_match_string: The job_match_string of this CreateRemoteVaultSearchJobParameters.
        :type: str
        """

        self._job_match_string = job_match_string

    @property
    def search_job_name(self):
        """
        Gets the search_job_name of this CreateRemoteVaultSearchJobParameters.
        Specifies the search Job name.

        :return: The search_job_name of this CreateRemoteVaultSearchJobParameters.
        :rtype: str
        """
        return self._search_job_name

    @search_job_name.setter
    def search_job_name(self, search_job_name):
        """
        Sets the search_job_name of this CreateRemoteVaultSearchJobParameters.
        Specifies the search Job name.

        :param search_job_name: The search_job_name of this CreateRemoteVaultSearchJobParameters.
        :type: str
        """

        self._search_job_name = search_job_name

    @property
    def start_time_usecs(self):
        """
        Gets the start_time_usecs of this CreateRemoteVaultSearchJobParameters.
        Filter by a start time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that started after the specified time are included in the search results.

        :return: The start_time_usecs of this CreateRemoteVaultSearchJobParameters.
        :rtype: int
        """
        return self._start_time_usecs

    @start_time_usecs.setter
    def start_time_usecs(self, start_time_usecs):
        """
        Sets the start_time_usecs of this CreateRemoteVaultSearchJobParameters.
        Filter by a start time specified as a Unix epoch Timestamp (in microseconds). Only Job Runs that started after the specified time are included in the search results.

        :param start_time_usecs: The start_time_usecs of this CreateRemoteVaultSearchJobParameters.
        :type: int
        """

        self._start_time_usecs = start_time_usecs

    @property
    def vault_id(self):
        """
        Gets the vault_id of this CreateRemoteVaultSearchJobParameters.
        Specifies the id of the Vault to search. This id was assigned by the local Cohesity Cluster when Vault was registered as an External Target.

        :return: The vault_id of this CreateRemoteVaultSearchJobParameters.
        :rtype: int
        """
        return self._vault_id

    @vault_id.setter
    def vault_id(self, vault_id):
        """
        Sets the vault_id of this CreateRemoteVaultSearchJobParameters.
        Specifies the id of the Vault to search. This id was assigned by the local Cohesity Cluster when Vault was registered as an External Target.

        :param vault_id: The vault_id of this CreateRemoteVaultSearchJobParameters.
        :type: int
        """

        self._vault_id = vault_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
