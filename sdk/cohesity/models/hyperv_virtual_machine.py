# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class HypervVirtualMachine(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, is_highly_available=None, version=None, vm_backup_status=None, vm_backup_type=None):
        """
        HypervVirtualMachine - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_highly_available': 'bool',
            'version': 'str',
            'vm_backup_status': 'str',
            'vm_backup_type': 'str'
        }

        self.attribute_map = {
            'is_highly_available': 'isHighlyAvailable',
            'version': 'version',
            'vm_backup_status': 'vmBackupStatus',
            'vm_backup_type': 'vmBackupType'
        }

        self._is_highly_available = is_highly_available
        self._version = version
        self._vm_backup_status = vm_backup_status
        self._vm_backup_type = vm_backup_type

    @property
    def is_highly_available(self):
        """
        Gets the is_highly_available of this HypervVirtualMachine.
        Specifies whether the VM is Highly Availabile or not.

        :return: The is_highly_available of this HypervVirtualMachine.
        :rtype: bool
        """
        return self._is_highly_available

    @is_highly_available.setter
    def is_highly_available(self, is_highly_available):
        """
        Sets the is_highly_available of this HypervVirtualMachine.
        Specifies whether the VM is Highly Availabile or not.

        :param is_highly_available: The is_highly_available of this HypervVirtualMachine.
        :type: bool
        """

        self._is_highly_available = is_highly_available

    @property
    def version(self):
        """
        Gets the version of this HypervVirtualMachine.
        Specifies the version of the VM. For example, 8.0, 5.0 etc.

        :return: The version of this HypervVirtualMachine.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this HypervVirtualMachine.
        Specifies the version of the VM. For example, 8.0, 5.0 etc.

        :param version: The version of this HypervVirtualMachine.
        :type: str
        """

        self._version = version

    @property
    def vm_backup_status(self):
        """
        Gets the vm_backup_status of this HypervVirtualMachine.
        Specifies the status of the VM for backup purpose. overrideDescription: true Specifies the backup status of a HyperV Virtual Machine object. 'kSupported' indicates the agent on the VM can do backup. 'kUnsupportedConfig' indicates the agent on the VM cannot do backup. 'kMissing' indicates the VM is not found in SCVMM.

        :return: The vm_backup_status of this HypervVirtualMachine.
        :rtype: str
        """
        return self._vm_backup_status

    @vm_backup_status.setter
    def vm_backup_status(self, vm_backup_status):
        """
        Sets the vm_backup_status of this HypervVirtualMachine.
        Specifies the status of the VM for backup purpose. overrideDescription: true Specifies the backup status of a HyperV Virtual Machine object. 'kSupported' indicates the agent on the VM can do backup. 'kUnsupportedConfig' indicates the agent on the VM cannot do backup. 'kMissing' indicates the VM is not found in SCVMM.

        :param vm_backup_status: The vm_backup_status of this HypervVirtualMachine.
        :type: str
        """
        allowed_values = ["kSupported", "kUnsupportedConfig", "kMissing"]
        if vm_backup_status not in allowed_values:
            raise ValueError(
                "Invalid value for `vm_backup_status` ({0}), must be one of {1}"
                .format(vm_backup_status, allowed_values)
            )

        self._vm_backup_status = vm_backup_status

    @property
    def vm_backup_type(self):
        """
        Gets the vm_backup_type of this HypervVirtualMachine.
        Specifies the type of backup supported by the VM. overrideDescription: true Specifies the type of an HyperV datastore object. 'kRctBackup' indicates backup is done using RCT/checkpoints. 'kVssBackup' indicates backup is done using VSS.

        :return: The vm_backup_type of this HypervVirtualMachine.
        :rtype: str
        """
        return self._vm_backup_type

    @vm_backup_type.setter
    def vm_backup_type(self, vm_backup_type):
        """
        Sets the vm_backup_type of this HypervVirtualMachine.
        Specifies the type of backup supported by the VM. overrideDescription: true Specifies the type of an HyperV datastore object. 'kRctBackup' indicates backup is done using RCT/checkpoints. 'kVssBackup' indicates backup is done using VSS.

        :param vm_backup_type: The vm_backup_type of this HypervVirtualMachine.
        :type: str
        """
        allowed_values = ["kRctBackup", "kVssBackup"]
        if vm_backup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `vm_backup_type` ({0}), must be one of {1}"
                .format(vm_backup_type, allowed_values)
            )

        self._vm_backup_type = vm_backup_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
