# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BandwidthLimit(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, bandwidth_limit_overrides=None, rate_limit_bytes_per_sec=None, timezone=None):
        """
        BandwidthLimit - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'bandwidth_limit_overrides': 'list[BandwidthLimitOverride]',
            'rate_limit_bytes_per_sec': 'int',
            'timezone': 'str'
        }

        self.attribute_map = {
            'bandwidth_limit_overrides': 'bandwidthLimitOverrides',
            'rate_limit_bytes_per_sec': 'rateLimitBytesPerSec',
            'timezone': 'timezone'
        }

        self._bandwidth_limit_overrides = bandwidth_limit_overrides
        self._rate_limit_bytes_per_sec = rate_limit_bytes_per_sec
        self._timezone = timezone

    @property
    def bandwidth_limit_overrides(self):
        """
        Gets the bandwidth_limit_overrides of this BandwidthLimit.
        Specifies a list of override bandwidth limits and time periods when those limits override the rateLimitBytesPerSec limit. If overlapping time periods are specified, the last one in the array takes precedence.

        :return: The bandwidth_limit_overrides of this BandwidthLimit.
        :rtype: list[BandwidthLimitOverride]
        """
        return self._bandwidth_limit_overrides

    @bandwidth_limit_overrides.setter
    def bandwidth_limit_overrides(self, bandwidth_limit_overrides):
        """
        Sets the bandwidth_limit_overrides of this BandwidthLimit.
        Specifies a list of override bandwidth limits and time periods when those limits override the rateLimitBytesPerSec limit. If overlapping time periods are specified, the last one in the array takes precedence.

        :param bandwidth_limit_overrides: The bandwidth_limit_overrides of this BandwidthLimit.
        :type: list[BandwidthLimitOverride]
        """

        self._bandwidth_limit_overrides = bandwidth_limit_overrides

    @property
    def rate_limit_bytes_per_sec(self):
        """
        Gets the rate_limit_bytes_per_sec of this BandwidthLimit.
        Specifies the maximum allowed data transfer rate between the local Cluster and remote Clusters. The value is specified in bytes per second. If not set, the data transfer rate is not limited.

        :return: The rate_limit_bytes_per_sec of this BandwidthLimit.
        :rtype: int
        """
        return self._rate_limit_bytes_per_sec

    @rate_limit_bytes_per_sec.setter
    def rate_limit_bytes_per_sec(self, rate_limit_bytes_per_sec):
        """
        Sets the rate_limit_bytes_per_sec of this BandwidthLimit.
        Specifies the maximum allowed data transfer rate between the local Cluster and remote Clusters. The value is specified in bytes per second. If not set, the data transfer rate is not limited.

        :param rate_limit_bytes_per_sec: The rate_limit_bytes_per_sec of this BandwidthLimit.
        :type: int
        """

        self._rate_limit_bytes_per_sec = rate_limit_bytes_per_sec

    @property
    def timezone(self):
        """
        Gets the timezone of this BandwidthLimit.
        Specifies a time zone for the specified time period. The time zone is defined in the following format: \"Area/Location\", for example: \"America/New_York\".

        :return: The timezone of this BandwidthLimit.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this BandwidthLimit.
        Specifies a time zone for the specified time period. The time zone is defined in the following format: \"Area/Location\", for example: \"America/New_York\".

        :param timezone: The timezone of this BandwidthLimit.
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
