# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EntitySchemaProto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, attributes_descriptor=None, is_internal_schema=None, name=None, schema_descriptive_name=None, schema_help_text=None, time_series_descriptor_vec=None, version=None):
        """
        EntitySchemaProto - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'attributes_descriptor': 'EntitySchemaProtoAttributesDescriptor',
            'is_internal_schema': 'bool',
            'name': 'str',
            'schema_descriptive_name': 'str',
            'schema_help_text': 'str',
            'time_series_descriptor_vec': 'list[EntitySchemaProtoTimeSeriesDescriptor]',
            'version': 'int'
        }

        self.attribute_map = {
            'attributes_descriptor': 'attributesDescriptor',
            'is_internal_schema': 'isInternalSchema',
            'name': 'name',
            'schema_descriptive_name': 'schemaDescriptiveName',
            'schema_help_text': 'schemaHelpText',
            'time_series_descriptor_vec': 'timeSeriesDescriptorVec',
            'version': 'version'
        }

        self._attributes_descriptor = attributes_descriptor
        self._is_internal_schema = is_internal_schema
        self._name = name
        self._schema_descriptive_name = schema_descriptive_name
        self._schema_help_text = schema_help_text
        self._time_series_descriptor_vec = time_series_descriptor_vec
        self._version = version

    @property
    def attributes_descriptor(self):
        """
        Gets the attributes_descriptor of this EntitySchemaProto.


        :return: The attributes_descriptor of this EntitySchemaProto.
        :rtype: EntitySchemaProtoAttributesDescriptor
        """
        return self._attributes_descriptor

    @attributes_descriptor.setter
    def attributes_descriptor(self, attributes_descriptor):
        """
        Sets the attributes_descriptor of this EntitySchemaProto.


        :param attributes_descriptor: The attributes_descriptor of this EntitySchemaProto.
        :type: EntitySchemaProtoAttributesDescriptor
        """

        self._attributes_descriptor = attributes_descriptor

    @property
    def is_internal_schema(self):
        """
        Gets the is_internal_schema of this EntitySchemaProto.
        Specifies if this schema should be displayed in Advanced Diagnostics of the Cohesity Dashboard. If false, the schema is displayed.

        :return: The is_internal_schema of this EntitySchemaProto.
        :rtype: bool
        """
        return self._is_internal_schema

    @is_internal_schema.setter
    def is_internal_schema(self, is_internal_schema):
        """
        Sets the is_internal_schema of this EntitySchemaProto.
        Specifies if this schema should be displayed in Advanced Diagnostics of the Cohesity Dashboard. If false, the schema is displayed.

        :param is_internal_schema: The is_internal_schema of this EntitySchemaProto.
        :type: bool
        """

        self._is_internal_schema = is_internal_schema

    @property
    def name(self):
        """
        Gets the name of this EntitySchemaProto.
        Specifies a name that uniquely identifies an entity schema such as 'kBridgeClusterStats'.

        :return: The name of this EntitySchemaProto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EntitySchemaProto.
        Specifies a name that uniquely identifies an entity schema such as 'kBridgeClusterStats'.

        :param name: The name of this EntitySchemaProto.
        :type: str
        """

        self._name = name

    @property
    def schema_descriptive_name(self):
        """
        Gets the schema_descriptive_name of this EntitySchemaProto.
        Specifies the name of the Schema as displayed in Advanced Diagnostics of the Cohesity Dashboard. For example for the 'kBridgeClusterStats' Schema, the descriptive name is 'Cluster Physical Stats'.

        :return: The schema_descriptive_name of this EntitySchemaProto.
        :rtype: str
        """
        return self._schema_descriptive_name

    @schema_descriptive_name.setter
    def schema_descriptive_name(self, schema_descriptive_name):
        """
        Sets the schema_descriptive_name of this EntitySchemaProto.
        Specifies the name of the Schema as displayed in Advanced Diagnostics of the Cohesity Dashboard. For example for the 'kBridgeClusterStats' Schema, the descriptive name is 'Cluster Physical Stats'.

        :param schema_descriptive_name: The schema_descriptive_name of this EntitySchemaProto.
        :type: str
        """

        self._schema_descriptive_name = schema_descriptive_name

    @property
    def schema_help_text(self):
        """
        Gets the schema_help_text of this EntitySchemaProto.
        Specifies an optional informational description about the schema.

        :return: The schema_help_text of this EntitySchemaProto.
        :rtype: str
        """
        return self._schema_help_text

    @schema_help_text.setter
    def schema_help_text(self, schema_help_text):
        """
        Sets the schema_help_text of this EntitySchemaProto.
        Specifies an optional informational description about the schema.

        :param schema_help_text: The schema_help_text of this EntitySchemaProto.
        :type: str
        """

        self._schema_help_text = schema_help_text

    @property
    def time_series_descriptor_vec(self):
        """
        Gets the time_series_descriptor_vec of this EntitySchemaProto.
        List of time series of data (set of data points) for metrics.

        :return: The time_series_descriptor_vec of this EntitySchemaProto.
        :rtype: list[EntitySchemaProtoTimeSeriesDescriptor]
        """
        return self._time_series_descriptor_vec

    @time_series_descriptor_vec.setter
    def time_series_descriptor_vec(self, time_series_descriptor_vec):
        """
        Sets the time_series_descriptor_vec of this EntitySchemaProto.
        List of time series of data (set of data points) for metrics.

        :param time_series_descriptor_vec: The time_series_descriptor_vec of this EntitySchemaProto.
        :type: list[EntitySchemaProtoTimeSeriesDescriptor]
        """

        self._time_series_descriptor_vec = time_series_descriptor_vec

    @property
    def version(self):
        """
        Gets the version of this EntitySchemaProto.
        Specifies the version of the entity schema.

        :return: The version of this EntitySchemaProto.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this EntitySchemaProto.
        Specifies the version of the entity schema.

        :param version: The version of this EntitySchemaProto.
        :type: int
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
