# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ApplicationsRestoreTaskRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, application_environment=None, application_restore_objects=None, hosting_protection_source=None, name=None, password=None, username=None, vlan_parameters=None):
        """
        ApplicationsRestoreTaskRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'application_environment': 'str',
            'application_restore_objects': 'list[ApplicationRestoreObject]',
            'hosting_protection_source': 'RestoreObject',
            'name': 'str',
            'password': 'str',
            'username': 'str',
            'vlan_parameters': 'VlanParameters'
        }

        self.attribute_map = {
            'application_environment': 'applicationEnvironment',
            'application_restore_objects': 'applicationRestoreObjects',
            'hosting_protection_source': 'hostingProtectionSource',
            'name': 'name',
            'password': 'password',
            'username': 'username',
            'vlan_parameters': 'vlanParameters'
        }

        self._application_environment = application_environment
        self._application_restore_objects = application_restore_objects
        self._hosting_protection_source = hosting_protection_source
        self._name = name
        self._password = password
        self._username = username
        self._vlan_parameters = vlan_parameters

    @property
    def application_environment(self):
        """
        Gets the application_environment of this ApplicationsRestoreTaskRequest.
        Specifies the Environment of the Application to restore like 'kSQL', or 'kExchange'. overrideDescription: true

        :return: The application_environment of this ApplicationsRestoreTaskRequest.
        :rtype: str
        """
        return self._application_environment

    @application_environment.setter
    def application_environment(self, application_environment):
        """
        Sets the application_environment of this ApplicationsRestoreTaskRequest.
        Specifies the Environment of the Application to restore like 'kSQL', or 'kExchange'. overrideDescription: true

        :param application_environment: The application_environment of this ApplicationsRestoreTaskRequest.
        :type: str
        """
        allowed_values = ["kSQL", "kExchange"]
        if application_environment not in allowed_values:
            raise ValueError(
                "Invalid value for `application_environment` ({0}), must be one of {1}"
                .format(application_environment, allowed_values)
            )

        self._application_environment = application_environment

    @property
    def application_restore_objects(self):
        """
        Gets the application_restore_objects of this ApplicationsRestoreTaskRequest.
        Specifies the Application Server objects whose data should be restored and the restore parameters for each of them.

        :return: The application_restore_objects of this ApplicationsRestoreTaskRequest.
        :rtype: list[ApplicationRestoreObject]
        """
        return self._application_restore_objects

    @application_restore_objects.setter
    def application_restore_objects(self, application_restore_objects):
        """
        Sets the application_restore_objects of this ApplicationsRestoreTaskRequest.
        Specifies the Application Server objects whose data should be restored and the restore parameters for each of them.

        :param application_restore_objects: The application_restore_objects of this ApplicationsRestoreTaskRequest.
        :type: list[ApplicationRestoreObject]
        """

        self._application_restore_objects = application_restore_objects

    @property
    def hosting_protection_source(self):
        """
        Gets the hosting_protection_source of this ApplicationsRestoreTaskRequest.
        Specifies the restore information for the Protection Source object that registered and hosts the Application Servers. This provides the snapshot details from which the applications should be restored.

        :return: The hosting_protection_source of this ApplicationsRestoreTaskRequest.
        :rtype: RestoreObject
        """
        return self._hosting_protection_source

    @hosting_protection_source.setter
    def hosting_protection_source(self, hosting_protection_source):
        """
        Sets the hosting_protection_source of this ApplicationsRestoreTaskRequest.
        Specifies the restore information for the Protection Source object that registered and hosts the Application Servers. This provides the snapshot details from which the applications should be restored.

        :param hosting_protection_source: The hosting_protection_source of this ApplicationsRestoreTaskRequest.
        :type: RestoreObject
        """

        self._hosting_protection_source = hosting_protection_source

    @property
    def name(self):
        """
        Gets the name of this ApplicationsRestoreTaskRequest.
        Specifies a name for the new task to be created. This field has to be set, and it needs to be unique across all restore tasks.

        :return: The name of this ApplicationsRestoreTaskRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ApplicationsRestoreTaskRequest.
        Specifies a name for the new task to be created. This field has to be set, and it needs to be unique across all restore tasks.

        :param name: The name of this ApplicationsRestoreTaskRequest.
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """
        Gets the password of this ApplicationsRestoreTaskRequest.
        Specifies password of the username to access the target source.

        :return: The password of this ApplicationsRestoreTaskRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """
        Sets the password of this ApplicationsRestoreTaskRequest.
        Specifies password of the username to access the target source.

        :param password: The password of this ApplicationsRestoreTaskRequest.
        :type: str
        """

        self._password = password

    @property
    def username(self):
        """
        Gets the username of this ApplicationsRestoreTaskRequest.
        Specifies username to access the target source.

        :return: The username of this ApplicationsRestoreTaskRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this ApplicationsRestoreTaskRequest.
        Specifies username to access the target source.

        :param username: The username of this ApplicationsRestoreTaskRequest.
        :type: str
        """

        self._username = username

    @property
    def vlan_parameters(self):
        """
        Gets the vlan_parameters of this ApplicationsRestoreTaskRequest.
        Specifies VLAN parameters for the restore operation.

        :return: The vlan_parameters of this ApplicationsRestoreTaskRequest.
        :rtype: VlanParameters
        """
        return self._vlan_parameters

    @vlan_parameters.setter
    def vlan_parameters(self, vlan_parameters):
        """
        Sets the vlan_parameters of this ApplicationsRestoreTaskRequest.
        Specifies VLAN parameters for the restore operation.

        :param vlan_parameters: The vlan_parameters of this ApplicationsRestoreTaskRequest.
        :type: VlanParameters
        """

        self._vlan_parameters = vlan_parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
