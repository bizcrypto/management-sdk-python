# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EnvironmentTypeJobParameters(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, hyperv_parameters=None, nas_parameters=None, physical_parameters=None, pure_parameters=None, sql_parameters=None, vmware_parameters=None):
        """
        EnvironmentTypeJobParameters - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'hyperv_parameters': 'HypervEnvJobParameters',
            'nas_parameters': 'NasEnvJobParameters',
            'physical_parameters': 'PhysicalEnvJobParameters',
            'pure_parameters': 'PureEnvJobParameters',
            'sql_parameters': 'SqlEnvJobParameters',
            'vmware_parameters': 'VmwareEnvJobParameters'
        }

        self.attribute_map = {
            'hyperv_parameters': 'hypervParameters',
            'nas_parameters': 'nasParameters',
            'physical_parameters': 'physicalParameters',
            'pure_parameters': 'pureParameters',
            'sql_parameters': 'sqlParameters',
            'vmware_parameters': 'vmwareParameters'
        }

        self._hyperv_parameters = hyperv_parameters
        self._nas_parameters = nas_parameters
        self._physical_parameters = physical_parameters
        self._pure_parameters = pure_parameters
        self._sql_parameters = sql_parameters
        self._vmware_parameters = vmware_parameters

    @property
    def hyperv_parameters(self):
        """
        Gets the hyperv_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Types of 'kHyperV' type.

        :return: The hyperv_parameters of this EnvironmentTypeJobParameters.
        :rtype: HypervEnvJobParameters
        """
        return self._hyperv_parameters

    @hyperv_parameters.setter
    def hyperv_parameters(self, hyperv_parameters):
        """
        Sets the hyperv_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Types of 'kHyperV' type.

        :param hyperv_parameters: The hyperv_parameters of this EnvironmentTypeJobParameters.
        :type: HypervEnvJobParameters
        """

        self._hyperv_parameters = hyperv_parameters

    @property
    def nas_parameters(self):
        """
        Gets the nas_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Types of 'kGenericNas' type.

        :return: The nas_parameters of this EnvironmentTypeJobParameters.
        :rtype: NasEnvJobParameters
        """
        return self._nas_parameters

    @nas_parameters.setter
    def nas_parameters(self, nas_parameters):
        """
        Sets the nas_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Types of 'kGenericNas' type.

        :param nas_parameters: The nas_parameters of this EnvironmentTypeJobParameters.
        :type: NasEnvJobParameters
        """

        self._nas_parameters = nas_parameters

    @property
    def physical_parameters(self):
        """
        Gets the physical_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Sources of 'kPhysical' type in a kPhysical environment.

        :return: The physical_parameters of this EnvironmentTypeJobParameters.
        :rtype: PhysicalEnvJobParameters
        """
        return self._physical_parameters

    @physical_parameters.setter
    def physical_parameters(self, physical_parameters):
        """
        Sets the physical_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Sources of 'kPhysical' type in a kPhysical environment.

        :param physical_parameters: The physical_parameters of this EnvironmentTypeJobParameters.
        :type: PhysicalEnvJobParameters
        """

        self._physical_parameters = physical_parameters

    @property
    def pure_parameters(self):
        """
        Gets the pure_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Types of 'kPure' type.

        :return: The pure_parameters of this EnvironmentTypeJobParameters.
        :rtype: PureEnvJobParameters
        """
        return self._pure_parameters

    @pure_parameters.setter
    def pure_parameters(self, pure_parameters):
        """
        Sets the pure_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Types of 'kPure' type.

        :param pure_parameters: The pure_parameters of this EnvironmentTypeJobParameters.
        :type: PureEnvJobParameters
        """

        self._pure_parameters = pure_parameters

    @property
    def sql_parameters(self):
        """
        Gets the sql_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Types of 'kSQL' type.

        :return: The sql_parameters of this EnvironmentTypeJobParameters.
        :rtype: SqlEnvJobParameters
        """
        return self._sql_parameters

    @sql_parameters.setter
    def sql_parameters(self, sql_parameters):
        """
        Sets the sql_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Types of 'kSQL' type.

        :param sql_parameters: The sql_parameters of this EnvironmentTypeJobParameters.
        :type: SqlEnvJobParameters
        """

        self._sql_parameters = sql_parameters

    @property
    def vmware_parameters(self):
        """
        Gets the vmware_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Types of 'kVMware' type.

        :return: The vmware_parameters of this EnvironmentTypeJobParameters.
        :rtype: VmwareEnvJobParameters
        """
        return self._vmware_parameters

    @vmware_parameters.setter
    def vmware_parameters(self, vmware_parameters):
        """
        Sets the vmware_parameters of this EnvironmentTypeJobParameters.
        Specifies additional special parameters that are applicable only to Types of 'kVMware' type.

        :param vmware_parameters: The vmware_parameters of this EnvironmentTypeJobParameters.
        :type: VmwareEnvJobParameters
        """

        self._vmware_parameters = vmware_parameters

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
