# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RegisterProtectionSourceParametersThrottlingPolicy(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, enforce_max_streams=None, is_enabled=None, latency_thresholds=None, max_concurrent_streams=None):
        """
        RegisterProtectionSourceParametersThrottlingPolicy - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'enforce_max_streams': 'bool',
            'is_enabled': 'bool',
            'latency_thresholds': 'LatencyThresholds',
            'max_concurrent_streams': 'int'
        }

        self.attribute_map = {
            'enforce_max_streams': 'enforceMaxStreams',
            'is_enabled': 'isEnabled',
            'latency_thresholds': 'latencyThresholds',
            'max_concurrent_streams': 'maxConcurrentStreams'
        }

        self._enforce_max_streams = enforce_max_streams
        self._is_enabled = is_enabled
        self._latency_thresholds = latency_thresholds
        self._max_concurrent_streams = max_concurrent_streams

    @property
    def enforce_max_streams(self):
        """
        Gets the enforce_max_streams of this RegisterProtectionSourceParametersThrottlingPolicy.
        Specifies whether datastore streams are configured for all datastores that are part of the registered entity. If set to true, number of streams from Cohesity cluster to the registered entity will be limited to the value set for maxConcurrentStreams. If not set or set to false, there is no max limit for the number of concurrent streams.

        :return: The enforce_max_streams of this RegisterProtectionSourceParametersThrottlingPolicy.
        :rtype: bool
        """
        return self._enforce_max_streams

    @enforce_max_streams.setter
    def enforce_max_streams(self, enforce_max_streams):
        """
        Sets the enforce_max_streams of this RegisterProtectionSourceParametersThrottlingPolicy.
        Specifies whether datastore streams are configured for all datastores that are part of the registered entity. If set to true, number of streams from Cohesity cluster to the registered entity will be limited to the value set for maxConcurrentStreams. If not set or set to false, there is no max limit for the number of concurrent streams.

        :param enforce_max_streams: The enforce_max_streams of this RegisterProtectionSourceParametersThrottlingPolicy.
        :type: bool
        """

        self._enforce_max_streams = enforce_max_streams

    @property
    def is_enabled(self):
        """
        Gets the is_enabled of this RegisterProtectionSourceParametersThrottlingPolicy.
        Indicates whether read operations to the datastores, which are part of the registered Protection Source, are throttled.

        :return: The is_enabled of this RegisterProtectionSourceParametersThrottlingPolicy.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """
        Sets the is_enabled of this RegisterProtectionSourceParametersThrottlingPolicy.
        Indicates whether read operations to the datastores, which are part of the registered Protection Source, are throttled.

        :param is_enabled: The is_enabled of this RegisterProtectionSourceParametersThrottlingPolicy.
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def latency_thresholds(self):
        """
        Gets the latency_thresholds of this RegisterProtectionSourceParametersThrottlingPolicy.
        Specifies the thresholds that should be applied to all datastores that are part of the registered Object.

        :return: The latency_thresholds of this RegisterProtectionSourceParametersThrottlingPolicy.
        :rtype: LatencyThresholds
        """
        return self._latency_thresholds

    @latency_thresholds.setter
    def latency_thresholds(self, latency_thresholds):
        """
        Sets the latency_thresholds of this RegisterProtectionSourceParametersThrottlingPolicy.
        Specifies the thresholds that should be applied to all datastores that are part of the registered Object.

        :param latency_thresholds: The latency_thresholds of this RegisterProtectionSourceParametersThrottlingPolicy.
        :type: LatencyThresholds
        """

        self._latency_thresholds = latency_thresholds

    @property
    def max_concurrent_streams(self):
        """
        Gets the max_concurrent_streams of this RegisterProtectionSourceParametersThrottlingPolicy.
        Specifies the limit on the number of streams Cohesity cluster will make concurrently to the datastores of the registered entity. This limit is enforced only when the flag enforceMaxStreams is set to true.

        :return: The max_concurrent_streams of this RegisterProtectionSourceParametersThrottlingPolicy.
        :rtype: int
        """
        return self._max_concurrent_streams

    @max_concurrent_streams.setter
    def max_concurrent_streams(self, max_concurrent_streams):
        """
        Sets the max_concurrent_streams of this RegisterProtectionSourceParametersThrottlingPolicy.
        Specifies the limit on the number of streams Cohesity cluster will make concurrently to the datastores of the registered entity. This limit is enforced only when the flag enforceMaxStreams is set to true.

        :param max_concurrent_streams: The max_concurrent_streams of this RegisterProtectionSourceParametersThrottlingPolicy.
        :type: int
        """

        self._max_concurrent_streams = max_concurrent_streams

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
