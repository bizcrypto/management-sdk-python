# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ExtractFileRangeResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, data=None, eof=None, error=None, file_length=None, start_offset=None):
        """
        ExtractFileRangeResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data': 'list[int]',
            'eof': 'bool',
            'error': 'ErrorProto',
            'file_length': 'int',
            'start_offset': 'int'
        }

        self.attribute_map = {
            'data': 'data',
            'eof': 'eof',
            'error': 'error',
            'file_length': 'fileLength',
            'start_offset': 'startOffset'
        }

        self._data = data
        self._eof = eof
        self._error = error
        self._file_length = file_length
        self._start_offset = start_offset

    @property
    def data(self):
        """
        Gets the data of this ExtractFileRangeResult.


        :return: The data of this ExtractFileRangeResult.
        :rtype: list[int]
        """
        return self._data

    @data.setter
    def data(self, data):
        """
        Sets the data of this ExtractFileRangeResult.


        :param data: The data of this ExtractFileRangeResult.
        :type: list[int]
        """

        self._data = data

    @property
    def eof(self):
        """
        Gets the eof of this ExtractFileRangeResult.
        Will be true if start_offset > file length or EOF is reached. This is an alternative to using file_length to determine when entire file is read. Used when fetching from a view.

        :return: The eof of this ExtractFileRangeResult.
        :rtype: bool
        """
        return self._eof

    @eof.setter
    def eof(self, eof):
        """
        Sets the eof of this ExtractFileRangeResult.
        Will be true if start_offset > file length or EOF is reached. This is an alternative to using file_length to determine when entire file is read. Used when fetching from a view.

        :param eof: The eof of this ExtractFileRangeResult.
        :type: bool
        """

        self._eof = eof

    @property
    def error(self):
        """
        Gets the error of this ExtractFileRangeResult.
        Success/error status of the operation.

        :return: The error of this ExtractFileRangeResult.
        :rtype: ErrorProto
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this ExtractFileRangeResult.
        Success/error status of the operation.

        :param error: The error of this ExtractFileRangeResult.
        :type: ErrorProto
        """

        self._error = error

    @property
    def file_length(self):
        """
        Gets the file_length of this ExtractFileRangeResult.
        The total length of the file. This field would be set provided no error had occurred (indicated by error field above).

        :return: The file_length of this ExtractFileRangeResult.
        :rtype: int
        """
        return self._file_length

    @file_length.setter
    def file_length(self, file_length):
        """
        Sets the file_length of this ExtractFileRangeResult.
        The total length of the file. This field would be set provided no error had occurred (indicated by error field above).

        :param file_length: The file_length of this ExtractFileRangeResult.
        :type: int
        """

        self._file_length = file_length

    @property
    def start_offset(self):
        """
        Gets the start_offset of this ExtractFileRangeResult.
        The offset from which data was read.

        :return: The start_offset of this ExtractFileRangeResult.
        :rtype: int
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """
        Sets the start_offset of this ExtractFileRangeResult.
        The offset from which data was read.

        :param start_offset: The start_offset of this ExtractFileRangeResult.
        :type: int
        """

        self._start_offset = start_offset

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
