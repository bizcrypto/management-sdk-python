# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RecoveriesTile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, last_month_num_recoveries=None, last_month_recoveries_by_type=None, last_month_recovery_size_bytes=None, recovery_num_running=None):
        """
        RecoveriesTile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_month_num_recoveries': 'int',
            'last_month_recoveries_by_type': 'list[RestoreCountByObjectType]',
            'last_month_recovery_size_bytes': 'int',
            'recovery_num_running': 'int'
        }

        self.attribute_map = {
            'last_month_num_recoveries': 'lastMonthNumRecoveries',
            'last_month_recoveries_by_type': 'lastMonthRecoveriesByType',
            'last_month_recovery_size_bytes': 'lastMonthRecoverySizeBytes',
            'recovery_num_running': 'recoveryNumRunning'
        }

        self._last_month_num_recoveries = last_month_num_recoveries
        self._last_month_recoveries_by_type = last_month_recoveries_by_type
        self._last_month_recovery_size_bytes = last_month_recovery_size_bytes
        self._recovery_num_running = recovery_num_running

    @property
    def last_month_num_recoveries(self):
        """
        Gets the last_month_num_recoveries of this RecoveriesTile.
        Number of Recoveries in the last 30 days.

        :return: The last_month_num_recoveries of this RecoveriesTile.
        :rtype: int
        """
        return self._last_month_num_recoveries

    @last_month_num_recoveries.setter
    def last_month_num_recoveries(self, last_month_num_recoveries):
        """
        Sets the last_month_num_recoveries of this RecoveriesTile.
        Number of Recoveries in the last 30 days.

        :param last_month_num_recoveries: The last_month_num_recoveries of this RecoveriesTile.
        :type: int
        """

        self._last_month_num_recoveries = last_month_num_recoveries

    @property
    def last_month_recoveries_by_type(self):
        """
        Gets the last_month_recoveries_by_type of this RecoveriesTile.


        :return: The last_month_recoveries_by_type of this RecoveriesTile.
        :rtype: list[RestoreCountByObjectType]
        """
        return self._last_month_recoveries_by_type

    @last_month_recoveries_by_type.setter
    def last_month_recoveries_by_type(self, last_month_recoveries_by_type):
        """
        Sets the last_month_recoveries_by_type of this RecoveriesTile.


        :param last_month_recoveries_by_type: The last_month_recoveries_by_type of this RecoveriesTile.
        :type: list[RestoreCountByObjectType]
        """

        self._last_month_recoveries_by_type = last_month_recoveries_by_type

    @property
    def last_month_recovery_size_bytes(self):
        """
        Gets the last_month_recovery_size_bytes of this RecoveriesTile.
        Bytes recovered in the last 30 days.

        :return: The last_month_recovery_size_bytes of this RecoveriesTile.
        :rtype: int
        """
        return self._last_month_recovery_size_bytes

    @last_month_recovery_size_bytes.setter
    def last_month_recovery_size_bytes(self, last_month_recovery_size_bytes):
        """
        Sets the last_month_recovery_size_bytes of this RecoveriesTile.
        Bytes recovered in the last 30 days.

        :param last_month_recovery_size_bytes: The last_month_recovery_size_bytes of this RecoveriesTile.
        :type: int
        """

        self._last_month_recovery_size_bytes = last_month_recovery_size_bytes

    @property
    def recovery_num_running(self):
        """
        Gets the recovery_num_running of this RecoveriesTile.
        Number of recoveries that are currently running.

        :return: The recovery_num_running of this RecoveriesTile.
        :rtype: int
        """
        return self._recovery_num_running

    @recovery_num_running.setter
    def recovery_num_running(self, recovery_num_running):
        """
        Sets the recovery_num_running of this RecoveriesTile.
        Number of recoveries that are currently running.

        :param recovery_num_running: The recovery_num_running of this RecoveriesTile.
        :type: int
        """

        self._recovery_num_running = recovery_num_running

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
