# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class MapReduceInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, excluded_data_source_vec=None, id=None, is_system_defined=None, mapper_id=None, name=None, reducer_id=None, required_property_vec=None):
        """
        MapReduceInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'excluded_data_source_vec': 'list[int]',
            'id': 'int',
            'is_system_defined': 'bool',
            'mapper_id': 'int',
            'name': 'str',
            'reducer_id': 'int',
            'required_property_vec': 'list[MapReduceInfoRequiredProperty]'
        }

        self.attribute_map = {
            'description': 'description',
            'excluded_data_source_vec': 'excludedDataSourceVec',
            'id': 'id',
            'is_system_defined': 'isSystemDefined',
            'mapper_id': 'mapperId',
            'name': 'name',
            'reducer_id': 'reducerId',
            'required_property_vec': 'requiredPropertyVec'
        }

        self._description = description
        self._excluded_data_source_vec = excluded_data_source_vec
        self._id = id
        self._is_system_defined = is_system_defined
        self._mapper_id = mapper_id
        self._name = name
        self._reducer_id = reducer_id
        self._required_property_vec = required_property_vec

    @property
    def description(self):
        """
        Gets the description of this MapReduceInfo.
        Map reduce job description.

        :return: The description of this MapReduceInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MapReduceInfo.
        Map reduce job description.

        :param description: The description of this MapReduceInfo.
        :type: str
        """

        self._description = description

    @property
    def excluded_data_source_vec(self):
        """
        Gets the excluded_data_source_vec of this MapReduceInfo.


        :return: The excluded_data_source_vec of this MapReduceInfo.
        :rtype: list[int]
        """
        return self._excluded_data_source_vec

    @excluded_data_source_vec.setter
    def excluded_data_source_vec(self, excluded_data_source_vec):
        """
        Sets the excluded_data_source_vec of this MapReduceInfo.


        :param excluded_data_source_vec: The excluded_data_source_vec of this MapReduceInfo.
        :type: list[int]
        """

        self._excluded_data_source_vec = excluded_data_source_vec

    @property
    def id(self):
        """
        Gets the id of this MapReduceInfo.
        ID of map reduce job.

        :return: The id of this MapReduceInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this MapReduceInfo.
        ID of map reduce job.

        :param id: The id of this MapReduceInfo.
        :type: int
        """

        self._id = id

    @property
    def is_system_defined(self):
        """
        Gets the is_system_defined of this MapReduceInfo.
        Flag to denote if this is system pre-defined app or user has written this app.

        :return: The is_system_defined of this MapReduceInfo.
        :rtype: bool
        """
        return self._is_system_defined

    @is_system_defined.setter
    def is_system_defined(self, is_system_defined):
        """
        Sets the is_system_defined of this MapReduceInfo.
        Flag to denote if this is system pre-defined app or user has written this app.

        :param is_system_defined: The is_system_defined of this MapReduceInfo.
        :type: bool
        """

        self._is_system_defined = is_system_defined

    @property
    def mapper_id(self):
        """
        Gets the mapper_id of this MapReduceInfo.
        ID of the mapper to process the input.

        :return: The mapper_id of this MapReduceInfo.
        :rtype: int
        """
        return self._mapper_id

    @mapper_id.setter
    def mapper_id(self, mapper_id):
        """
        Sets the mapper_id of this MapReduceInfo.
        ID of the mapper to process the input.

        :param mapper_id: The mapper_id of this MapReduceInfo.
        :type: int
        """

        self._mapper_id = mapper_id

    @property
    def name(self):
        """
        Gets the name of this MapReduceInfo.
        Map reduce job name.

        :return: The name of this MapReduceInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MapReduceInfo.
        Map reduce job name.

        :param name: The name of this MapReduceInfo.
        :type: str
        """

        self._name = name

    @property
    def reducer_id(self):
        """
        Gets the reducer_id of this MapReduceInfo.
        ID of the reducer.

        :return: The reducer_id of this MapReduceInfo.
        :rtype: int
        """
        return self._reducer_id

    @reducer_id.setter
    def reducer_id(self, reducer_id):
        """
        Sets the reducer_id of this MapReduceInfo.
        ID of the reducer.

        :param reducer_id: The reducer_id of this MapReduceInfo.
        :type: int
        """

        self._reducer_id = reducer_id

    @property
    def required_property_vec(self):
        """
        Gets the required_property_vec of this MapReduceInfo.


        :return: The required_property_vec of this MapReduceInfo.
        :rtype: list[MapReduceInfoRequiredProperty]
        """
        return self._required_property_vec

    @required_property_vec.setter
    def required_property_vec(self, required_property_vec):
        """
        Sets the required_property_vec of this MapReduceInfo.


        :param required_property_vec: The required_property_vec of this MapReduceInfo.
        :type: list[MapReduceInfoRequiredProperty]
        """

        self._required_property_vec = required_property_vec

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
