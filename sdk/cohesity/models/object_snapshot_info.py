# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ObjectSnapshotInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_partition_id=None, job_id=None, job_name=None, job_uid=None, object_name=None, os_type=None, registered_source=None, snapshotted_source=None, versions=None, view_box_id=None, view_name=None):
        """
        ObjectSnapshotInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cluster_partition_id': 'int',
            'job_id': 'int',
            'job_name': 'str',
            'job_uid': 'ObjectSnapshotInfoJobUid',
            'object_name': 'str',
            'os_type': 'str',
            'registered_source': 'ProtectionSource',
            'snapshotted_source': 'ProtectionSource',
            'versions': 'list[SnapshotVersion]',
            'view_box_id': 'int',
            'view_name': 'str'
        }

        self.attribute_map = {
            'cluster_partition_id': 'clusterPartitionId',
            'job_id': 'jobId',
            'job_name': 'jobName',
            'job_uid': 'jobUid',
            'object_name': 'objectName',
            'os_type': 'osType',
            'registered_source': 'registeredSource',
            'snapshotted_source': 'snapshottedSource',
            'versions': 'versions',
            'view_box_id': 'viewBoxId',
            'view_name': 'viewName'
        }

        self._cluster_partition_id = cluster_partition_id
        self._job_id = job_id
        self._job_name = job_name
        self._job_uid = job_uid
        self._object_name = object_name
        self._os_type = os_type
        self._registered_source = registered_source
        self._snapshotted_source = snapshotted_source
        self._versions = versions
        self._view_box_id = view_box_id
        self._view_name = view_name

    @property
    def cluster_partition_id(self):
        """
        Gets the cluster_partition_id of this ObjectSnapshotInfo.
        Specifies the Cohesity Cluster partition id where this object is stored.

        :return: The cluster_partition_id of this ObjectSnapshotInfo.
        :rtype: int
        """
        return self._cluster_partition_id

    @cluster_partition_id.setter
    def cluster_partition_id(self, cluster_partition_id):
        """
        Sets the cluster_partition_id of this ObjectSnapshotInfo.
        Specifies the Cohesity Cluster partition id where this object is stored.

        :param cluster_partition_id: The cluster_partition_id of this ObjectSnapshotInfo.
        :type: int
        """

        self._cluster_partition_id = cluster_partition_id

    @property
    def job_id(self):
        """
        Gets the job_id of this ObjectSnapshotInfo.
        Specifies the id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job.

        :return: The job_id of this ObjectSnapshotInfo.
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """
        Sets the job_id of this ObjectSnapshotInfo.
        Specifies the id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job.

        :param job_id: The job_id of this ObjectSnapshotInfo.
        :type: int
        """

        self._job_id = job_id

    @property
    def job_name(self):
        """
        Gets the job_name of this ObjectSnapshotInfo.
        Specifies the name of the Protection Job that captured the backup.

        :return: The job_name of this ObjectSnapshotInfo.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """
        Sets the job_name of this ObjectSnapshotInfo.
        Specifies the name of the Protection Job that captured the backup.

        :param job_name: The job_name of this ObjectSnapshotInfo.
        :type: str
        """

        self._job_name = job_name

    @property
    def job_uid(self):
        """
        Gets the job_uid of this ObjectSnapshotInfo.


        :return: The job_uid of this ObjectSnapshotInfo.
        :rtype: ObjectSnapshotInfoJobUid
        """
        return self._job_uid

    @job_uid.setter
    def job_uid(self, job_uid):
        """
        Sets the job_uid of this ObjectSnapshotInfo.


        :param job_uid: The job_uid of this ObjectSnapshotInfo.
        :type: ObjectSnapshotInfoJobUid
        """

        self._job_uid = job_uid

    @property
    def object_name(self):
        """
        Gets the object_name of this ObjectSnapshotInfo.
        Specifies the primary name of the object.

        :return: The object_name of this ObjectSnapshotInfo.
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """
        Sets the object_name of this ObjectSnapshotInfo.
        Specifies the primary name of the object.

        :param object_name: The object_name of this ObjectSnapshotInfo.
        :type: str
        """

        self._object_name = object_name

    @property
    def os_type(self):
        """
        Gets the os_type of this ObjectSnapshotInfo.
        Specifies the inferred OS type.

        :return: The os_type of this ObjectSnapshotInfo.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """
        Sets the os_type of this ObjectSnapshotInfo.
        Specifies the inferred OS type.

        :param os_type: The os_type of this ObjectSnapshotInfo.
        :type: str
        """

        self._os_type = os_type

    @property
    def registered_source(self):
        """
        Gets the registered_source of this ObjectSnapshotInfo.
        Specifies the id of the original root Protection Source tree (such as a vCenter Server) that was accessed by the Protection Job to capture a backup of this object.

        :return: The registered_source of this ObjectSnapshotInfo.
        :rtype: ProtectionSource
        """
        return self._registered_source

    @registered_source.setter
    def registered_source(self, registered_source):
        """
        Sets the registered_source of this ObjectSnapshotInfo.
        Specifies the id of the original root Protection Source tree (such as a vCenter Server) that was accessed by the Protection Job to capture a backup of this object.

        :param registered_source: The registered_source of this ObjectSnapshotInfo.
        :type: ProtectionSource
        """

        self._registered_source = registered_source

    @property
    def snapshotted_source(self):
        """
        Gets the snapshotted_source of this ObjectSnapshotInfo.
        Specifies the Protection Source that represents the original object being backed up. When a root Protection Source is registered, it creates a tree of source Protection Source objects. This field defines the specific Protection Source leaf object (such as a VM) that was backed up.

        :return: The snapshotted_source of this ObjectSnapshotInfo.
        :rtype: ProtectionSource
        """
        return self._snapshotted_source

    @snapshotted_source.setter
    def snapshotted_source(self, snapshotted_source):
        """
        Sets the snapshotted_source of this ObjectSnapshotInfo.
        Specifies the Protection Source that represents the original object being backed up. When a root Protection Source is registered, it creates a tree of source Protection Source objects. This field defines the specific Protection Source leaf object (such as a VM) that was backed up.

        :param snapshotted_source: The snapshotted_source of this ObjectSnapshotInfo.
        :type: ProtectionSource
        """

        self._snapshotted_source = snapshotted_source

    @property
    def versions(self):
        """
        Gets the versions of this ObjectSnapshotInfo.
        Specifies all snapshot versions of this object. Each time a Job Run of a Job executes, it may create a new snapshot version of an object. This array stores the different snapshots versions of the object.

        :return: The versions of this ObjectSnapshotInfo.
        :rtype: list[SnapshotVersion]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """
        Sets the versions of this ObjectSnapshotInfo.
        Specifies all snapshot versions of this object. Each time a Job Run of a Job executes, it may create a new snapshot version of an object. This array stores the different snapshots versions of the object.

        :param versions: The versions of this ObjectSnapshotInfo.
        :type: list[SnapshotVersion]
        """

        self._versions = versions

    @property
    def view_box_id(self):
        """
        Gets the view_box_id of this ObjectSnapshotInfo.
        Specifies the id of the Domain (View Box) where this object is stored.

        :return: The view_box_id of this ObjectSnapshotInfo.
        :rtype: int
        """
        return self._view_box_id

    @view_box_id.setter
    def view_box_id(self, view_box_id):
        """
        Sets the view_box_id of this ObjectSnapshotInfo.
        Specifies the id of the Domain (View Box) where this object is stored.

        :param view_box_id: The view_box_id of this ObjectSnapshotInfo.
        :type: int
        """

        self._view_box_id = view_box_id

    @property
    def view_name(self):
        """
        Gets the view_name of this ObjectSnapshotInfo.
        Specifies the View name where this object is stored.

        :return: The view_name of this ObjectSnapshotInfo.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """
        Sets the view_name of this ObjectSnapshotInfo.
        Specifies the View name where this object is stored.

        :param view_name: The view_name of this ObjectSnapshotInfo.
        :type: str
        """

        self._view_name = view_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
