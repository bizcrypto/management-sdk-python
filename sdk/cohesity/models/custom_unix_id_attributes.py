# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CustomUnixIdAttributes(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, gid_attr_name=None, uid_attr_name=None):
        """
        CustomUnixIdAttributes - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'gid_attr_name': 'str',
            'uid_attr_name': 'str'
        }

        self.attribute_map = {
            'gid_attr_name': 'gidAttrName',
            'uid_attr_name': 'uidAttrName'
        }

        self._gid_attr_name = gid_attr_name
        self._uid_attr_name = uid_attr_name

    @property
    def gid_attr_name(self):
        """
        Gets the gid_attr_name of this CustomUnixIdAttributes.
        Specifies the custom field name in Active Directory user properties to get the GID.

        :return: The gid_attr_name of this CustomUnixIdAttributes.
        :rtype: str
        """
        return self._gid_attr_name

    @gid_attr_name.setter
    def gid_attr_name(self, gid_attr_name):
        """
        Sets the gid_attr_name of this CustomUnixIdAttributes.
        Specifies the custom field name in Active Directory user properties to get the GID.

        :param gid_attr_name: The gid_attr_name of this CustomUnixIdAttributes.
        :type: str
        """

        self._gid_attr_name = gid_attr_name

    @property
    def uid_attr_name(self):
        """
        Gets the uid_attr_name of this CustomUnixIdAttributes.
        Specifies the custom field name in Active Directory user properties to get the UID.

        :return: The uid_attr_name of this CustomUnixIdAttributes.
        :rtype: str
        """
        return self._uid_attr_name

    @uid_attr_name.setter
    def uid_attr_name(self, uid_attr_name):
        """
        Sets the uid_attr_name of this CustomUnixIdAttributes.
        Specifies the custom field name in Active Directory user properties to get the UID.

        :param uid_attr_name: The uid_attr_name of this CustomUnixIdAttributes.
        :type: str
        """

        self._uid_attr_name = uid_attr_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
