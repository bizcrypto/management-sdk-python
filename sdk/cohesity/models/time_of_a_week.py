# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class TimeOfAWeek(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, days=None, end_time=None, start_time=None):
        """
        TimeOfAWeek - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'days': 'list[str]',
            'end_time': 'TimeOfAWeekEndTime',
            'start_time': 'TimeOfAWeekStartTime'
        }

        self.attribute_map = {
            'days': 'days',
            'end_time': 'endTime',
            'start_time': 'startTime'
        }

        self._days = days
        self._end_time = end_time
        self._start_time = start_time

    @property
    def days(self):
        """
        Gets the days of this TimeOfAWeek.
        Specifies a list of days of a week (such as 'kSunday') when the time period should be applied. If not set, the time range applies to all days of the week. Specifies a day in a week such as 'kSunday', 'kMonday', etc.

        :return: The days of this TimeOfAWeek.
        :rtype: list[str]
        """
        return self._days

    @days.setter
    def days(self, days):
        """
        Sets the days of this TimeOfAWeek.
        Specifies a list of days of a week (such as 'kSunday') when the time period should be applied. If not set, the time range applies to all days of the week. Specifies a day in a week such as 'kSunday', 'kMonday', etc.

        :param days: The days of this TimeOfAWeek.
        :type: list[str]
        """
        allowed_values = ["kSunday", "kMonday", "kTuesday", "kWednesday", "kThursday", "kFriday", "kSaturday"]
        if days not in allowed_values:
            raise ValueError(
                "Invalid value for `days` ({0}), must be one of {1}"
                .format(days, allowed_values)
            )

        self._days = days

    @property
    def end_time(self):
        """
        Gets the end_time of this TimeOfAWeek.


        :return: The end_time of this TimeOfAWeek.
        :rtype: TimeOfAWeekEndTime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this TimeOfAWeek.


        :param end_time: The end_time of this TimeOfAWeek.
        :type: TimeOfAWeekEndTime
        """

        self._end_time = end_time

    @property
    def start_time(self):
        """
        Gets the start_time of this TimeOfAWeek.


        :return: The start_time of this TimeOfAWeek.
        :rtype: TimeOfAWeekStartTime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this TimeOfAWeek.


        :param start_time: The start_time of this TimeOfAWeek.
        :type: TimeOfAWeekStartTime
        """

        self._start_time = start_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
