# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class HardwareInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, chassis_model=None, chassis_serial=None, chassis_type=None, hba_model=None, ipmi_lan_channel=None, max_slots=None, node_model=None, node_serial=None, primary_bond_name=None, product_model=None, secondary_bond_name=None, slot_number=None):
        """
        HardwareInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'chassis_model': 'str',
            'chassis_serial': 'str',
            'chassis_type': 'str',
            'hba_model': 'str',
            'ipmi_lan_channel': 'str',
            'max_slots': 'str',
            'node_model': 'str',
            'node_serial': 'str',
            'primary_bond_name': 'str',
            'product_model': 'str',
            'secondary_bond_name': 'list[str]',
            'slot_number': 'str'
        }

        self.attribute_map = {
            'chassis_model': 'chassisModel',
            'chassis_serial': 'chassisSerial',
            'chassis_type': 'chassisType',
            'hba_model': 'hbaModel',
            'ipmi_lan_channel': 'ipmiLanChannel',
            'max_slots': 'maxSlots',
            'node_model': 'nodeModel',
            'node_serial': 'nodeSerial',
            'primary_bond_name': 'primaryBondName',
            'product_model': 'productModel',
            'secondary_bond_name': 'secondaryBondName',
            'slot_number': 'slotNumber'
        }

        self._chassis_model = chassis_model
        self._chassis_serial = chassis_serial
        self._chassis_type = chassis_type
        self._hba_model = hba_model
        self._ipmi_lan_channel = ipmi_lan_channel
        self._max_slots = max_slots
        self._node_model = node_model
        self._node_serial = node_serial
        self._primary_bond_name = primary_bond_name
        self._product_model = product_model
        self._secondary_bond_name = secondary_bond_name
        self._slot_number = slot_number

    @property
    def chassis_model(self):
        """
        Gets the chassis_model of this HardwareInfo.


        :return: The chassis_model of this HardwareInfo.
        :rtype: str
        """
        return self._chassis_model

    @chassis_model.setter
    def chassis_model(self, chassis_model):
        """
        Sets the chassis_model of this HardwareInfo.


        :param chassis_model: The chassis_model of this HardwareInfo.
        :type: str
        """

        self._chassis_model = chassis_model

    @property
    def chassis_serial(self):
        """
        Gets the chassis_serial of this HardwareInfo.


        :return: The chassis_serial of this HardwareInfo.
        :rtype: str
        """
        return self._chassis_serial

    @chassis_serial.setter
    def chassis_serial(self, chassis_serial):
        """
        Sets the chassis_serial of this HardwareInfo.


        :param chassis_serial: The chassis_serial of this HardwareInfo.
        :type: str
        """

        self._chassis_serial = chassis_serial

    @property
    def chassis_type(self):
        """
        Gets the chassis_type of this HardwareInfo.


        :return: The chassis_type of this HardwareInfo.
        :rtype: str
        """
        return self._chassis_type

    @chassis_type.setter
    def chassis_type(self, chassis_type):
        """
        Sets the chassis_type of this HardwareInfo.


        :param chassis_type: The chassis_type of this HardwareInfo.
        :type: str
        """

        self._chassis_type = chassis_type

    @property
    def hba_model(self):
        """
        Gets the hba_model of this HardwareInfo.


        :return: The hba_model of this HardwareInfo.
        :rtype: str
        """
        return self._hba_model

    @hba_model.setter
    def hba_model(self, hba_model):
        """
        Sets the hba_model of this HardwareInfo.


        :param hba_model: The hba_model of this HardwareInfo.
        :type: str
        """

        self._hba_model = hba_model

    @property
    def ipmi_lan_channel(self):
        """
        Gets the ipmi_lan_channel of this HardwareInfo.


        :return: The ipmi_lan_channel of this HardwareInfo.
        :rtype: str
        """
        return self._ipmi_lan_channel

    @ipmi_lan_channel.setter
    def ipmi_lan_channel(self, ipmi_lan_channel):
        """
        Sets the ipmi_lan_channel of this HardwareInfo.


        :param ipmi_lan_channel: The ipmi_lan_channel of this HardwareInfo.
        :type: str
        """

        self._ipmi_lan_channel = ipmi_lan_channel

    @property
    def max_slots(self):
        """
        Gets the max_slots of this HardwareInfo.


        :return: The max_slots of this HardwareInfo.
        :rtype: str
        """
        return self._max_slots

    @max_slots.setter
    def max_slots(self, max_slots):
        """
        Sets the max_slots of this HardwareInfo.


        :param max_slots: The max_slots of this HardwareInfo.
        :type: str
        """

        self._max_slots = max_slots

    @property
    def node_model(self):
        """
        Gets the node_model of this HardwareInfo.


        :return: The node_model of this HardwareInfo.
        :rtype: str
        """
        return self._node_model

    @node_model.setter
    def node_model(self, node_model):
        """
        Sets the node_model of this HardwareInfo.


        :param node_model: The node_model of this HardwareInfo.
        :type: str
        """

        self._node_model = node_model

    @property
    def node_serial(self):
        """
        Gets the node_serial of this HardwareInfo.


        :return: The node_serial of this HardwareInfo.
        :rtype: str
        """
        return self._node_serial

    @node_serial.setter
    def node_serial(self, node_serial):
        """
        Sets the node_serial of this HardwareInfo.


        :param node_serial: The node_serial of this HardwareInfo.
        :type: str
        """

        self._node_serial = node_serial

    @property
    def primary_bond_name(self):
        """
        Gets the primary_bond_name of this HardwareInfo.


        :return: The primary_bond_name of this HardwareInfo.
        :rtype: str
        """
        return self._primary_bond_name

    @primary_bond_name.setter
    def primary_bond_name(self, primary_bond_name):
        """
        Sets the primary_bond_name of this HardwareInfo.


        :param primary_bond_name: The primary_bond_name of this HardwareInfo.
        :type: str
        """

        self._primary_bond_name = primary_bond_name

    @property
    def product_model(self):
        """
        Gets the product_model of this HardwareInfo.


        :return: The product_model of this HardwareInfo.
        :rtype: str
        """
        return self._product_model

    @product_model.setter
    def product_model(self, product_model):
        """
        Sets the product_model of this HardwareInfo.


        :param product_model: The product_model of this HardwareInfo.
        :type: str
        """

        self._product_model = product_model

    @property
    def secondary_bond_name(self):
        """
        Gets the secondary_bond_name of this HardwareInfo.


        :return: The secondary_bond_name of this HardwareInfo.
        :rtype: list[str]
        """
        return self._secondary_bond_name

    @secondary_bond_name.setter
    def secondary_bond_name(self, secondary_bond_name):
        """
        Sets the secondary_bond_name of this HardwareInfo.


        :param secondary_bond_name: The secondary_bond_name of this HardwareInfo.
        :type: list[str]
        """

        self._secondary_bond_name = secondary_bond_name

    @property
    def slot_number(self):
        """
        Gets the slot_number of this HardwareInfo.


        :return: The slot_number of this HardwareInfo.
        :rtype: str
        """
        return self._slot_number

    @slot_number.setter
    def slot_number(self, slot_number):
        """
        Sets the slot_number of this HardwareInfo.


        :param slot_number: The slot_number of this HardwareInfo.
        :type: str
        """

        self._slot_number = slot_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
