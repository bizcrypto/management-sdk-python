# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class StorageEfficiencyTile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, data_in_bytes=None, data_in_deduped_bytes=None, data_reduction=None, last_week_data_in_bytes=None, last_week_data_in_deduped_bytes=None, last_week_data_reduction=None, last_week_logical_used_bytes=None, last_week_physical_used_bytes=None, last_week_storage_efficiency=None, logical_used_bytes=None, storage_efficiency=None):
        """
        StorageEfficiencyTile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data_in_bytes': 'int',
            'data_in_deduped_bytes': 'int',
            'data_reduction': 'int',
            'last_week_data_in_bytes': 'list[int]',
            'last_week_data_in_deduped_bytes': 'list[int]',
            'last_week_data_reduction': 'list[int]',
            'last_week_logical_used_bytes': 'list[int]',
            'last_week_physical_used_bytes': 'list[int]',
            'last_week_storage_efficiency': 'list[int]',
            'logical_used_bytes': 'int',
            'storage_efficiency': 'int'
        }

        self.attribute_map = {
            'data_in_bytes': 'dataInBytes',
            'data_in_deduped_bytes': 'dataInDedupedBytes',
            'data_reduction': 'dataReduction',
            'last_week_data_in_bytes': 'lastWeekDataInBytes',
            'last_week_data_in_deduped_bytes': 'lastWeekDataInDedupedBytes',
            'last_week_data_reduction': 'lastWeekDataReduction',
            'last_week_logical_used_bytes': 'lastWeekLogicalUsedBytes',
            'last_week_physical_used_bytes': 'lastWeekPhysicalUsedBytes',
            'last_week_storage_efficiency': 'lastWeekStorageEfficiency',
            'logical_used_bytes': 'logicalUsedBytes',
            'storage_efficiency': 'storageEfficiency'
        }

        self._data_in_bytes = data_in_bytes
        self._data_in_deduped_bytes = data_in_deduped_bytes
        self._data_reduction = data_reduction
        self._last_week_data_in_bytes = last_week_data_in_bytes
        self._last_week_data_in_deduped_bytes = last_week_data_in_deduped_bytes
        self._last_week_data_reduction = last_week_data_reduction
        self._last_week_logical_used_bytes = last_week_logical_used_bytes
        self._last_week_physical_used_bytes = last_week_physical_used_bytes
        self._last_week_storage_efficiency = last_week_storage_efficiency
        self._logical_used_bytes = logical_used_bytes
        self._storage_efficiency = storage_efficiency

    @property
    def data_in_bytes(self):
        """
        Gets the data_in_bytes of this StorageEfficiencyTile.
        Data brought into the cluster. This is the usage before data reduction if we ignore the zeroes and effects of cloning.

        :return: The data_in_bytes of this StorageEfficiencyTile.
        :rtype: int
        """
        return self._data_in_bytes

    @data_in_bytes.setter
    def data_in_bytes(self, data_in_bytes):
        """
        Sets the data_in_bytes of this StorageEfficiencyTile.
        Data brought into the cluster. This is the usage before data reduction if we ignore the zeroes and effects of cloning.

        :param data_in_bytes: The data_in_bytes of this StorageEfficiencyTile.
        :type: int
        """

        self._data_in_bytes = data_in_bytes

    @property
    def data_in_deduped_bytes(self):
        """
        Gets the data_in_deduped_bytes of this StorageEfficiencyTile.
        Morphed Usage before data is replicated to other nodes as per RF or Erasure Coding policy.

        :return: The data_in_deduped_bytes of this StorageEfficiencyTile.
        :rtype: int
        """
        return self._data_in_deduped_bytes

    @data_in_deduped_bytes.setter
    def data_in_deduped_bytes(self, data_in_deduped_bytes):
        """
        Sets the data_in_deduped_bytes of this StorageEfficiencyTile.
        Morphed Usage before data is replicated to other nodes as per RF or Erasure Coding policy.

        :param data_in_deduped_bytes: The data_in_deduped_bytes of this StorageEfficiencyTile.
        :type: int
        """

        self._data_in_deduped_bytes = data_in_deduped_bytes

    @property
    def data_reduction(self):
        """
        Gets the data_reduction of this StorageEfficiencyTile.
        Data Reduction is the ratio of DataInBytes to DataInDedupBytes.

        :return: The data_reduction of this StorageEfficiencyTile.
        :rtype: int
        """
        return self._data_reduction

    @data_reduction.setter
    def data_reduction(self, data_reduction):
        """
        Sets the data_reduction of this StorageEfficiencyTile.
        Data Reduction is the ratio of DataInBytes to DataInDedupBytes.

        :param data_reduction: The data_reduction of this StorageEfficiencyTile.
        :type: int
        """

        self._data_reduction = data_reduction

    @property
    def last_week_data_in_bytes(self):
        """
        Gets the last_week_data_in_bytes of this StorageEfficiencyTile.


        :return: The last_week_data_in_bytes of this StorageEfficiencyTile.
        :rtype: list[int]
        """
        return self._last_week_data_in_bytes

    @last_week_data_in_bytes.setter
    def last_week_data_in_bytes(self, last_week_data_in_bytes):
        """
        Sets the last_week_data_in_bytes of this StorageEfficiencyTile.


        :param last_week_data_in_bytes: The last_week_data_in_bytes of this StorageEfficiencyTile.
        :type: list[int]
        """

        self._last_week_data_in_bytes = last_week_data_in_bytes

    @property
    def last_week_data_in_deduped_bytes(self):
        """
        Gets the last_week_data_in_deduped_bytes of this StorageEfficiencyTile.
        Morphed usage before data is replicated in last 7 days in descening order of time.

        :return: The last_week_data_in_deduped_bytes of this StorageEfficiencyTile.
        :rtype: list[int]
        """
        return self._last_week_data_in_deduped_bytes

    @last_week_data_in_deduped_bytes.setter
    def last_week_data_in_deduped_bytes(self, last_week_data_in_deduped_bytes):
        """
        Sets the last_week_data_in_deduped_bytes of this StorageEfficiencyTile.
        Morphed usage before data is replicated in last 7 days in descening order of time.

        :param last_week_data_in_deduped_bytes: The last_week_data_in_deduped_bytes of this StorageEfficiencyTile.
        :type: list[int]
        """

        self._last_week_data_in_deduped_bytes = last_week_data_in_deduped_bytes

    @property
    def last_week_data_reduction(self):
        """
        Gets the last_week_data_reduction of this StorageEfficiencyTile.


        :return: The last_week_data_reduction of this StorageEfficiencyTile.
        :rtype: list[int]
        """
        return self._last_week_data_reduction

    @last_week_data_reduction.setter
    def last_week_data_reduction(self, last_week_data_reduction):
        """
        Sets the last_week_data_reduction of this StorageEfficiencyTile.


        :param last_week_data_reduction: The last_week_data_reduction of this StorageEfficiencyTile.
        :type: list[int]
        """

        self._last_week_data_reduction = last_week_data_reduction

    @property
    def last_week_logical_used_bytes(self):
        """
        Gets the last_week_logical_used_bytes of this StorageEfficiencyTile.


        :return: The last_week_logical_used_bytes of this StorageEfficiencyTile.
        :rtype: list[int]
        """
        return self._last_week_logical_used_bytes

    @last_week_logical_used_bytes.setter
    def last_week_logical_used_bytes(self, last_week_logical_used_bytes):
        """
        Sets the last_week_logical_used_bytes of this StorageEfficiencyTile.


        :param last_week_logical_used_bytes: The last_week_logical_used_bytes of this StorageEfficiencyTile.
        :type: list[int]
        """

        self._last_week_logical_used_bytes = last_week_logical_used_bytes

    @property
    def last_week_physical_used_bytes(self):
        """
        Gets the last_week_physical_used_bytes of this StorageEfficiencyTile.


        :return: The last_week_physical_used_bytes of this StorageEfficiencyTile.
        :rtype: list[int]
        """
        return self._last_week_physical_used_bytes

    @last_week_physical_used_bytes.setter
    def last_week_physical_used_bytes(self, last_week_physical_used_bytes):
        """
        Sets the last_week_physical_used_bytes of this StorageEfficiencyTile.


        :param last_week_physical_used_bytes: The last_week_physical_used_bytes of this StorageEfficiencyTile.
        :type: list[int]
        """

        self._last_week_physical_used_bytes = last_week_physical_used_bytes

    @property
    def last_week_storage_efficiency(self):
        """
        Gets the last_week_storage_efficiency of this StorageEfficiencyTile.


        :return: The last_week_storage_efficiency of this StorageEfficiencyTile.
        :rtype: list[int]
        """
        return self._last_week_storage_efficiency

    @last_week_storage_efficiency.setter
    def last_week_storage_efficiency(self, last_week_storage_efficiency):
        """
        Sets the last_week_storage_efficiency of this StorageEfficiencyTile.


        :param last_week_storage_efficiency: The last_week_storage_efficiency of this StorageEfficiencyTile.
        :type: list[int]
        """

        self._last_week_storage_efficiency = last_week_storage_efficiency

    @property
    def logical_used_bytes(self):
        """
        Gets the logical_used_bytes of this StorageEfficiencyTile.
        Logical Data used on the cluster.

        :return: The logical_used_bytes of this StorageEfficiencyTile.
        :rtype: int
        """
        return self._logical_used_bytes

    @logical_used_bytes.setter
    def logical_used_bytes(self, logical_used_bytes):
        """
        Sets the logical_used_bytes of this StorageEfficiencyTile.
        Logical Data used on the cluster.

        :param logical_used_bytes: The logical_used_bytes of this StorageEfficiencyTile.
        :type: int
        """

        self._logical_used_bytes = logical_used_bytes

    @property
    def storage_efficiency(self):
        """
        Gets the storage_efficiency of this StorageEfficiencyTile.
        Storage Efficiency is the ratio of LogicalUsedBytes / RawUsedBytes.

        :return: The storage_efficiency of this StorageEfficiencyTile.
        :rtype: int
        """
        return self._storage_efficiency

    @storage_efficiency.setter
    def storage_efficiency(self, storage_efficiency):
        """
        Sets the storage_efficiency of this StorageEfficiencyTile.
        Storage Efficiency is the ratio of LogicalUsedBytes / RawUsedBytes.

        :param storage_efficiency: The storage_efficiency of this StorageEfficiencyTile.
        :type: int
        """

        self._storage_efficiency = storage_efficiency

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
