# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class FilesystemVolume(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, disks=None, display_name=None, filesystem_type=None, filesystem_uuid=None, is_supported=None, logical_volume=None, logical_volume_type=None, name=None, volume_guid=None):
        """
        FilesystemVolume - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'disks': 'list[Disk]',
            'display_name': 'str',
            'filesystem_type': 'str',
            'filesystem_uuid': 'str',
            'is_supported': 'bool',
            'logical_volume': 'FilesystemVolumeLogicalVolume',
            'logical_volume_type': 'str',
            'name': 'str',
            'volume_guid': 'str'
        }

        self.attribute_map = {
            'disks': 'disks',
            'display_name': 'displayName',
            'filesystem_type': 'filesystemType',
            'filesystem_uuid': 'filesystemUuid',
            'is_supported': 'isSupported',
            'logical_volume': 'logicalVolume',
            'logical_volume_type': 'logicalVolumeType',
            'name': 'name',
            'volume_guid': 'volumeGuid'
        }

        self._disks = disks
        self._display_name = display_name
        self._filesystem_type = filesystem_type
        self._filesystem_uuid = filesystem_uuid
        self._is_supported = is_supported
        self._logical_volume = logical_volume
        self._logical_volume_type = logical_volume_type
        self._name = name
        self._volume_guid = volume_guid

    @property
    def disks(self):
        """
        Gets the disks of this FilesystemVolume.
        Specifies information about all the disks and partitions needed to mount this logical volume.

        :return: The disks of this FilesystemVolume.
        :rtype: list[Disk]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """
        Sets the disks of this FilesystemVolume.
        Specifies information about all the disks and partitions needed to mount this logical volume.

        :param disks: The disks of this FilesystemVolume.
        :type: list[Disk]
        """

        self._disks = disks

    @property
    def display_name(self):
        """
        Gets the display_name of this FilesystemVolume.
        Specifies a description about the filesystem.

        :return: The display_name of this FilesystemVolume.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this FilesystemVolume.
        Specifies a description about the filesystem.

        :param display_name: The display_name of this FilesystemVolume.
        :type: str
        """

        self._display_name = display_name

    @property
    def filesystem_type(self):
        """
        Gets the filesystem_type of this FilesystemVolume.
        Specifies type of the filesystem on this volume.

        :return: The filesystem_type of this FilesystemVolume.
        :rtype: str
        """
        return self._filesystem_type

    @filesystem_type.setter
    def filesystem_type(self, filesystem_type):
        """
        Sets the filesystem_type of this FilesystemVolume.
        Specifies type of the filesystem on this volume.

        :param filesystem_type: The filesystem_type of this FilesystemVolume.
        :type: str
        """

        self._filesystem_type = filesystem_type

    @property
    def filesystem_uuid(self):
        """
        Gets the filesystem_uuid of this FilesystemVolume.
        Specifies the uuid of the filesystem.

        :return: The filesystem_uuid of this FilesystemVolume.
        :rtype: str
        """
        return self._filesystem_uuid

    @filesystem_uuid.setter
    def filesystem_uuid(self, filesystem_uuid):
        """
        Sets the filesystem_uuid of this FilesystemVolume.
        Specifies the uuid of the filesystem.

        :param filesystem_uuid: The filesystem_uuid of this FilesystemVolume.
        :type: str
        """

        self._filesystem_uuid = filesystem_uuid

    @property
    def is_supported(self):
        """
        Gets the is_supported of this FilesystemVolume.
        If true, this is a supported filesystem volume type.

        :return: The is_supported of this FilesystemVolume.
        :rtype: bool
        """
        return self._is_supported

    @is_supported.setter
    def is_supported(self, is_supported):
        """
        Sets the is_supported of this FilesystemVolume.
        If true, this is a supported filesystem volume type.

        :param is_supported: The is_supported of this FilesystemVolume.
        :type: bool
        """

        self._is_supported = is_supported

    @property
    def logical_volume(self):
        """
        Gets the logical_volume of this FilesystemVolume.


        :return: The logical_volume of this FilesystemVolume.
        :rtype: FilesystemVolumeLogicalVolume
        """
        return self._logical_volume

    @logical_volume.setter
    def logical_volume(self, logical_volume):
        """
        Sets the logical_volume of this FilesystemVolume.


        :param logical_volume: The logical_volume of this FilesystemVolume.
        :type: FilesystemVolumeLogicalVolume
        """

        self._logical_volume = logical_volume

    @property
    def logical_volume_type(self):
        """
        Gets the logical_volume_type of this FilesystemVolume.
        Specifies the type of logical volume such as kSimpleVolume, kLVM or kLDM. 'kSimpleVolume' indicates a simple volume. Data can be used by just mounting the only one partition present on the disk. 'kLVM' indicates a logical volume on Linux managed by a Logical Volume Manager. In order to access the data, deviceTree must be created based on the specification in logicalVolume.deviceTree. 'kLDM' indicates a logical volume on Windows managed by Logical Disk Manager.

        :return: The logical_volume_type of this FilesystemVolume.
        :rtype: str
        """
        return self._logical_volume_type

    @logical_volume_type.setter
    def logical_volume_type(self, logical_volume_type):
        """
        Sets the logical_volume_type of this FilesystemVolume.
        Specifies the type of logical volume such as kSimpleVolume, kLVM or kLDM. 'kSimpleVolume' indicates a simple volume. Data can be used by just mounting the only one partition present on the disk. 'kLVM' indicates a logical volume on Linux managed by a Logical Volume Manager. In order to access the data, deviceTree must be created based on the specification in logicalVolume.deviceTree. 'kLDM' indicates a logical volume on Windows managed by Logical Disk Manager.

        :param logical_volume_type: The logical_volume_type of this FilesystemVolume.
        :type: str
        """
        allowed_values = ["kSimpleVolume", "kLVM", "kLDM"]
        if logical_volume_type not in allowed_values:
            raise ValueError(
                "Invalid value for `logical_volume_type` ({0}), must be one of {1}"
                .format(logical_volume_type, allowed_values)
            )

        self._logical_volume_type = logical_volume_type

    @property
    def name(self):
        """
        Gets the name of this FilesystemVolume.
        Specifies the name of the volume such as /C.

        :return: The name of this FilesystemVolume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this FilesystemVolume.
        Specifies the name of the volume such as /C.

        :param name: The name of this FilesystemVolume.
        :type: str
        """

        self._name = name

    @property
    def volume_guid(self):
        """
        Gets the volume_guid of this FilesystemVolume.
        VolumeGuid is the Volume guid. This is populated for kPhysical environments.

        :return: The volume_guid of this FilesystemVolume.
        :rtype: str
        """
        return self._volume_guid

    @volume_guid.setter
    def volume_guid(self, volume_guid):
        """
        Sets the volume_guid of this FilesystemVolume.
        VolumeGuid is the Volume guid. This is populated for kPhysical environments.

        :param volume_guid: The volume_guid of this FilesystemVolume.
        :type: str
        """

        self._volume_guid = volume_guid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
