# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class NetappProtectionSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_info=None, is_top_level=None, name=None, type=None, uuid=None, volume_info=None, vserver_info=None):
        """
        NetappProtectionSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cluster_info': 'NetappClusterInfo',
            'is_top_level': 'bool',
            'name': 'str',
            'type': 'str',
            'uuid': 'str',
            'volume_info': 'NetappVolumeInfo',
            'vserver_info': 'NetappVserverInfo'
        }

        self.attribute_map = {
            'cluster_info': 'clusterInfo',
            'is_top_level': 'isTopLevel',
            'name': 'name',
            'type': 'type',
            'uuid': 'uuid',
            'volume_info': 'volumeInfo',
            'vserver_info': 'vserverInfo'
        }

        self._cluster_info = cluster_info
        self._is_top_level = is_top_level
        self._name = name
        self._type = type
        self._uuid = uuid
        self._volume_info = volume_info
        self._vserver_info = vserver_info

    @property
    def cluster_info(self):
        """
        Gets the cluster_info of this NetappProtectionSource.
        Specifies information about a NetApp cluster and is only valid for a NetApp Object of type kCluster.

        :return: The cluster_info of this NetappProtectionSource.
        :rtype: NetappClusterInfo
        """
        return self._cluster_info

    @cluster_info.setter
    def cluster_info(self, cluster_info):
        """
        Sets the cluster_info of this NetappProtectionSource.
        Specifies information about a NetApp cluster and is only valid for a NetApp Object of type kCluster.

        :param cluster_info: The cluster_info of this NetappProtectionSource.
        :type: NetappClusterInfo
        """

        self._cluster_info = cluster_info

    @property
    def is_top_level(self):
        """
        Gets the is_top_level of this NetappProtectionSource.
        Specifies if this Object is a top level Object. Because a top level Object can either be a NetApp cluster or a Vserver, this cannot be determined only by type.

        :return: The is_top_level of this NetappProtectionSource.
        :rtype: bool
        """
        return self._is_top_level

    @is_top_level.setter
    def is_top_level(self, is_top_level):
        """
        Sets the is_top_level of this NetappProtectionSource.
        Specifies if this Object is a top level Object. Because a top level Object can either be a NetApp cluster or a Vserver, this cannot be determined only by type.

        :param is_top_level: The is_top_level of this NetappProtectionSource.
        :type: bool
        """

        self._is_top_level = is_top_level

    @property
    def name(self):
        """
        Gets the name of this NetappProtectionSource.
        Specifies the name of the NetApp Object.

        :return: The name of this NetappProtectionSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NetappProtectionSource.
        Specifies the name of the NetApp Object.

        :param name: The name of this NetappProtectionSource.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this NetappProtectionSource.
        Specifies the type of managed NetApp Object in a NetApp Protection Source such as 'kCluster', 'kVserver' or 'kVolume'.

        :return: The type of this NetappProtectionSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this NetappProtectionSource.
        Specifies the type of managed NetApp Object in a NetApp Protection Source such as 'kCluster', 'kVserver' or 'kVolume'.

        :param type: The type of this NetappProtectionSource.
        :type: str
        """
        allowed_values = ["kCluster", "kVserver", "kVolume"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """
        Gets the uuid of this NetappProtectionSource.
        Specifies the globally unique ID of this Object assigned by the NetApp server.

        :return: The uuid of this NetappProtectionSource.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this NetappProtectionSource.
        Specifies the globally unique ID of this Object assigned by the NetApp server.

        :param uuid: The uuid of this NetappProtectionSource.
        :type: str
        """

        self._uuid = uuid

    @property
    def volume_info(self):
        """
        Gets the volume_info of this NetappProtectionSource.
        Specifies information about a NetApp volume and is only valid for a NetApp Object of type kVolume.

        :return: The volume_info of this NetappProtectionSource.
        :rtype: NetappVolumeInfo
        """
        return self._volume_info

    @volume_info.setter
    def volume_info(self, volume_info):
        """
        Sets the volume_info of this NetappProtectionSource.
        Specifies information about a NetApp volume and is only valid for a NetApp Object of type kVolume.

        :param volume_info: The volume_info of this NetappProtectionSource.
        :type: NetappVolumeInfo
        """

        self._volume_info = volume_info

    @property
    def vserver_info(self):
        """
        Gets the vserver_info of this NetappProtectionSource.
        Specifies information about a NetApp Vserver and is only valid for a NetApp Object of type kVserver.

        :return: The vserver_info of this NetappProtectionSource.
        :rtype: NetappVserverInfo
        """
        return self._vserver_info

    @vserver_info.setter
    def vserver_info(self, vserver_info):
        """
        Sets the vserver_info of this NetappProtectionSource.
        Specifies information about a NetApp Vserver and is only valid for a NetApp Object of type kVserver.

        :param vserver_info: The vserver_info of this NetappProtectionSource.
        :type: NetappVserverInfo
        """

        self._vserver_info = vserver_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
