# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class SqlAagHostAndDatabases(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, aag_databases=None, application_node=None, databases=None, error_message=None, unknown_host_name=None):
        """
        SqlAagHostAndDatabases - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'aag_databases': 'list[AagAndDatabases]',
            'application_node': 'ProtectionSourceNode',
            'databases': 'list[ProtectionSource]',
            'error_message': 'str',
            'unknown_host_name': 'str'
        }

        self.attribute_map = {
            'aag_databases': 'aagDatabases',
            'application_node': 'applicationNode',
            'databases': 'databases',
            'error_message': 'errorMessage',
            'unknown_host_name': 'unknownHostName'
        }

        self._aag_databases = aag_databases
        self._application_node = application_node
        self._databases = databases
        self._error_message = error_message
        self._unknown_host_name = unknown_host_name

    @property
    def aag_databases(self):
        """
        Gets the aag_databases of this SqlAagHostAndDatabases.


        :return: The aag_databases of this SqlAagHostAndDatabases.
        :rtype: list[AagAndDatabases]
        """
        return self._aag_databases

    @aag_databases.setter
    def aag_databases(self, aag_databases):
        """
        Sets the aag_databases of this SqlAagHostAndDatabases.


        :param aag_databases: The aag_databases of this SqlAagHostAndDatabases.
        :type: list[AagAndDatabases]
        """

        self._aag_databases = aag_databases

    @property
    def application_node(self):
        """
        Gets the application_node of this SqlAagHostAndDatabases.
        Specifies the subtree used to store application-level Objects. Different environments use the subtree to store application-level information. For example for SQL Server, this subtree stores the SQL Server instances running on a VM or Physical hosts.

        :return: The application_node of this SqlAagHostAndDatabases.
        :rtype: ProtectionSourceNode
        """
        return self._application_node

    @application_node.setter
    def application_node(self, application_node):
        """
        Sets the application_node of this SqlAagHostAndDatabases.
        Specifies the subtree used to store application-level Objects. Different environments use the subtree to store application-level information. For example for SQL Server, this subtree stores the SQL Server instances running on a VM or Physical hosts.

        :param application_node: The application_node of this SqlAagHostAndDatabases.
        :type: ProtectionSourceNode
        """

        self._application_node = application_node

    @property
    def databases(self):
        """
        Gets the databases of this SqlAagHostAndDatabases.
        Specifies all database entities found on the server. Database may or may not be in an AAG.

        :return: The databases of this SqlAagHostAndDatabases.
        :rtype: list[ProtectionSource]
        """
        return self._databases

    @databases.setter
    def databases(self, databases):
        """
        Sets the databases of this SqlAagHostAndDatabases.
        Specifies all database entities found on the server. Database may or may not be in an AAG.

        :param databases: The databases of this SqlAagHostAndDatabases.
        :type: list[ProtectionSource]
        """

        self._databases = databases

    @property
    def error_message(self):
        """
        Gets the error_message of this SqlAagHostAndDatabases.
        Specifies an error message when the host is not registered as an SQL host.

        :return: The error_message of this SqlAagHostAndDatabases.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """
        Sets the error_message of this SqlAagHostAndDatabases.
        Specifies an error message when the host is not registered as an SQL host.

        :param error_message: The error_message of this SqlAagHostAndDatabases.
        :type: str
        """

        self._error_message = error_message

    @property
    def unknown_host_name(self):
        """
        Gets the unknown_host_name of this SqlAagHostAndDatabases.
        Specifies the name of the host that is not registered as an SQL server on Cohesity Cluser.

        :return: The unknown_host_name of this SqlAagHostAndDatabases.
        :rtype: str
        """
        return self._unknown_host_name

    @unknown_host_name.setter
    def unknown_host_name(self, unknown_host_name):
        """
        Sets the unknown_host_name of this SqlAagHostAndDatabases.
        Specifies the name of the host that is not registered as an SQL server on Cohesity Cluser.

        :param unknown_host_name: The unknown_host_name of this SqlAagHostAndDatabases.
        :type: str
        """

        self._unknown_host_name = unknown_host_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
