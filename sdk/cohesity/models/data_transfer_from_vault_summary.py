# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class DataTransferFromVaultSummary(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, data_transfer_per_task=None, num_logical_bytes_transferred=None, num_physical_bytes_transferred=None, num_tasks=None, physical_data_transferred_bytes_during_time_range=None, vault_name=None):
        """
        DataTransferFromVaultSummary - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'data_transfer_per_task': 'list[DataTransferFromVaultPerTask]',
            'num_logical_bytes_transferred': 'int',
            'num_physical_bytes_transferred': 'int',
            'num_tasks': 'int',
            'physical_data_transferred_bytes_during_time_range': 'list[int]',
            'vault_name': 'str'
        }

        self.attribute_map = {
            'data_transfer_per_task': 'dataTransferPerTask',
            'num_logical_bytes_transferred': 'numLogicalBytesTransferred',
            'num_physical_bytes_transferred': 'numPhysicalBytesTransferred',
            'num_tasks': 'numTasks',
            'physical_data_transferred_bytes_during_time_range': 'physicalDataTransferredBytesDuringTimeRange',
            'vault_name': 'vaultName'
        }

        self._data_transfer_per_task = data_transfer_per_task
        self._num_logical_bytes_transferred = num_logical_bytes_transferred
        self._num_physical_bytes_transferred = num_physical_bytes_transferred
        self._num_tasks = num_tasks
        self._physical_data_transferred_bytes_during_time_range = physical_data_transferred_bytes_during_time_range
        self._vault_name = vault_name

    @property
    def data_transfer_per_task(self):
        """
        Gets the data_transfer_per_task of this DataTransferFromVaultSummary.
        Specifies the transfer of data from this Vault to this Cohesity Cluster for each clone or recover task.

        :return: The data_transfer_per_task of this DataTransferFromVaultSummary.
        :rtype: list[DataTransferFromVaultPerTask]
        """
        return self._data_transfer_per_task

    @data_transfer_per_task.setter
    def data_transfer_per_task(self, data_transfer_per_task):
        """
        Sets the data_transfer_per_task of this DataTransferFromVaultSummary.
        Specifies the transfer of data from this Vault to this Cohesity Cluster for each clone or recover task.

        :param data_transfer_per_task: The data_transfer_per_task of this DataTransferFromVaultSummary.
        :type: list[DataTransferFromVaultPerTask]
        """

        self._data_transfer_per_task = data_transfer_per_task

    @property
    def num_logical_bytes_transferred(self):
        """
        Gets the num_logical_bytes_transferred of this DataTransferFromVaultSummary.
        Specifies the total number of logical bytes that have been transferred from this Vault (External Target) to this Cohesity Cluster. The logical size is when the data is fully hydrated or expanded.

        :return: The num_logical_bytes_transferred of this DataTransferFromVaultSummary.
        :rtype: int
        """
        return self._num_logical_bytes_transferred

    @num_logical_bytes_transferred.setter
    def num_logical_bytes_transferred(self, num_logical_bytes_transferred):
        """
        Sets the num_logical_bytes_transferred of this DataTransferFromVaultSummary.
        Specifies the total number of logical bytes that have been transferred from this Vault (External Target) to this Cohesity Cluster. The logical size is when the data is fully hydrated or expanded.

        :param num_logical_bytes_transferred: The num_logical_bytes_transferred of this DataTransferFromVaultSummary.
        :type: int
        """

        self._num_logical_bytes_transferred = num_logical_bytes_transferred

    @property
    def num_physical_bytes_transferred(self):
        """
        Gets the num_physical_bytes_transferred of this DataTransferFromVaultSummary.
        Specifies the total number of physical bytes that have been transferred from this Vault (External Target) to the Cohesity Cluster.

        :return: The num_physical_bytes_transferred of this DataTransferFromVaultSummary.
        :rtype: int
        """
        return self._num_physical_bytes_transferred

    @num_physical_bytes_transferred.setter
    def num_physical_bytes_transferred(self, num_physical_bytes_transferred):
        """
        Sets the num_physical_bytes_transferred of this DataTransferFromVaultSummary.
        Specifies the total number of physical bytes that have been transferred from this Vault (External Target) to the Cohesity Cluster.

        :param num_physical_bytes_transferred: The num_physical_bytes_transferred of this DataTransferFromVaultSummary.
        :type: int
        """

        self._num_physical_bytes_transferred = num_physical_bytes_transferred

    @property
    def num_tasks(self):
        """
        Gets the num_tasks of this DataTransferFromVaultSummary.
        Specifies the number of recover or clone tasks that have transferred data from this Vault (External Target) to this Cohesity Cluster.

        :return: The num_tasks of this DataTransferFromVaultSummary.
        :rtype: int
        """
        return self._num_tasks

    @num_tasks.setter
    def num_tasks(self, num_tasks):
        """
        Sets the num_tasks of this DataTransferFromVaultSummary.
        Specifies the number of recover or clone tasks that have transferred data from this Vault (External Target) to this Cohesity Cluster.

        :param num_tasks: The num_tasks of this DataTransferFromVaultSummary.
        :type: int
        """

        self._num_tasks = num_tasks

    @property
    def physical_data_transferred_bytes_during_time_range(self):
        """
        Gets the physical_data_transferred_bytes_during_time_range of this DataTransferFromVaultSummary.
        Specifies the physical data transferred from this Vault to the Cohesity Cluster during the time period specified using the startTimeMsecs and endTimeMsecs parameters. For each day in the time period, an array element is returned, for example if 7 days are specified, 7 array elements are returned.

        :return: The physical_data_transferred_bytes_during_time_range of this DataTransferFromVaultSummary.
        :rtype: list[int]
        """
        return self._physical_data_transferred_bytes_during_time_range

    @physical_data_transferred_bytes_during_time_range.setter
    def physical_data_transferred_bytes_during_time_range(self, physical_data_transferred_bytes_during_time_range):
        """
        Sets the physical_data_transferred_bytes_during_time_range of this DataTransferFromVaultSummary.
        Specifies the physical data transferred from this Vault to the Cohesity Cluster during the time period specified using the startTimeMsecs and endTimeMsecs parameters. For each day in the time period, an array element is returned, for example if 7 days are specified, 7 array elements are returned.

        :param physical_data_transferred_bytes_during_time_range: The physical_data_transferred_bytes_during_time_range of this DataTransferFromVaultSummary.
        :type: list[int]
        """

        self._physical_data_transferred_bytes_during_time_range = physical_data_transferred_bytes_during_time_range

    @property
    def vault_name(self):
        """
        Gets the vault_name of this DataTransferFromVaultSummary.
        Specifies the name of the Vault (External Target).

        :return: The vault_name of this DataTransferFromVaultSummary.
        :rtype: str
        """
        return self._vault_name

    @vault_name.setter
    def vault_name(self, vault_name):
        """
        Sets the vault_name of this DataTransferFromVaultSummary.
        Specifies the name of the Vault (External Target).

        :param vault_name: The vault_name of this DataTransferFromVaultSummary.
        :type: str
        """

        self._vault_name = vault_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
