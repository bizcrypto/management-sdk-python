# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProtectionSourceNode(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, application_nodes=None, logical_size=None, nodes=None, protected_sources_summary=None, protection_source=None, registration_info=None, unprotected_sources_summary=None):
        """
        ProtectionSourceNode - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'application_nodes': 'list[object]',
            'logical_size': 'int',
            'nodes': 'list[object]',
            'protected_sources_summary': 'list[AggregatedSubtreeInfo]',
            'protection_source': 'ProtectionSourceNodeProtectionSource',
            'registration_info': 'ProtectionSourceNodeRegistrationInfo',
            'unprotected_sources_summary': 'list[AggregatedSubtreeInfo]'
        }

        self.attribute_map = {
            'application_nodes': 'applicationNodes',
            'logical_size': 'logicalSize',
            'nodes': 'nodes',
            'protected_sources_summary': 'protectedSourcesSummary',
            'protection_source': 'protectionSource',
            'registration_info': 'registrationInfo',
            'unprotected_sources_summary': 'unprotectedSourcesSummary'
        }

        self._application_nodes = application_nodes
        self._logical_size = logical_size
        self._nodes = nodes
        self._protected_sources_summary = protected_sources_summary
        self._protection_source = protection_source
        self._registration_info = registration_info
        self._unprotected_sources_summary = unprotected_sources_summary

    @property
    def application_nodes(self):
        """
        Gets the application_nodes of this ProtectionSourceNode.
        Specifies the child subtree used to store additional application-level Objects. Different environments use the subtree to store application-level information. For example for SQL Server, this subtree stores the SQL Server instances running on a VM.

        :return: The application_nodes of this ProtectionSourceNode.
        :rtype: list[object]
        """
        return self._application_nodes

    @application_nodes.setter
    def application_nodes(self, application_nodes):
        """
        Sets the application_nodes of this ProtectionSourceNode.
        Specifies the child subtree used to store additional application-level Objects. Different environments use the subtree to store application-level information. For example for SQL Server, this subtree stores the SQL Server instances running on a VM.

        :param application_nodes: The application_nodes of this ProtectionSourceNode.
        :type: list[object]
        """

        self._application_nodes = application_nodes

    @property
    def logical_size(self):
        """
        Gets the logical_size of this ProtectionSourceNode.
        Specifies the logical size of the data in bytes for the Object on this node. Presence of this field indicates this node is a leaf node.

        :return: The logical_size of this ProtectionSourceNode.
        :rtype: int
        """
        return self._logical_size

    @logical_size.setter
    def logical_size(self, logical_size):
        """
        Sets the logical_size of this ProtectionSourceNode.
        Specifies the logical size of the data in bytes for the Object on this node. Presence of this field indicates this node is a leaf node.

        :param logical_size: The logical_size of this ProtectionSourceNode.
        :type: int
        """

        self._logical_size = logical_size

    @property
    def nodes(self):
        """
        Gets the nodes of this ProtectionSourceNode.
        Specifies children of the current node in the Protection Sources hierarchy. When representing Objects in memory, the entire Object subtree hierarchy is represented. You can use this subtree to navigate down the Object hierarchy.

        :return: The nodes of this ProtectionSourceNode.
        :rtype: list[object]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """
        Sets the nodes of this ProtectionSourceNode.
        Specifies children of the current node in the Protection Sources hierarchy. When representing Objects in memory, the entire Object subtree hierarchy is represented. You can use this subtree to navigate down the Object hierarchy.

        :param nodes: The nodes of this ProtectionSourceNode.
        :type: list[object]
        """

        self._nodes = nodes

    @property
    def protected_sources_summary(self):
        """
        Gets the protected_sources_summary of this ProtectionSourceNode.
        Specifies aggregated information about all the child Objects of this node that are currently protected by a Protection Job. There is one entry for each environment that is being backed up. The aggregated information for the Object hierarchy's environment will be available at the 0th index of the vector.

        :return: The protected_sources_summary of this ProtectionSourceNode.
        :rtype: list[AggregatedSubtreeInfo]
        """
        return self._protected_sources_summary

    @protected_sources_summary.setter
    def protected_sources_summary(self, protected_sources_summary):
        """
        Sets the protected_sources_summary of this ProtectionSourceNode.
        Specifies aggregated information about all the child Objects of this node that are currently protected by a Protection Job. There is one entry for each environment that is being backed up. The aggregated information for the Object hierarchy's environment will be available at the 0th index of the vector.

        :param protected_sources_summary: The protected_sources_summary of this ProtectionSourceNode.
        :type: list[AggregatedSubtreeInfo]
        """

        self._protected_sources_summary = protected_sources_summary

    @property
    def protection_source(self):
        """
        Gets the protection_source of this ProtectionSourceNode.


        :return: The protection_source of this ProtectionSourceNode.
        :rtype: ProtectionSourceNodeProtectionSource
        """
        return self._protection_source

    @protection_source.setter
    def protection_source(self, protection_source):
        """
        Sets the protection_source of this ProtectionSourceNode.


        :param protection_source: The protection_source of this ProtectionSourceNode.
        :type: ProtectionSourceNodeProtectionSource
        """

        self._protection_source = protection_source

    @property
    def registration_info(self):
        """
        Gets the registration_info of this ProtectionSourceNode.


        :return: The registration_info of this ProtectionSourceNode.
        :rtype: ProtectionSourceNodeRegistrationInfo
        """
        return self._registration_info

    @registration_info.setter
    def registration_info(self, registration_info):
        """
        Sets the registration_info of this ProtectionSourceNode.


        :param registration_info: The registration_info of this ProtectionSourceNode.
        :type: ProtectionSourceNodeRegistrationInfo
        """

        self._registration_info = registration_info

    @property
    def unprotected_sources_summary(self):
        """
        Gets the unprotected_sources_summary of this ProtectionSourceNode.
        Specifies aggregated information about all the child Objects of this node that are not protected by any Protection Jobs. The aggregated information for the Objects hierarchy's environment will be available at the 0th index of the vector. NOTE: This list includes Objects that were protected at some point in the past but are no longer actively protected. Snapshots containing these Objects may even exist on the Cohesity Cluster and be available to recover from.

        :return: The unprotected_sources_summary of this ProtectionSourceNode.
        :rtype: list[AggregatedSubtreeInfo]
        """
        return self._unprotected_sources_summary

    @unprotected_sources_summary.setter
    def unprotected_sources_summary(self, unprotected_sources_summary):
        """
        Sets the unprotected_sources_summary of this ProtectionSourceNode.
        Specifies aggregated information about all the child Objects of this node that are not protected by any Protection Jobs. The aggregated information for the Objects hierarchy's environment will be available at the 0th index of the vector. NOTE: This list includes Objects that were protected at some point in the past but are no longer actively protected. Snapshots containing these Objects may even exist on the Cohesity Cluster and be available to recover from.

        :param unprotected_sources_summary: The unprotected_sources_summary of this ProtectionSourceNode.
        :type: list[AggregatedSubtreeInfo]
        """

        self._unprotected_sources_summary = unprotected_sources_summary

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
