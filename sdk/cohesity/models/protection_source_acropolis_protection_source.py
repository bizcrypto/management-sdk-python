# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProtectionSourceAcropolisProtectionSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, cluster_uuid=None, description=None, mount_path=None, name=None, type=None, uuid=None):
        """
        ProtectionSourceAcropolisProtectionSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cluster_uuid': 'str',
            'description': 'str',
            'mount_path': 'bool',
            'name': 'str',
            'type': 'str',
            'uuid': 'str'
        }

        self.attribute_map = {
            'cluster_uuid': 'clusterUuid',
            'description': 'description',
            'mount_path': 'mountPath',
            'name': 'name',
            'type': 'type',
            'uuid': 'uuid'
        }

        self._cluster_uuid = cluster_uuid
        self._description = description
        self._mount_path = mount_path
        self._name = name
        self._type = type
        self._uuid = uuid

    @property
    def cluster_uuid(self):
        """
        Gets the cluster_uuid of this ProtectionSourceAcropolisProtectionSource.
        Specifies the UUID of the Acropolis cluster instance to which this entity belongs to.

        :return: The cluster_uuid of this ProtectionSourceAcropolisProtectionSource.
        :rtype: str
        """
        return self._cluster_uuid

    @cluster_uuid.setter
    def cluster_uuid(self, cluster_uuid):
        """
        Sets the cluster_uuid of this ProtectionSourceAcropolisProtectionSource.
        Specifies the UUID of the Acropolis cluster instance to which this entity belongs to.

        :param cluster_uuid: The cluster_uuid of this ProtectionSourceAcropolisProtectionSource.
        :type: str
        """

        self._cluster_uuid = cluster_uuid

    @property
    def description(self):
        """
        Gets the description of this ProtectionSourceAcropolisProtectionSource.
        Specifies a description about the Protection Source.

        :return: The description of this ProtectionSourceAcropolisProtectionSource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ProtectionSourceAcropolisProtectionSource.
        Specifies a description about the Protection Source.

        :param description: The description of this ProtectionSourceAcropolisProtectionSource.
        :type: str
        """

        self._description = description

    @property
    def mount_path(self):
        """
        Gets the mount_path of this ProtectionSourceAcropolisProtectionSource.
        Specifies whether the the VM is an agent VM. This is applicable to acropolis entity of type kVirtualMachine.

        :return: The mount_path of this ProtectionSourceAcropolisProtectionSource.
        :rtype: bool
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """
        Sets the mount_path of this ProtectionSourceAcropolisProtectionSource.
        Specifies whether the the VM is an agent VM. This is applicable to acropolis entity of type kVirtualMachine.

        :param mount_path: The mount_path of this ProtectionSourceAcropolisProtectionSource.
        :type: bool
        """

        self._mount_path = mount_path

    @property
    def name(self):
        """
        Gets the name of this ProtectionSourceAcropolisProtectionSource.
        Specifies the name of the Acropolis Object.

        :return: The name of this ProtectionSourceAcropolisProtectionSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ProtectionSourceAcropolisProtectionSource.
        Specifies the name of the Acropolis Object.

        :param name: The name of this ProtectionSourceAcropolisProtectionSource.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this ProtectionSourceAcropolisProtectionSource.
        Specifies the type of an Acropolis Protection Source Object such as 'kPrismCentral', 'kHost', 'kNetwork', etc. Specifies the type of an Acropolis source entity. 'kPrismCentral' indicates a collection of multiple Nutanix clusters. 'kStandaloneCluster' indicates a single Nutanix cluster. 'kCluster' indicates a Nutanix cluster manageed by a Prism Central. 'kHost' indicates an Acropolis host. 'kVirtualMachine' indicates a Virtual Machine. 'kNetwork' indicates a Virtual Machine network object. 'kStorageContainer' represents a storage container object.

        :return: The type of this ProtectionSourceAcropolisProtectionSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ProtectionSourceAcropolisProtectionSource.
        Specifies the type of an Acropolis Protection Source Object such as 'kPrismCentral', 'kHost', 'kNetwork', etc. Specifies the type of an Acropolis source entity. 'kPrismCentral' indicates a collection of multiple Nutanix clusters. 'kStandaloneCluster' indicates a single Nutanix cluster. 'kCluster' indicates a Nutanix cluster manageed by a Prism Central. 'kHost' indicates an Acropolis host. 'kVirtualMachine' indicates a Virtual Machine. 'kNetwork' indicates a Virtual Machine network object. 'kStorageContainer' represents a storage container object.

        :param type: The type of this ProtectionSourceAcropolisProtectionSource.
        :type: str
        """
        allowed_values = ["kPrismCentral", "kStandaloneCluster", "kCluster", "kHost", "kVirtualMachine", "kNetwork", "kStorageContainer"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """
        Gets the uuid of this ProtectionSourceAcropolisProtectionSource.
        Specifies the UUID of the Acropolis Object. This is unique within the cluster instance. Together with clusterUuid, this entity is unique within the Acropolis environment.

        :return: The uuid of this ProtectionSourceAcropolisProtectionSource.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this ProtectionSourceAcropolisProtectionSource.
        Specifies the UUID of the Acropolis Object. This is unique within the cluster instance. Together with clusterUuid, this entity is unique within the Acropolis environment.

        :param uuid: The uuid of this ProtectionSourceAcropolisProtectionSource.
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
