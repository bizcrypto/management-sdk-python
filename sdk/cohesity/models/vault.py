# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Vault(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, compression_policy=None, config=None, customer_managing_encryption_keys=None, dedup_enabled=None, description=None, desired_wal_location=None, encryption_key_file_downloaded=None, encryption_policy=None, full_archive_interval_days=None, id=None, incremental_archives_enabled=None, key_file_download_time_usecs=None, key_file_download_user=None, name=None, type=None, usage_type=None):
        """
        Vault - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'compression_policy': 'str',
            'config': 'VaultConfig',
            'customer_managing_encryption_keys': 'bool',
            'dedup_enabled': 'bool',
            'description': 'str',
            'desired_wal_location': 'int',
            'encryption_key_file_downloaded': 'bool',
            'encryption_policy': 'str',
            'full_archive_interval_days': 'int',
            'id': 'int',
            'incremental_archives_enabled': 'bool',
            'key_file_download_time_usecs': 'int',
            'key_file_download_user': 'str',
            'name': 'str',
            'type': 'str',
            'usage_type': 'str'
        }

        self.attribute_map = {
            'compression_policy': 'compressionPolicy',
            'config': 'config',
            'customer_managing_encryption_keys': 'customerManagingEncryptionKeys',
            'dedup_enabled': 'dedupEnabled',
            'description': 'description',
            'desired_wal_location': 'desiredWalLocation',
            'encryption_key_file_downloaded': 'encryptionKeyFileDownloaded',
            'encryption_policy': 'encryptionPolicy',
            'full_archive_interval_days': 'fullArchiveIntervalDays',
            'id': 'id',
            'incremental_archives_enabled': 'incrementalArchivesEnabled',
            'key_file_download_time_usecs': 'keyFileDownloadTimeUsecs',
            'key_file_download_user': 'keyFileDownloadUser',
            'name': 'name',
            'type': 'type',
            'usage_type': 'usageType'
        }

        self._compression_policy = compression_policy
        self._config = config
        self._customer_managing_encryption_keys = customer_managing_encryption_keys
        self._dedup_enabled = dedup_enabled
        self._description = description
        self._desired_wal_location = desired_wal_location
        self._encryption_key_file_downloaded = encryption_key_file_downloaded
        self._encryption_policy = encryption_policy
        self._full_archive_interval_days = full_archive_interval_days
        self._id = id
        self._incremental_archives_enabled = incremental_archives_enabled
        self._key_file_download_time_usecs = key_file_download_time_usecs
        self._key_file_download_user = key_file_download_user
        self._name = name
        self._type = type
        self._usage_type = usage_type

    @property
    def compression_policy(self):
        """
        Gets the compression_policy of this Vault.
        Specifies whether to send data to the Vault in a compressed format. 'kCompressionNone' indicates that data is not compressed. 'kCompressionLow' indicates that data is compressed.

        :return: The compression_policy of this Vault.
        :rtype: str
        """
        return self._compression_policy

    @compression_policy.setter
    def compression_policy(self, compression_policy):
        """
        Sets the compression_policy of this Vault.
        Specifies whether to send data to the Vault in a compressed format. 'kCompressionNone' indicates that data is not compressed. 'kCompressionLow' indicates that data is compressed.

        :param compression_policy: The compression_policy of this Vault.
        :type: str
        """
        allowed_values = ["kCompressionNone", "kCompressionLow"]
        if compression_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `compression_policy` ({0}), must be one of {1}"
                .format(compression_policy, allowed_values)
            )

        self._compression_policy = compression_policy

    @property
    def config(self):
        """
        Gets the config of this Vault.
        Specifies the settings required to connect to the Vault (External Target).

        :return: The config of this Vault.
        :rtype: VaultConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this Vault.
        Specifies the settings required to connect to the Vault (External Target).

        :param config: The config of this Vault.
        :type: VaultConfig
        """

        self._config = config

    @property
    def customer_managing_encryption_keys(self):
        """
        Gets the customer_managing_encryption_keys of this Vault.
        Specifies whether to manage the encryption key manually or let the Cohesity Cluster manage it. If true, you must get the encryption key store it outside the Cluster, before disaster strikes such as the source local Cohesity Cluster being down. You can get the encryption key by downloading it using the Cohesity Dashboard or by calling the GET /public/vaults/encryptionKey/{id} operation.

        :return: The customer_managing_encryption_keys of this Vault.
        :rtype: bool
        """
        return self._customer_managing_encryption_keys

    @customer_managing_encryption_keys.setter
    def customer_managing_encryption_keys(self, customer_managing_encryption_keys):
        """
        Sets the customer_managing_encryption_keys of this Vault.
        Specifies whether to manage the encryption key manually or let the Cohesity Cluster manage it. If true, you must get the encryption key store it outside the Cluster, before disaster strikes such as the source local Cohesity Cluster being down. You can get the encryption key by downloading it using the Cohesity Dashboard or by calling the GET /public/vaults/encryptionKey/{id} operation.

        :param customer_managing_encryption_keys: The customer_managing_encryption_keys of this Vault.
        :type: bool
        """

        self._customer_managing_encryption_keys = customer_managing_encryption_keys

    @property
    def dedup_enabled(self):
        """
        Gets the dedup_enabled of this Vault.
        Specifies whether to deduplicate data before sending it to the Vault.

        :return: The dedup_enabled of this Vault.
        :rtype: bool
        """
        return self._dedup_enabled

    @dedup_enabled.setter
    def dedup_enabled(self, dedup_enabled):
        """
        Sets the dedup_enabled of this Vault.
        Specifies whether to deduplicate data before sending it to the Vault.

        :param dedup_enabled: The dedup_enabled of this Vault.
        :type: bool
        """

        self._dedup_enabled = dedup_enabled

    @property
    def description(self):
        """
        Gets the description of this Vault.
        Specifies a description about the Vault.

        :return: The description of this Vault.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Vault.
        Specifies a description about the Vault.

        :param description: The description of this Vault.
        :type: str
        """

        self._description = description

    @property
    def desired_wal_location(self):
        """
        Gets the desired_wal_location of this Vault.
        Desired location for write ahead logs(wal).

        :return: The desired_wal_location of this Vault.
        :rtype: int
        """
        return self._desired_wal_location

    @desired_wal_location.setter
    def desired_wal_location(self, desired_wal_location):
        """
        Sets the desired_wal_location of this Vault.
        Desired location for write ahead logs(wal).

        :param desired_wal_location: The desired_wal_location of this Vault.
        :type: int
        """

        self._desired_wal_location = desired_wal_location

    @property
    def encryption_key_file_downloaded(self):
        """
        Gets the encryption_key_file_downloaded of this Vault.
        Specifies if the encryption key file has been downloaded using the Cohesity Dashboard (Cohesity UI). If true, the encryption key has been downloaded using the Cohesity Dashboard. An encryption key can only be downloaded once using the Cohesity Dashboard.

        :return: The encryption_key_file_downloaded of this Vault.
        :rtype: bool
        """
        return self._encryption_key_file_downloaded

    @encryption_key_file_downloaded.setter
    def encryption_key_file_downloaded(self, encryption_key_file_downloaded):
        """
        Sets the encryption_key_file_downloaded of this Vault.
        Specifies if the encryption key file has been downloaded using the Cohesity Dashboard (Cohesity UI). If true, the encryption key has been downloaded using the Cohesity Dashboard. An encryption key can only be downloaded once using the Cohesity Dashboard.

        :param encryption_key_file_downloaded: The encryption_key_file_downloaded of this Vault.
        :type: bool
        """

        self._encryption_key_file_downloaded = encryption_key_file_downloaded

    @property
    def encryption_policy(self):
        """
        Gets the encryption_policy of this Vault.
        Specifies whether to send and store data in an encrypted format. 'kEncryptionNone' indicates the data is not encrypted. 'kEncryptionStrong' indicates the data is encrypted.

        :return: The encryption_policy of this Vault.
        :rtype: str
        """
        return self._encryption_policy

    @encryption_policy.setter
    def encryption_policy(self, encryption_policy):
        """
        Sets the encryption_policy of this Vault.
        Specifies whether to send and store data in an encrypted format. 'kEncryptionNone' indicates the data is not encrypted. 'kEncryptionStrong' indicates the data is encrypted.

        :param encryption_policy: The encryption_policy of this Vault.
        :type: str
        """
        allowed_values = ["kEncryptionNone", "kEncryptionStrong"]
        if encryption_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_policy` ({0}), must be one of {1}"
                .format(encryption_policy, allowed_values)
            )

        self._encryption_policy = encryption_policy

    @property
    def full_archive_interval_days(self):
        """
        Gets the full_archive_interval_days of this Vault.
        Specifies the number days between full archives to the Vault. The current default is 90 days. This is only meaningful when incrementalArchivesEnabled is true and the Vault usage type is kArchival.

        :return: The full_archive_interval_days of this Vault.
        :rtype: int
        """
        return self._full_archive_interval_days

    @full_archive_interval_days.setter
    def full_archive_interval_days(self, full_archive_interval_days):
        """
        Sets the full_archive_interval_days of this Vault.
        Specifies the number days between full archives to the Vault. The current default is 90 days. This is only meaningful when incrementalArchivesEnabled is true and the Vault usage type is kArchival.

        :param full_archive_interval_days: The full_archive_interval_days of this Vault.
        :type: int
        """

        self._full_archive_interval_days = full_archive_interval_days

    @property
    def id(self):
        """
        Gets the id of this Vault.
        Specifies an id that identifies the Vault.

        :return: The id of this Vault.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Vault.
        Specifies an id that identifies the Vault.

        :param id: The id of this Vault.
        :type: int
        """

        self._id = id

    @property
    def incremental_archives_enabled(self):
        """
        Gets the incremental_archives_enabled of this Vault.
        Specifies whether to perform incremental archival when sending data to the Vault. If false, only full backups are performed. If true, incremental backups are performed between the full backups.

        :return: The incremental_archives_enabled of this Vault.
        :rtype: bool
        """
        return self._incremental_archives_enabled

    @incremental_archives_enabled.setter
    def incremental_archives_enabled(self, incremental_archives_enabled):
        """
        Sets the incremental_archives_enabled of this Vault.
        Specifies whether to perform incremental archival when sending data to the Vault. If false, only full backups are performed. If true, incremental backups are performed between the full backups.

        :param incremental_archives_enabled: The incremental_archives_enabled of this Vault.
        :type: bool
        """

        self._incremental_archives_enabled = incremental_archives_enabled

    @property
    def key_file_download_time_usecs(self):
        """
        Gets the key_file_download_time_usecs of this Vault.
        Specifies the time (in microseconds) when the encryption key file was downloaded from the Cohesity Dashboard (Cohesity UI). An encryption key can only be downloaded once using the Cohesity Dashboard.

        :return: The key_file_download_time_usecs of this Vault.
        :rtype: int
        """
        return self._key_file_download_time_usecs

    @key_file_download_time_usecs.setter
    def key_file_download_time_usecs(self, key_file_download_time_usecs):
        """
        Sets the key_file_download_time_usecs of this Vault.
        Specifies the time (in microseconds) when the encryption key file was downloaded from the Cohesity Dashboard (Cohesity UI). An encryption key can only be downloaded once using the Cohesity Dashboard.

        :param key_file_download_time_usecs: The key_file_download_time_usecs of this Vault.
        :type: int
        """

        self._key_file_download_time_usecs = key_file_download_time_usecs

    @property
    def key_file_download_user(self):
        """
        Gets the key_file_download_user of this Vault.
        Specifies the user who downloaded the encryption key from the Cohesity Dashboard (Cohesity UI). This field is only populated if encryption is enabled for the Vault and customerManagingEncryptionKeys is true.

        :return: The key_file_download_user of this Vault.
        :rtype: str
        """
        return self._key_file_download_user

    @key_file_download_user.setter
    def key_file_download_user(self, key_file_download_user):
        """
        Sets the key_file_download_user of this Vault.
        Specifies the user who downloaded the encryption key from the Cohesity Dashboard (Cohesity UI). This field is only populated if encryption is enabled for the Vault and customerManagingEncryptionKeys is true.

        :param key_file_download_user: The key_file_download_user of this Vault.
        :type: str
        """

        self._key_file_download_user = key_file_download_user

    @property
    def name(self):
        """
        Gets the name of this Vault.
        Specifies the name of the Vault.

        :return: The name of this Vault.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Vault.
        Specifies the name of the Vault.

        :param name: The name of this Vault.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this Vault.
        Specifies the type of Vault. 'kNearline' indicates a Google Nearline Vault. 'kColdline' indicates a Google Coldline Vault. 'kGlacier' indicates a AWS Glacier Vault. 'kS3' indicates a AWS S3 Vault. 'kAzureStandard' indicates a Microsoft Azure Standard Vault. 'kS3Compatible' indicates a AWS S3 Compatible Vault. (See the online help for supported types.) 'kQStarTape' indicates a QStar Tape Vault. 'kGoogleStandard' indicates a Google Standard Vault. 'kGoogleDRA' indicates a Google DRA Vault. 'kAWSGovCloud' indicates a AWS Gov Cloud Vault. 'kNAS' indicates a NAS Vault. 'kAzureGovCloud' indicates an Microsoft Azure Gov Cloud Vault.

        :return: The type of this Vault.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Vault.
        Specifies the type of Vault. 'kNearline' indicates a Google Nearline Vault. 'kColdline' indicates a Google Coldline Vault. 'kGlacier' indicates a AWS Glacier Vault. 'kS3' indicates a AWS S3 Vault. 'kAzureStandard' indicates a Microsoft Azure Standard Vault. 'kS3Compatible' indicates a AWS S3 Compatible Vault. (See the online help for supported types.) 'kQStarTape' indicates a QStar Tape Vault. 'kGoogleStandard' indicates a Google Standard Vault. 'kGoogleDRA' indicates a Google DRA Vault. 'kAWSGovCloud' indicates a AWS Gov Cloud Vault. 'kNAS' indicates a NAS Vault. 'kAzureGovCloud' indicates an Microsoft Azure Gov Cloud Vault.

        :param type: The type of this Vault.
        :type: str
        """
        allowed_values = ["kNearline", "kColdline", "kGlacier", "kS3", "kAzureStandard", "kS3Compatible", "kQStarTape", "kGoogleStandard", "kGoogleDRA", "kAWSGovCloud", "kNAS", "kAzureGovCloud"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def usage_type(self):
        """
        Gets the usage_type of this Vault.
        Specifies the usage type of the Vault. 'kArchival' indicates the Vault provides archive storage for backup data. 'kCloudSpill' indicates the Vault provides additional storage for cold data.

        :return: The usage_type of this Vault.
        :rtype: str
        """
        return self._usage_type

    @usage_type.setter
    def usage_type(self, usage_type):
        """
        Sets the usage_type of this Vault.
        Specifies the usage type of the Vault. 'kArchival' indicates the Vault provides archive storage for backup data. 'kCloudSpill' indicates the Vault provides additional storage for cold data.

        :param usage_type: The usage_type of this Vault.
        :type: str
        """
        allowed_values = ["kArchival", "kCloudSpill"]
        if usage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `usage_type` ({0}), must be one of {1}"
                .format(usage_type, allowed_values)
            )

        self._usage_type = usage_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
