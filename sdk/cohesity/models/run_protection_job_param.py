# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class RunProtectionJobParam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, copy_run_targets=None, run_type=None, source_ids=None):
        """
        RunProtectionJobParam - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'copy_run_targets': 'list[RunJobSnapshotTarget]',
            'run_type': 'str',
            'source_ids': 'list[int]'
        }

        self.attribute_map = {
            'copy_run_targets': 'copyRunTargets',
            'run_type': 'runType',
            'source_ids': 'sourceIds'
        }

        self._copy_run_targets = copy_run_targets
        self._run_type = run_type
        self._source_ids = source_ids

    @property
    def copy_run_targets(self):
        """
        Gets the copy_run_targets of this RunProtectionJobParam.
        Optional parameter to be set if you want specific replication or archival associated with the policy to run.

        :return: The copy_run_targets of this RunProtectionJobParam.
        :rtype: list[RunJobSnapshotTarget]
        """
        return self._copy_run_targets

    @copy_run_targets.setter
    def copy_run_targets(self, copy_run_targets):
        """
        Sets the copy_run_targets of this RunProtectionJobParam.
        Optional parameter to be set if you want specific replication or archival associated with the policy to run.

        :param copy_run_targets: The copy_run_targets of this RunProtectionJobParam.
        :type: list[RunJobSnapshotTarget]
        """

        self._copy_run_targets = copy_run_targets

    @property
    def run_type(self):
        """
        Gets the run_type of this RunProtectionJobParam.
        Specifies the type of backup. If not specified, 'kRegular' is assumed. 'kRegular' indicates a incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates a system backup. System backups are used to do bare metal recovery of the system to a specific point in time.

        :return: The run_type of this RunProtectionJobParam.
        :rtype: str
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type):
        """
        Sets the run_type of this RunProtectionJobParam.
        Specifies the type of backup. If not specified, 'kRegular' is assumed. 'kRegular' indicates a incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates a system backup. System backups are used to do bare metal recovery of the system to a specific point in time.

        :param run_type: The run_type of this RunProtectionJobParam.
        :type: str
        """
        allowed_values = ["kRegular", "kFull", "kLog", "kSystem"]
        if run_type not in allowed_values:
            raise ValueError(
                "Invalid value for `run_type` ({0}), must be one of {1}"
                .format(run_type, allowed_values)
            )

        self._run_type = run_type

    @property
    def source_ids(self):
        """
        Gets the source_ids of this RunProtectionJobParam.
        Optional parameter if you want to back up only a subset of sources that are protected by the job in this run.

        :return: The source_ids of this RunProtectionJobParam.
        :rtype: list[int]
        """
        return self._source_ids

    @source_ids.setter
    def source_ids(self, source_ids):
        """
        Sets the source_ids of this RunProtectionJobParam.
        Optional parameter if you want to back up only a subset of sources that are protected by the job in this run.

        :param source_ids: The source_ids of this RunProtectionJobParam.
        :type: list[int]
        """

        self._source_ids = source_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
