# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class NasProtectionSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, mount_path=None, name=None, protocol=None, type=None):
        """
        NasProtectionSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'mount_path': 'str',
            'name': 'str',
            'protocol': 'str',
            'type': 'str'
        }

        self.attribute_map = {
            'description': 'description',
            'mount_path': 'mountPath',
            'name': 'name',
            'protocol': 'protocol',
            'type': 'type'
        }

        self._description = description
        self._mount_path = mount_path
        self._name = name
        self._protocol = protocol
        self._type = type

    @property
    def description(self):
        """
        Gets the description of this NasProtectionSource.
        Specifies a description about the Protection Source.

        :return: The description of this NasProtectionSource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this NasProtectionSource.
        Specifies a description about the Protection Source.

        :param description: The description of this NasProtectionSource.
        :type: str
        """

        self._description = description

    @property
    def mount_path(self):
        """
        Gets the mount_path of this NasProtectionSource.
        Specifies the mount path of this NAS. For example, for a NFS mount point, this should be in the format of IP or hostname:/foo/bar.

        :return: The mount_path of this NasProtectionSource.
        :rtype: str
        """
        return self._mount_path

    @mount_path.setter
    def mount_path(self, mount_path):
        """
        Sets the mount_path of this NasProtectionSource.
        Specifies the mount path of this NAS. For example, for a NFS mount point, this should be in the format of IP or hostname:/foo/bar.

        :param mount_path: The mount_path of this NasProtectionSource.
        :type: str
        """

        self._mount_path = mount_path

    @property
    def name(self):
        """
        Gets the name of this NasProtectionSource.
        Specifies the name of the NetApp Object.

        :return: The name of this NasProtectionSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this NasProtectionSource.
        Specifies the name of the NetApp Object.

        :param name: The name of this NasProtectionSource.
        :type: str
        """

        self._name = name

    @property
    def protocol(self):
        """
        Gets the protocol of this NasProtectionSource.
        Specifies the protocol used by the NAS server. Specifies the protocol used by a NAS server. 'kNfs3' indicates NFS v3 protocol. 'kCifs1' indicates CIFS v1.0 protocol.

        :return: The protocol of this NasProtectionSource.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """
        Sets the protocol of this NasProtectionSource.
        Specifies the protocol used by the NAS server. Specifies the protocol used by a NAS server. 'kNfs3' indicates NFS v3 protocol. 'kCifs1' indicates CIFS v1.0 protocol.

        :param protocol: The protocol of this NasProtectionSource.
        :type: str
        """
        allowed_values = ["kNfs3", "kCifs1"]
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def type(self):
        """
        Gets the type of this NasProtectionSource.
        Specifies the type of a Protection Source Object in a generic NAS Source such as 'kGroup', or 'kHost'. Specifies the kind of NAS mount. 'kGroup' indicates top level node that holds individual NAS hosts. 'kHost' indicates a single NAS path that can be mounted.

        :return: The type of this NasProtectionSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this NasProtectionSource.
        Specifies the type of a Protection Source Object in a generic NAS Source such as 'kGroup', or 'kHost'. Specifies the kind of NAS mount. 'kGroup' indicates top level node that holds individual NAS hosts. 'kHost' indicates a single NAS path that can be mounted.

        :param type: The type of this NasProtectionSource.
        :type: str
        """
        allowed_values = ["kGroup", "kHost"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
