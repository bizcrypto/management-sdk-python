# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class CancelProtectionJobRunParam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, copy_task_uid=None, job_run_id=None):
        """
        CancelProtectionJobRunParam - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'copy_task_uid': 'UniversalId',
            'job_run_id': 'int'
        }

        self.attribute_map = {
            'copy_task_uid': 'copyTaskUid',
            'job_run_id': 'jobRunId'
        }

        self._copy_task_uid = copy_task_uid
        self._job_run_id = job_run_id

    @property
    def copy_task_uid(self):
        """
        Gets the copy_task_uid of this CancelProtectionJobRunParam.
        CopyTaskUid is the Uid of a copy task. If a particular copy task is to be cancelled, this field should be set to the id of that particular copy task. For example, if replication task is to be canceled, CopyTaskUid of the replication task has to be specified.

        :return: The copy_task_uid of this CancelProtectionJobRunParam.
        :rtype: UniversalId
        """
        return self._copy_task_uid

    @copy_task_uid.setter
    def copy_task_uid(self, copy_task_uid):
        """
        Sets the copy_task_uid of this CancelProtectionJobRunParam.
        CopyTaskUid is the Uid of a copy task. If a particular copy task is to be cancelled, this field should be set to the id of that particular copy task. For example, if replication task is to be canceled, CopyTaskUid of the replication task has to be specified.

        :param copy_task_uid: The copy_task_uid of this CancelProtectionJobRunParam.
        :type: UniversalId
        """

        self._copy_task_uid = copy_task_uid

    @property
    def job_run_id(self):
        """
        Gets the job_run_id of this CancelProtectionJobRunParam.
        Run Id of a Protection Job Run that needs to be cancelled. If this Run id does not match the id of an active Run in the Protection job, the job Run is not cancelled and an error will be returned.

        :return: The job_run_id of this CancelProtectionJobRunParam.
        :rtype: int
        """
        return self._job_run_id

    @job_run_id.setter
    def job_run_id(self, job_run_id):
        """
        Sets the job_run_id of this CancelProtectionJobRunParam.
        Run Id of a Protection Job Run that needs to be cancelled. If this Run id does not match the id of an active Run in the Protection job, the job Run is not cancelled and an error will be returned.

        :param job_run_id: The job_run_id of this CancelProtectionJobRunParam.
        :type: int
        """

        self._job_run_id = job_run_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
