# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class UpdateUserQuotaSettingsForView(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, default_user_quota_policy=None, enable_user_quota=None, inherit_default_policy_from_viewbox=None, view_name=None):
        """
        UpdateUserQuotaSettingsForView - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'default_user_quota_policy': 'QuotaPolicy',
            'enable_user_quota': 'bool',
            'inherit_default_policy_from_viewbox': 'bool',
            'view_name': 'str'
        }

        self.attribute_map = {
            'default_user_quota_policy': 'defaultUserQuotaPolicy',
            'enable_user_quota': 'enableUserQuota',
            'inherit_default_policy_from_viewbox': 'inheritDefaultPolicyFromViewbox',
            'view_name': 'viewName'
        }

        self._default_user_quota_policy = default_user_quota_policy
        self._enable_user_quota = enable_user_quota
        self._inherit_default_policy_from_viewbox = inherit_default_policy_from_viewbox
        self._view_name = view_name

    @property
    def default_user_quota_policy(self):
        """
        Gets the default_user_quota_policy of this UpdateUserQuotaSettingsForView.
        The default user quota policy for this view.

        :return: The default_user_quota_policy of this UpdateUserQuotaSettingsForView.
        :rtype: QuotaPolicy
        """
        return self._default_user_quota_policy

    @default_user_quota_policy.setter
    def default_user_quota_policy(self, default_user_quota_policy):
        """
        Sets the default_user_quota_policy of this UpdateUserQuotaSettingsForView.
        The default user quota policy for this view.

        :param default_user_quota_policy: The default_user_quota_policy of this UpdateUserQuotaSettingsForView.
        :type: QuotaPolicy
        """

        self._default_user_quota_policy = default_user_quota_policy

    @property
    def enable_user_quota(self):
        """
        Gets the enable_user_quota of this UpdateUserQuotaSettingsForView.
        If set, it enables/disables the user quota overrides for a view. Otherwise, it leaves it at it's previous state.

        :return: The enable_user_quota of this UpdateUserQuotaSettingsForView.
        :rtype: bool
        """
        return self._enable_user_quota

    @enable_user_quota.setter
    def enable_user_quota(self, enable_user_quota):
        """
        Sets the enable_user_quota of this UpdateUserQuotaSettingsForView.
        If set, it enables/disables the user quota overrides for a view. Otherwise, it leaves it at it's previous state.

        :param enable_user_quota: The enable_user_quota of this UpdateUserQuotaSettingsForView.
        :type: bool
        """

        self._enable_user_quota = enable_user_quota

    @property
    def inherit_default_policy_from_viewbox(self):
        """
        Gets the inherit_default_policy_from_viewbox of this UpdateUserQuotaSettingsForView.
        If set to true, the default_policy in view metadata will be cleared and the default policy from viewbox will take effect for all users in the view.

        :return: The inherit_default_policy_from_viewbox of this UpdateUserQuotaSettingsForView.
        :rtype: bool
        """
        return self._inherit_default_policy_from_viewbox

    @inherit_default_policy_from_viewbox.setter
    def inherit_default_policy_from_viewbox(self, inherit_default_policy_from_viewbox):
        """
        Sets the inherit_default_policy_from_viewbox of this UpdateUserQuotaSettingsForView.
        If set to true, the default_policy in view metadata will be cleared and the default policy from viewbox will take effect for all users in the view.

        :param inherit_default_policy_from_viewbox: The inherit_default_policy_from_viewbox of this UpdateUserQuotaSettingsForView.
        :type: bool
        """

        self._inherit_default_policy_from_viewbox = inherit_default_policy_from_viewbox

    @property
    def view_name(self):
        """
        Gets the view_name of this UpdateUserQuotaSettingsForView.
        View name of input view.

        :return: The view_name of this UpdateUserQuotaSettingsForView.
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """
        Sets the view_name of this UpdateUserQuotaSettingsForView.
        View name of input view.

        :param view_name: The view_name of this UpdateUserQuotaSettingsForView.
        :type: str
        """

        self._view_name = view_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
