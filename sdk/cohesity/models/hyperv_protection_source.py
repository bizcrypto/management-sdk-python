# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class HypervProtectionSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, agent_info=None, backup_type=None, cluster_name=None, datastore_info=None, description=None, host_type=None, hyperv_uuid=None, name=None, type=None, uuid=None, vm_info=None):
        """
        HypervProtectionSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'agent_info': 'AgentInformation',
            'backup_type': 'str',
            'cluster_name': 'str',
            'datastore_info': 'HypervDatastore',
            'description': 'str',
            'host_type': 'str',
            'hyperv_uuid': 'str',
            'name': 'str',
            'type': 'str',
            'uuid': 'str',
            'vm_info': 'HypervVirtualMachine'
        }

        self.attribute_map = {
            'agent_info': 'agentInfo',
            'backup_type': 'backupType',
            'cluster_name': 'clusterName',
            'datastore_info': 'datastoreInfo',
            'description': 'description',
            'host_type': 'hostType',
            'hyperv_uuid': 'hypervUuid',
            'name': 'name',
            'type': 'type',
            'uuid': 'uuid',
            'vm_info': 'vmInfo'
        }

        self._agent_info = agent_info
        self._backup_type = backup_type
        self._cluster_name = cluster_name
        self._datastore_info = datastore_info
        self._description = description
        self._host_type = host_type
        self._hyperv_uuid = hyperv_uuid
        self._name = name
        self._type = type
        self._uuid = uuid
        self._vm_info = vm_info

    @property
    def agent_info(self):
        """
        Gets the agent_info of this HypervProtectionSource.
        Specifies information about the agent running on the HyperV objects.

        :return: The agent_info of this HypervProtectionSource.
        :rtype: AgentInformation
        """
        return self._agent_info

    @agent_info.setter
    def agent_info(self, agent_info):
        """
        Sets the agent_info of this HypervProtectionSource.
        Specifies information about the agent running on the HyperV objects.

        :param agent_info: The agent_info of this HypervProtectionSource.
        :type: AgentInformation
        """

        self._agent_info = agent_info

    @property
    def backup_type(self):
        """
        Gets the backup_type of this HypervProtectionSource.
        Specifies the type of backup supported by the VM. 'kRctBackup', 'kVssBackup' Specifies the type of an HyperV datastore object. 'kRctBackup' indicates backup is done using RCT/checkpoints. 'kVssBackup' indicates backup is done using VSS.

        :return: The backup_type of this HypervProtectionSource.
        :rtype: str
        """
        return self._backup_type

    @backup_type.setter
    def backup_type(self, backup_type):
        """
        Sets the backup_type of this HypervProtectionSource.
        Specifies the type of backup supported by the VM. 'kRctBackup', 'kVssBackup' Specifies the type of an HyperV datastore object. 'kRctBackup' indicates backup is done using RCT/checkpoints. 'kVssBackup' indicates backup is done using VSS.

        :param backup_type: The backup_type of this HypervProtectionSource.
        :type: str
        """
        allowed_values = ["kRctBackup", "kVssBackup"]
        if backup_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backup_type` ({0}), must be one of {1}"
                .format(backup_type, allowed_values)
            )

        self._backup_type = backup_type

    @property
    def cluster_name(self):
        """
        Gets the cluster_name of this HypervProtectionSource.
        Specifies the cluster name for 'kHostCluster' objects.

        :return: The cluster_name of this HypervProtectionSource.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """
        Sets the cluster_name of this HypervProtectionSource.
        Specifies the cluster name for 'kHostCluster' objects.

        :param cluster_name: The cluster_name of this HypervProtectionSource.
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def datastore_info(self):
        """
        Gets the datastore_info of this HypervProtectionSource.
        Specifies additional information for 'kDatastore' objects.

        :return: The datastore_info of this HypervProtectionSource.
        :rtype: HypervDatastore
        """
        return self._datastore_info

    @datastore_info.setter
    def datastore_info(self, datastore_info):
        """
        Sets the datastore_info of this HypervProtectionSource.
        Specifies additional information for 'kDatastore' objects.

        :param datastore_info: The datastore_info of this HypervProtectionSource.
        :type: HypervDatastore
        """

        self._datastore_info = datastore_info

    @property
    def description(self):
        """
        Gets the description of this HypervProtectionSource.
        Specifies a description about the Protection Source.

        :return: The description of this HypervProtectionSource.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this HypervProtectionSource.
        Specifies a description about the Protection Source.

        :param description: The description of this HypervProtectionSource.
        :type: str
        """

        self._description = description

    @property
    def host_type(self):
        """
        Gets the host_type of this HypervProtectionSource.
        Specifies host OS type for 'kVirtualMachine' objects. 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system.

        :return: The host_type of this HypervProtectionSource.
        :rtype: str
        """
        return self._host_type

    @host_type.setter
    def host_type(self, host_type):
        """
        Sets the host_type of this HypervProtectionSource.
        Specifies host OS type for 'kVirtualMachine' objects. 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system.

        :param host_type: The host_type of this HypervProtectionSource.
        :type: str
        """
        allowed_values = ["kLinux", "kWindows"]
        if host_type not in allowed_values:
            raise ValueError(
                "Invalid value for `host_type` ({0}), must be one of {1}"
                .format(host_type, allowed_values)
            )

        self._host_type = host_type

    @property
    def hyperv_uuid(self):
        """
        Gets the hyperv_uuid of this HypervProtectionSource.
        Specifies the UUID for 'kVirtualMachine' HyperV objects.

        :return: The hyperv_uuid of this HypervProtectionSource.
        :rtype: str
        """
        return self._hyperv_uuid

    @hyperv_uuid.setter
    def hyperv_uuid(self, hyperv_uuid):
        """
        Sets the hyperv_uuid of this HypervProtectionSource.
        Specifies the UUID for 'kVirtualMachine' HyperV objects.

        :param hyperv_uuid: The hyperv_uuid of this HypervProtectionSource.
        :type: str
        """

        self._hyperv_uuid = hyperv_uuid

    @property
    def name(self):
        """
        Gets the name of this HypervProtectionSource.
        Specifies the name of the HyperV Object.

        :return: The name of this HypervProtectionSource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this HypervProtectionSource.
        Specifies the name of the HyperV Object.

        :param name: The name of this HypervProtectionSource.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this HypervProtectionSource.
        Specifies the type of an HyperV Protection Source Object such as 'kSCVMMServer', 'kStandaloneHost', 'kNetwork', etc. overrideDescription: true Specifies the type of an HyperV Protection Source. 'kSCVMMServer' indicates a collection of root folders clusters. 'kStandaloneHost' indicates a single Nutanix cluster. 'kStandaloneCluster' indicates a single Nutanix cluster. 'kHostGroup' indicates a Nutanix cluster manageed by a Prism Central. 'kHost' indicates an HyperV host. 'kHostCluster' indicates a Nutanix cluster manageed by a Prism Central. 'kVirtualMachine' indicates a Virtual Machine. 'kNetwork' indicates a Virtual Machine network object. 'kDatastore' represents a storage container object.

        :return: The type of this HypervProtectionSource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this HypervProtectionSource.
        Specifies the type of an HyperV Protection Source Object such as 'kSCVMMServer', 'kStandaloneHost', 'kNetwork', etc. overrideDescription: true Specifies the type of an HyperV Protection Source. 'kSCVMMServer' indicates a collection of root folders clusters. 'kStandaloneHost' indicates a single Nutanix cluster. 'kStandaloneCluster' indicates a single Nutanix cluster. 'kHostGroup' indicates a Nutanix cluster manageed by a Prism Central. 'kHost' indicates an HyperV host. 'kHostCluster' indicates a Nutanix cluster manageed by a Prism Central. 'kVirtualMachine' indicates a Virtual Machine. 'kNetwork' indicates a Virtual Machine network object. 'kDatastore' represents a storage container object.

        :param type: The type of this HypervProtectionSource.
        :type: str
        """
        allowed_values = ["kSCVMMServer", "kStandaloneHost", "kStandaloneCluster", "kHostGroup", "kHost", "kHostCluster", "kVirtualMachine", "kNetwork", "kDatastore"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """
        Gets the uuid of this HypervProtectionSource.
        Specifies the UUID of the Object. This is unique within the HyperV environment.

        :return: The uuid of this HypervProtectionSource.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """
        Sets the uuid of this HypervProtectionSource.
        Specifies the UUID of the Object. This is unique within the HyperV environment.

        :param uuid: The uuid of this HypervProtectionSource.
        :type: str
        """

        self._uuid = uuid

    @property
    def vm_info(self):
        """
        Gets the vm_info of this HypervProtectionSource.
        Specifies additional information for 'kVirtualMachine' objects.

        :return: The vm_info of this HypervProtectionSource.
        :rtype: HypervVirtualMachine
        """
        return self._vm_info

    @vm_info.setter
    def vm_info(self, vm_info):
        """
        Sets the vm_info of this HypervProtectionSource.
        Specifies additional information for 'kVirtualMachine' objects.

        :param vm_info: The vm_info of this HypervProtectionSource.
        :type: HypervVirtualMachine
        """

        self._vm_info = vm_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
