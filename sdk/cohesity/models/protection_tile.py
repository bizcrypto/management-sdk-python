# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ProtectionTile(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, last_day_archival=None, last_day_backup=None, last_day_replication_in=None, last_day_replication_out=None):
        """
        ProtectionTile - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'last_day_archival': 'ProtectionStats',
            'last_day_backup': 'ProtectionStats',
            'last_day_replication_in': 'ProtectionStats',
            'last_day_replication_out': 'ProtectionStats'
        }

        self.attribute_map = {
            'last_day_archival': 'lastDayArchival',
            'last_day_backup': 'lastDayBackup',
            'last_day_replication_in': 'lastDayReplicationIn',
            'last_day_replication_out': 'lastDayReplicationOut'
        }

        self._last_day_archival = last_day_archival
        self._last_day_backup = last_day_backup
        self._last_day_replication_in = last_day_replication_in
        self._last_day_replication_out = last_day_replication_out

    @property
    def last_day_archival(self):
        """
        Gets the last_day_archival of this ProtectionTile.
        Statistics related to archival for last 24 hours.

        :return: The last_day_archival of this ProtectionTile.
        :rtype: ProtectionStats
        """
        return self._last_day_archival

    @last_day_archival.setter
    def last_day_archival(self, last_day_archival):
        """
        Sets the last_day_archival of this ProtectionTile.
        Statistics related to archival for last 24 hours.

        :param last_day_archival: The last_day_archival of this ProtectionTile.
        :type: ProtectionStats
        """

        self._last_day_archival = last_day_archival

    @property
    def last_day_backup(self):
        """
        Gets the last_day_backup of this ProtectionTile.
        Statistics related to Back for last 24 hours.

        :return: The last_day_backup of this ProtectionTile.
        :rtype: ProtectionStats
        """
        return self._last_day_backup

    @last_day_backup.setter
    def last_day_backup(self, last_day_backup):
        """
        Sets the last_day_backup of this ProtectionTile.
        Statistics related to Back for last 24 hours.

        :param last_day_backup: The last_day_backup of this ProtectionTile.
        :type: ProtectionStats
        """

        self._last_day_backup = last_day_backup

    @property
    def last_day_replication_in(self):
        """
        Gets the last_day_replication_in of this ProtectionTile.
        Statistics related to incoming replication for last 24 hours.

        :return: The last_day_replication_in of this ProtectionTile.
        :rtype: ProtectionStats
        """
        return self._last_day_replication_in

    @last_day_replication_in.setter
    def last_day_replication_in(self, last_day_replication_in):
        """
        Sets the last_day_replication_in of this ProtectionTile.
        Statistics related to incoming replication for last 24 hours.

        :param last_day_replication_in: The last_day_replication_in of this ProtectionTile.
        :type: ProtectionStats
        """

        self._last_day_replication_in = last_day_replication_in

    @property
    def last_day_replication_out(self):
        """
        Gets the last_day_replication_out of this ProtectionTile.
        Statistics related to outgoing replication for last 24 hours.

        :return: The last_day_replication_out of this ProtectionTile.
        :rtype: ProtectionStats
        """
        return self._last_day_replication_out

    @last_day_replication_out.setter
    def last_day_replication_out(self, last_day_replication_out):
        """
        Sets the last_day_replication_out of this ProtectionTile.
        Statistics related to outgoing replication for last 24 hours.

        :param last_day_replication_out: The last_day_replication_out of this ProtectionTile.
        :type: ProtectionStats
        """

        self._last_day_replication_out = last_day_replication_out

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
