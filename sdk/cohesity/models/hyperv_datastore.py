# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class HypervDatastore(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, capacity=None, free_space=None, mount_points=None, type=None):
        """
        HypervDatastore - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'capacity': 'int',
            'free_space': 'int',
            'mount_points': 'list[str]',
            'type': 'str'
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'free_space': 'freeSpace',
            'mount_points': 'mountPoints',
            'type': 'type'
        }

        self._capacity = capacity
        self._free_space = free_space
        self._mount_points = mount_points
        self._type = type

    @property
    def capacity(self):
        """
        Gets the capacity of this HypervDatastore.
        Specifies the capacity of the datastore in bytes.

        :return: The capacity of this HypervDatastore.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """
        Sets the capacity of this HypervDatastore.
        Specifies the capacity of the datastore in bytes.

        :param capacity: The capacity of this HypervDatastore.
        :type: int
        """

        self._capacity = capacity

    @property
    def free_space(self):
        """
        Gets the free_space of this HypervDatastore.
        Specifies the available space on the datastore in bytes.

        :return: The free_space of this HypervDatastore.
        :rtype: int
        """
        return self._free_space

    @free_space.setter
    def free_space(self, free_space):
        """
        Sets the free_space of this HypervDatastore.
        Specifies the available space on the datastore in bytes.

        :param free_space: The free_space of this HypervDatastore.
        :type: int
        """

        self._free_space = free_space

    @property
    def mount_points(self):
        """
        Gets the mount_points of this HypervDatastore.


        :return: The mount_points of this HypervDatastore.
        :rtype: list[str]
        """
        return self._mount_points

    @mount_points.setter
    def mount_points(self, mount_points):
        """
        Sets the mount_points of this HypervDatastore.


        :param mount_points: The mount_points of this HypervDatastore.
        :type: list[str]
        """

        self._mount_points = mount_points

    @property
    def type(self):
        """
        Gets the type of this HypervDatastore.
        Specifies the type of the datastore object like kFileShare or kVolume. overrideDescription: true Specifies the type of a HyperV datastore object. 'kFileShare' indicates SMB file share datastore. 'kVolume' indicates a volume which can a LUN.

        :return: The type of this HypervDatastore.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this HypervDatastore.
        Specifies the type of the datastore object like kFileShare or kVolume. overrideDescription: true Specifies the type of a HyperV datastore object. 'kFileShare' indicates SMB file share datastore. 'kVolume' indicates a volume which can a LUN.

        :param type: The type of this HypervDatastore.
        :type: str
        """
        allowed_values = ["kFileShare", "kVolume"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
