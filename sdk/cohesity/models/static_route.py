# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class StaticRoute(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, description=None, is_update=None, network_interface_group=None, network_interface_ids=None, subnet=None, vlan_id=None):
        """
        StaticRoute - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'description': 'str',
            'is_update': 'bool',
            'network_interface_group': 'str',
            'network_interface_ids': 'list[int]',
            'subnet': 'StaticRouteSubnet',
            'vlan_id': 'int'
        }

        self.attribute_map = {
            'description': 'description',
            'is_update': 'isUpdate',
            'network_interface_group': 'networkInterfaceGroup',
            'network_interface_ids': 'networkInterfaceIds',
            'subnet': 'subnet',
            'vlan_id': 'vlanId'
        }

        self._description = description
        self._is_update = is_update
        self._network_interface_group = network_interface_group
        self._network_interface_ids = network_interface_ids
        self._subnet = subnet
        self._vlan_id = vlan_id

    @property
    def description(self):
        """
        Gets the description of this StaticRoute.
        Specifies a description of the Static Route.

        :return: The description of this StaticRoute.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this StaticRoute.
        Specifies a description of the Static Route.

        :param description: The description of this StaticRoute.
        :type: str
        """

        self._description = description

    @property
    def is_update(self):
        """
        Gets the is_update of this StaticRoute.
        Specifies if the route is currently being updated on the Cohesity Cluster.

        :return: The is_update of this StaticRoute.
        :rtype: bool
        """
        return self._is_update

    @is_update.setter
    def is_update(self, is_update):
        """
        Sets the is_update of this StaticRoute.
        Specifies if the route is currently being updated on the Cohesity Cluster.

        :param is_update: The is_update of this StaticRoute.
        :type: bool
        """

        self._is_update = is_update

    @property
    def network_interface_group(self):
        """
        Gets the network_interface_group of this StaticRoute.
        Specifies the group name of the network interfaces to use for communicating with the destination subnet.

        :return: The network_interface_group of this StaticRoute.
        :rtype: str
        """
        return self._network_interface_group

    @network_interface_group.setter
    def network_interface_group(self, network_interface_group):
        """
        Sets the network_interface_group of this StaticRoute.
        Specifies the group name of the network interfaces to use for communicating with the destination subnet.

        :param network_interface_group: The network_interface_group of this StaticRoute.
        :type: str
        """

        self._network_interface_group = network_interface_group

    @property
    def network_interface_ids(self):
        """
        Gets the network_interface_ids of this StaticRoute.
        Specifies the ids of the network interfaces to use for communicating with the destination subnet.

        :return: The network_interface_ids of this StaticRoute.
        :rtype: list[int]
        """
        return self._network_interface_ids

    @network_interface_ids.setter
    def network_interface_ids(self, network_interface_ids):
        """
        Sets the network_interface_ids of this StaticRoute.
        Specifies the ids of the network interfaces to use for communicating with the destination subnet.

        :param network_interface_ids: The network_interface_ids of this StaticRoute.
        :type: list[int]
        """

        self._network_interface_ids = network_interface_ids

    @property
    def subnet(self):
        """
        Gets the subnet of this StaticRoute.


        :return: The subnet of this StaticRoute.
        :rtype: StaticRouteSubnet
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """
        Sets the subnet of this StaticRoute.


        :param subnet: The subnet of this StaticRoute.
        :type: StaticRouteSubnet
        """

        self._subnet = subnet

    @property
    def vlan_id(self):
        """
        Gets the vlan_id of this StaticRoute.
        Specifies the ID of the VLAN to use for communication with the destination subnet.

        :return: The vlan_id of this StaticRoute.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """
        Sets the vlan_id of this StaticRoute.
        Specifies the ID of the VLAN to use for communication with the destination subnet.

        :param vlan_id: The vlan_id of this StaticRoute.
        :type: int
        """

        self._vlan_id = vlan_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
