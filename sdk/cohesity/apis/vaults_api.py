# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class VaultsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_vault(self, body, **kwargs):
        """
        Create a new Vault (External Target).
        Returns the created Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_vault(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Vault body: Request to create a new Vault. (required)
        :return: Vault
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_vault_with_http_info(body, **kwargs)
        else:
            (data) = self.create_vault_with_http_info(body, **kwargs)
            return data

    def create_vault_with_http_info(self, body, **kwargs):
        """
        Create a new Vault (External Target).
        Returns the created Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_vault_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Vault body: Request to create a new Vault. (required)
        :return: Vault
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_vault" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_vault`")

        resource_path = '/public/vaults'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Vault',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def delete_vault(self, id, **kwargs):
        """
        Delete a Vault (External Target).
        Returns delete status upon completion. A Vault is equivalent to an External Target in the Cohesity Dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_vault(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Vault. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_vault_with_http_info(id, **kwargs)
        else:
            (data) = self.delete_vault_with_http_info(id, **kwargs)
            return data

    def delete_vault_with_http_info(self, id, **kwargs):
        """
        Delete a Vault (External Target).
        Returns delete status upon completion. A Vault is equivalent to an External Target in the Cohesity Dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_vault_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Vault. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_vault" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_vault`")

        resource_path = '/public/vaults/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_archive_media_info(self, cluster_id, cluster_incarnation_id, qstar_archive_job_id, **kwargs):
        """
        List the media information for the specified archive service.
        Returns the media information about the specified archive service uid (such as a QStar tape archive service).  An archive service uid is uniquely identified using a combination of the following fields: clusterIncarnationId, entityIds and clusterId. These are all required fields.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_archive_media_info(cluster_id, cluster_incarnation_id, qstar_archive_job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cluster_id: Specifies the id of the Cohesity Cluster that archived to a QStar media Vault. (required)
        :param int cluster_incarnation_id: Specifies the incarnation id of the Cohesity Cluster that archived to a QStar media Vault. (required)
        :param int qstar_archive_job_id: Specifies the id of the Job that archived to a QStar media Vault. (required)
        :param list[int] entity_ids: Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster.
        :param int qstar_restore_task_id: Specifies the id of the restore task to optionally filter by. The restore task that is restoring data from the specified media Vault.
        :return: list[TapeMediaInformation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_archive_media_info_with_http_info(cluster_id, cluster_incarnation_id, qstar_archive_job_id, **kwargs)
        else:
            (data) = self.get_archive_media_info_with_http_info(cluster_id, cluster_incarnation_id, qstar_archive_job_id, **kwargs)
            return data

    def get_archive_media_info_with_http_info(self, cluster_id, cluster_incarnation_id, qstar_archive_job_id, **kwargs):
        """
        List the media information for the specified archive service.
        Returns the media information about the specified archive service uid (such as a QStar tape archive service).  An archive service uid is uniquely identified using a combination of the following fields: clusterIncarnationId, entityIds and clusterId. These are all required fields.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_archive_media_info_with_http_info(cluster_id, cluster_incarnation_id, qstar_archive_job_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cluster_id: Specifies the id of the Cohesity Cluster that archived to a QStar media Vault. (required)
        :param int cluster_incarnation_id: Specifies the incarnation id of the Cohesity Cluster that archived to a QStar media Vault. (required)
        :param int qstar_archive_job_id: Specifies the id of the Job that archived to a QStar media Vault. (required)
        :param list[int] entity_ids: Specifies an array of entityIds to optionally filter by. An entityId is a unique id for a VM assigned by the Cohesity Cluster.
        :param int qstar_restore_task_id: Specifies the id of the restore task to optionally filter by. The restore task that is restoring data from the specified media Vault.
        :return: list[TapeMediaInformation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'cluster_incarnation_id', 'qstar_archive_job_id', 'entity_ids', 'qstar_restore_task_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_archive_media_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params) or (params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_archive_media_info`")
        # verify the required parameter 'cluster_incarnation_id' is set
        if ('cluster_incarnation_id' not in params) or (params['cluster_incarnation_id'] is None):
            raise ValueError("Missing the required parameter `cluster_incarnation_id` when calling `get_archive_media_info`")
        # verify the required parameter 'qstar_archive_job_id' is set
        if ('qstar_archive_job_id' not in params) or (params['qstar_archive_job_id'] is None):
            raise ValueError("Missing the required parameter `qstar_archive_job_id` when calling `get_archive_media_info`")

        resource_path = '/public/vaults/archiveMediaInfo'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'entity_ids' in params:
            query_params['entityIds'] = params['entity_ids']
        if 'cluster_id' in params:
            query_params['clusterId'] = params['cluster_id']
        if 'cluster_incarnation_id' in params:
            query_params['clusterIncarnationId'] = params['cluster_incarnation_id']
        if 'qstar_archive_job_id' in params:
            query_params['qstarArchiveJobId'] = params['qstar_archive_job_id']
        if 'qstar_restore_task_id' in params:
            query_params['qstarRestoreTaskId'] = params['qstar_restore_task_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[TapeMediaInformation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_vault_by_id(self, id, **kwargs):
        """
        List details about a single Vault (External Target).
        Returns the Vault corresponding to the specified Vault Id. A Vault is equivalent to an External Target in the Cohesity Dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_vault_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Vault. (required)
        :return: Vault
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_vault_by_id_with_http_info(id, **kwargs)
        else:
            (data) = self.get_vault_by_id_with_http_info(id, **kwargs)
            return data

    def get_vault_by_id_with_http_info(self, id, **kwargs):
        """
        List details about a single Vault (External Target).
        Returns the Vault corresponding to the specified Vault Id. A Vault is equivalent to an External Target in the Cohesity Dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_vault_by_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Vault. (required)
        :return: Vault
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_vault_by_id`")

        resource_path = '/public/vaults/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Vault',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_vault_encryption_key_info(self, id, **kwargs):
        """
        Get encryption information for a Vault (External Target). A Vault is equivalent to an External Target in the Cohesity Dashboard.
        Get encryption information (such as the encryption key) for the specified Vault (External Target). To restore data to a remote Cluster (for example to support a disaster recovery scenario), you must get the encryption key of the Vault and store it outside the local source Cluster, before disaster strikes. If you have the encryption key and the local source Cluster goes down, you can restore the data to a remote Cluster from the Vault. The local source Cluster is the Cluster that archived the data on the Vault.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_vault_encryption_key_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Vault. (required)
        :return: VaultEncryptionKey
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_vault_encryption_key_info_with_http_info(id, **kwargs)
        else:
            (data) = self.get_vault_encryption_key_info_with_http_info(id, **kwargs)
            return data

    def get_vault_encryption_key_info_with_http_info(self, id, **kwargs):
        """
        Get encryption information for a Vault (External Target). A Vault is equivalent to an External Target in the Cohesity Dashboard.
        Get encryption information (such as the encryption key) for the specified Vault (External Target). To restore data to a remote Cluster (for example to support a disaster recovery scenario), you must get the encryption key of the Vault and store it outside the local source Cluster, before disaster strikes. If you have the encryption key and the local source Cluster goes down, you can restore the data to a remote Cluster from the Vault. The local source Cluster is the Cluster that archived the data on the Vault.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_vault_encryption_key_info_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Vault. (required)
        :return: VaultEncryptionKey
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vault_encryption_key_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_vault_encryption_key_info`")

        resource_path = '/public/vaults/encryptionKey/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='VaultEncryptionKey',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_vaults(self, **kwargs):
        """
        List the Vaults (External Targets) registered on the Cohesity Cluster filtered by the specified parameters.
        If no parameters are specified, all Vaults (External Targets) currently registered on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. A Vault is equivalent to an External Target in the Cohesity Dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_vaults(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool include_marked_for_removal: Specifies if Vaults that are marked for removal should be returned.
        :param int id: Specifies the id of Vault to return. If empty, all Vaults are returned.
        :param str name: Specifies the name of the Vault to return. If empty, all Vaults are returned.
        :return: list[Vault]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_vaults_with_http_info(**kwargs)
        else:
            (data) = self.get_vaults_with_http_info(**kwargs)
            return data

    def get_vaults_with_http_info(self, **kwargs):
        """
        List the Vaults (External Targets) registered on the Cohesity Cluster filtered by the specified parameters.
        If no parameters are specified, all Vaults (External Targets) currently registered on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. A Vault is equivalent to an External Target in the Cohesity Dashboard.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_vaults_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool include_marked_for_removal: Specifies if Vaults that are marked for removal should be returned.
        :param int id: Specifies the id of Vault to return. If empty, all Vaults are returned.
        :param str name: Specifies the name of the Vault to return. If empty, all Vaults are returned.
        :return: list[Vault]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['include_marked_for_removal', 'id', 'name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vaults" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/vaults'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'include_marked_for_removal' in params:
            query_params['includeMarkedForRemoval'] = params['include_marked_for_removal']
        if 'id' in params:
            query_params['id'] = params['id']
        if 'name' in params:
            query_params['name'] = params['name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Vault]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_vault(self, id, body, **kwargs):
        """
        Update a Vault (External Target).
        Update the settings of a Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard. Returns the updated Vault.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_vault(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Vault. (required)
        :param Vault body: Request to update a Vault's settings. (required)
        :return: Vault
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_vault_with_http_info(id, body, **kwargs)
        else:
            (data) = self.update_vault_with_http_info(id, body, **kwargs)
            return data

    def update_vault_with_http_info(self, id, body, **kwargs):
        """
        Update a Vault (External Target).
        Update the settings of a Vault. A Vault is equivalent to an External Target in the Cohesity Dashboard. Returns the updated Vault.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_vault_with_http_info(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Vault. (required)
        :param Vault body: Request to update a Vault's settings. (required)
        :return: Vault
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_vault" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_vault`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_vault`")

        resource_path = '/public/vaults/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Vault',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
