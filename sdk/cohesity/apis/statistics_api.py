# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class StatisticsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_entities(self, schema_name, **kwargs):
        """
        Lists the entities for the specified schema.
        An entity is an object found on the Cohesity Cluster, such as a disk or a Node. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entities(schema_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str schema_name: Specifies the entity schema to search for entities. (required)
        :param bool include_aggr_metric_sources: Specifies whether to include the sources of aggregate metrics of an entity.
        :param list[str] metric_names: Specifies the list of metric names to return such as 'kRandomIos' which corresponds to 'Random IOs' in Advanced Diagnostics of the Cohesity Dashboard.
        :return: list[EntityProto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_entities_with_http_info(schema_name, **kwargs)
        else:
            (data) = self.get_entities_with_http_info(schema_name, **kwargs)
            return data

    def get_entities_with_http_info(self, schema_name, **kwargs):
        """
        Lists the entities for the specified schema.
        An entity is an object found on the Cohesity Cluster, such as a disk or a Node. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entities_with_http_info(schema_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str schema_name: Specifies the entity schema to search for entities. (required)
        :param bool include_aggr_metric_sources: Specifies whether to include the sources of aggregate metrics of an entity.
        :param list[str] metric_names: Specifies the list of metric names to return such as 'kRandomIos' which corresponds to 'Random IOs' in Advanced Diagnostics of the Cohesity Dashboard.
        :return: list[EntityProto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_name', 'include_aggr_metric_sources', 'metric_names']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_name' is set
        if ('schema_name' not in params) or (params['schema_name'] is None):
            raise ValueError("Missing the required parameter `schema_name` when calling `get_entities`")

        resource_path = '/public/statistics/entities'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'include_aggr_metric_sources' in params:
            query_params['includeAggrMetricSources'] = params['include_aggr_metric_sources']
        if 'metric_names' in params:
            query_params['metricNames'] = params['metric_names']
        if 'schema_name' in params:
            query_params['schemaName'] = params['schema_name']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[EntityProto]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_entities_schema(self, **kwargs):
        """
        List the entity schemas filtered by the specified parameters.
        An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. If no parameters are specified, all entity schemas found on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entities_schema(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] schema_names: Specifies the list of schema names to filter by such as 'kIceboxJobVaultStats' which corresponds to 'External Target Job Stats' in Advanced Diagnostics of the Cohesity Dashboard.
        :param list[str] metric_names: Specifies the list of metric names to filter by such as 'kRandomIos' which corresponds to 'Random IOs' in Advanced Diagnostics of the Cohesity Dashboard.
        :return: list[EntitySchemaProto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_entities_schema_with_http_info(**kwargs)
        else:
            (data) = self.get_entities_schema_with_http_info(**kwargs)
            return data

    def get_entities_schema_with_http_info(self, **kwargs):
        """
        List the entity schemas filtered by the specified parameters.
        An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. If no parameters are specified, all entity schemas found on the Cohesity Cluster are returned. Specifying parameters filters the results that are returned. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entities_schema_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] schema_names: Specifies the list of schema names to filter by such as 'kIceboxJobVaultStats' which corresponds to 'External Target Job Stats' in Advanced Diagnostics of the Cohesity Dashboard.
        :param list[str] metric_names: Specifies the list of metric names to filter by such as 'kRandomIos' which corresponds to 'Random IOs' in Advanced Diagnostics of the Cohesity Dashboard.
        :return: list[EntitySchemaProto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_names', 'metric_names']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entities_schema" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/statistics/entitiesSchema'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'schema_names' in params:
            query_params['schemaNames'] = params['schema_names']
        if 'metric_names' in params:
            query_params['metricNames'] = params['metric_names']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[EntitySchemaProto]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_entity_schema_by_name(self, schema_name, **kwargs):
        """
        Get the entity schema for the specified schema.
        An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_schema_by_name(schema_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str schema_name: Name of the Schema (required)
        :return: list[EntitySchemaProto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_entity_schema_by_name_with_http_info(schema_name, **kwargs)
        else:
            (data) = self.get_entity_schema_by_name_with_http_info(schema_name, **kwargs)
            return data

    def get_entity_schema_by_name_with_http_info(self, schema_name, **kwargs):
        """
        Get the entity schema for the specified schema.
        An entity schema specifies the meta-data associated with entity such as the list of attributes and a time series of data. For example for a Disk entity, the entity schema specifies the Node that is using this Disk, the type of the Disk, and Metrics about the Disk such as Space Usage, Read IOs and Write IOs. Metrics define data points (time series data) to track over a period of time for a specific interval. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_entity_schema_by_name_with_http_info(schema_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str schema_name: Name of the Schema (required)
        :return: list[EntitySchemaProto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_entity_schema_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_name' is set
        if ('schema_name' not in params) or (params['schema_name'] is None):
            raise ValueError("Missing the required parameter `schema_name` when calling `get_entity_schema_by_name`")

        resource_path = '/public/statistics/entitiesSchema/{schemaName}'.replace('{format}', 'json')
        path_params = {}
        if 'schema_name' in params:
            path_params['schemaName'] = params['schema_name']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[EntitySchemaProto]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_time_series_stats(self, schema_name, entity_id, metric_name, start_time_msecs, **kwargs):
        """
        List a series of data points for an entity of a metric in a schema, during the specified time period.
        A Metric specifies a data point (such as CPU usage and IOPS) to track over a period of time. For example for a disk in the Cluster, you can report on the 'Disk Health' (kDiskAwaitTimeMsecs) Metric of the 'Disk Health Metrics' (kSentryDiskStats) Schema for the last week. You must specify the 'k' names as input and not the descriptive names. You must also specify the id of the entity that you are reporting on such as a Cluster, disk drive, job, etc. Get the entityId by running the GET /public/statistics/entities operation. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_time_series_stats(schema_name, entity_id, metric_name, start_time_msecs, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str schema_name: Specifies the name of entity schema such as 'kIceboxJobVaultStats'. (required)
        :param str entity_id: Specifies the id of the entity represented as a string. Get the entityId by running the GET public/statistics/entities operation. (required)
        :param str metric_name: Specifies the name of the metric such as the 'kDiskAwaitTimeMsecs' which is displayed as 'Disk Health' in Advanced Diagnostics of the Cohesity Dashboard. (required)
        :param int start_time_msecs: Specifies the start time for the series of metric data. Specify the start time as a Unix epoch Timestamp (in milliseconds). (required)
        :param str rollup_function: Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs. The following rollup functions are available: sum, average, count, max, min, median, percentile95, latest, and rate. For more information about the functions, see the Advanced Diagnostics in the Cohesity online help. If not specified, raw data is returned.
        :param int rollup_interval_secs: Specifies the time interval granularity (in seconds) for the specified rollup function. Only specify a value if Rollup function is also specified.
        :param int end_time_msecs: Specifies the end time for the series of metric data. Specify the end time as a Unix epoch Timestamp (in milliseconds). If not specified, the data points up to the current time are returned.
        :return: MetricDataBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_time_series_stats_with_http_info(schema_name, entity_id, metric_name, start_time_msecs, **kwargs)
        else:
            (data) = self.get_time_series_stats_with_http_info(schema_name, entity_id, metric_name, start_time_msecs, **kwargs)
            return data

    def get_time_series_stats_with_http_info(self, schema_name, entity_id, metric_name, start_time_msecs, **kwargs):
        """
        List a series of data points for an entity of a metric in a schema, during the specified time period.
        A Metric specifies a data point (such as CPU usage and IOPS) to track over a period of time. For example for a disk in the Cluster, you can report on the 'Disk Health' (kDiskAwaitTimeMsecs) Metric of the 'Disk Health Metrics' (kSentryDiskStats) Schema for the last week. You must specify the 'k' names as input and not the descriptive names. You must also specify the id of the entity that you are reporting on such as a Cluster, disk drive, job, etc. Get the entityId by running the GET /public/statistics/entities operation. In the Cohesity Dashboard, similar functionality is provided in Advanced Diagnostics.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_time_series_stats_with_http_info(schema_name, entity_id, metric_name, start_time_msecs, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str schema_name: Specifies the name of entity schema such as 'kIceboxJobVaultStats'. (required)
        :param str entity_id: Specifies the id of the entity represented as a string. Get the entityId by running the GET public/statistics/entities operation. (required)
        :param str metric_name: Specifies the name of the metric such as the 'kDiskAwaitTimeMsecs' which is displayed as 'Disk Health' in Advanced Diagnostics of the Cohesity Dashboard. (required)
        :param int start_time_msecs: Specifies the start time for the series of metric data. Specify the start time as a Unix epoch Timestamp (in milliseconds). (required)
        :param str rollup_function: Specifies the rollup function to apply to the data points for the time interval specified by rollupInternalSecs. The following rollup functions are available: sum, average, count, max, min, median, percentile95, latest, and rate. For more information about the functions, see the Advanced Diagnostics in the Cohesity online help. If not specified, raw data is returned.
        :param int rollup_interval_secs: Specifies the time interval granularity (in seconds) for the specified rollup function. Only specify a value if Rollup function is also specified.
        :param int end_time_msecs: Specifies the end time for the series of metric data. Specify the end time as a Unix epoch Timestamp (in milliseconds). If not specified, the data points up to the current time are returned.
        :return: MetricDataBlock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_name', 'entity_id', 'metric_name', 'start_time_msecs', 'rollup_function', 'rollup_interval_secs', 'end_time_msecs']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_time_series_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'schema_name' is set
        if ('schema_name' not in params) or (params['schema_name'] is None):
            raise ValueError("Missing the required parameter `schema_name` when calling `get_time_series_stats`")
        # verify the required parameter 'entity_id' is set
        if ('entity_id' not in params) or (params['entity_id'] is None):
            raise ValueError("Missing the required parameter `entity_id` when calling `get_time_series_stats`")
        # verify the required parameter 'metric_name' is set
        if ('metric_name' not in params) or (params['metric_name'] is None):
            raise ValueError("Missing the required parameter `metric_name` when calling `get_time_series_stats`")
        # verify the required parameter 'start_time_msecs' is set
        if ('start_time_msecs' not in params) or (params['start_time_msecs'] is None):
            raise ValueError("Missing the required parameter `start_time_msecs` when calling `get_time_series_stats`")

        resource_path = '/public/statistics/timeSeriesStats'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'rollup_function' in params:
            query_params['rollupFunction'] = params['rollup_function']
        if 'rollup_interval_secs' in params:
            query_params['rollupIntervalSecs'] = params['rollup_interval_secs']
        if 'schema_name' in params:
            query_params['schemaName'] = params['schema_name']
        if 'entity_id' in params:
            query_params['entityId'] = params['entity_id']
        if 'metric_name' in params:
            query_params['metricName'] = params['metric_name']
        if 'start_time_msecs' in params:
            query_params['startTimeMsecs'] = params['start_time_msecs']
        if 'end_time_msecs' in params:
            query_params['endTimeMsecs'] = params['end_time_msecs']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='MetricDataBlock',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
