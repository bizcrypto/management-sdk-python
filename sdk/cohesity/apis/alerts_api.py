# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class AlertsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_resolution(self, body, **kwargs):
        """
        Create an Alert Resolution.
        Create an Alert Resolution and apply it to one or more Alerts. Mark the Alerts as resolved.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_resolution(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AlertResolutionRequest body: Request to create an Alert Resolution and apply it to the specified Alerts. (required)
        :return: AlertResolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_resolution_with_http_info(body, **kwargs)
        else:
            (data) = self.create_resolution_with_http_info(body, **kwargs)
            return data

    def create_resolution_with_http_info(self, body, **kwargs):
        """
        Create an Alert Resolution.
        Create an Alert Resolution and apply it to one or more Alerts. Mark the Alerts as resolved.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_resolution_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param AlertResolutionRequest body: Request to create an Alert Resolution and apply it to the specified Alerts. (required)
        :return: AlertResolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_resolution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_resolution`")

        resource_path = '/public/alertResolutions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AlertResolution',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_alert_by_id(self, id, **kwargs):
        """
        List details about a single Alert.
        Returns the Alert object corresponding to the specified id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alert_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Unique id of the Alert to return. (required)
        :return: Alert
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_alert_by_id_with_http_info(id, **kwargs)
        else:
            (data) = self.get_alert_by_id_with_http_info(id, **kwargs)
            return data

    def get_alert_by_id_with_http_info(self, id, **kwargs):
        """
        List details about a single Alert.
        Returns the Alert object corresponding to the specified id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alert_by_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Unique id of the Alert to return. (required)
        :return: Alert
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_alert_by_id`")

        resource_path = '/public/alerts/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Alert',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_alerts(self, max_alerts, **kwargs):
        """
        List the Alerts on the Cohesity Cluster.
        Returns all Alert objects found on the Cohesity Cluster that match the filter criteria specified using parameters. The Cohesity Cluster creates an Alert when a potential problem is found or when a threshold has been exceeded on the Cohesity Cluster. If no filter parameters are specified, all Alert objects are returned. Each object provides details about the Alert such as the Status and Severity.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alerts(max_alerts, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int max_alerts: Limit the number of returned Alerts. The newest Alerts are returned. (required)
        :param list[str] alert_category_list: Filter by a list of Alert Categories such as 'kDisk', 'kNode', 'kCluster', 'kNodeHealth', 'kClusterHealth', 'kBackupRestore', 'kEncryption' and 'kArchivalRestore'.
        :param int end_date_usecs: Filter by End Date and Time by specifying a Unix epoch time in microseconds.
        :param list[str] alert_state_list: Filter by a list of Alert States such as 'kOpen' and 'kResolved'.
        :param list[int] resolution_id_list: Filter by a list of Resolution Ids.
        :param list[str] alert_id_list: Filter by a list of Alert ids.
        :param int start_date_usecs: Filter by Start Date and Time by specifying a Unix epoch time in microseconds.
        :param list[str] alert_severity_list: Filter by a list of Alert Severities such as 'kCritical', 'kWarning' and 'kInfo'.
        :param list[int] alert_type_list: Filter by a list of Alert Types.
        :return: list[Alert]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_alerts_with_http_info(max_alerts, **kwargs)
        else:
            (data) = self.get_alerts_with_http_info(max_alerts, **kwargs)
            return data

    def get_alerts_with_http_info(self, max_alerts, **kwargs):
        """
        List the Alerts on the Cohesity Cluster.
        Returns all Alert objects found on the Cohesity Cluster that match the filter criteria specified using parameters. The Cohesity Cluster creates an Alert when a potential problem is found or when a threshold has been exceeded on the Cohesity Cluster. If no filter parameters are specified, all Alert objects are returned. Each object provides details about the Alert such as the Status and Severity.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_alerts_with_http_info(max_alerts, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int max_alerts: Limit the number of returned Alerts. The newest Alerts are returned. (required)
        :param list[str] alert_category_list: Filter by a list of Alert Categories such as 'kDisk', 'kNode', 'kCluster', 'kNodeHealth', 'kClusterHealth', 'kBackupRestore', 'kEncryption' and 'kArchivalRestore'.
        :param int end_date_usecs: Filter by End Date and Time by specifying a Unix epoch time in microseconds.
        :param list[str] alert_state_list: Filter by a list of Alert States such as 'kOpen' and 'kResolved'.
        :param list[int] resolution_id_list: Filter by a list of Resolution Ids.
        :param list[str] alert_id_list: Filter by a list of Alert ids.
        :param int start_date_usecs: Filter by Start Date and Time by specifying a Unix epoch time in microseconds.
        :param list[str] alert_severity_list: Filter by a list of Alert Severities such as 'kCritical', 'kWarning' and 'kInfo'.
        :param list[int] alert_type_list: Filter by a list of Alert Types.
        :return: list[Alert]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['max_alerts', 'alert_category_list', 'end_date_usecs', 'alert_state_list', 'resolution_id_list', 'alert_id_list', 'start_date_usecs', 'alert_severity_list', 'alert_type_list']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alerts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'max_alerts' is set
        if ('max_alerts' not in params) or (params['max_alerts'] is None):
            raise ValueError("Missing the required parameter `max_alerts` when calling `get_alerts`")

        resource_path = '/public/alerts'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'alert_category_list' in params:
            query_params['alertCategoryList'] = params['alert_category_list']
        if 'end_date_usecs' in params:
            query_params['endDateUsecs'] = params['end_date_usecs']
        if 'alert_state_list' in params:
            query_params['alertStateList'] = params['alert_state_list']
        if 'resolution_id_list' in params:
            query_params['resolutionIdList'] = params['resolution_id_list']
        if 'max_alerts' in params:
            query_params['maxAlerts'] = params['max_alerts']
        if 'alert_id_list' in params:
            query_params['alertIdList'] = params['alert_id_list']
        if 'start_date_usecs' in params:
            query_params['startDateUsecs'] = params['start_date_usecs']
        if 'alert_severity_list' in params:
            query_params['alertSeverityList'] = params['alert_severity_list']
        if 'alert_type_list' in params:
            query_params['alertTypeList'] = params['alert_type_list']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[Alert]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_resolution_by_id(self, id, **kwargs):
        """
        List details about a single Alert Resolution.
        Returns the Alert Resolution object corresponding to passed in Alert Resolution Id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_resolution_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Unique id of the Alert Resolution to return. (required)
        :return: AlertResolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_resolution_by_id_with_http_info(id, **kwargs)
        else:
            (data) = self.get_resolution_by_id_with_http_info(id, **kwargs)
            return data

    def get_resolution_by_id_with_http_info(self, id, **kwargs):
        """
        List details about a single Alert Resolution.
        Returns the Alert Resolution object corresponding to passed in Alert Resolution Id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_resolution_by_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Unique id of the Alert Resolution to return. (required)
        :return: AlertResolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resolution_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_resolution_by_id`")

        resource_path = '/public/alertResolutions/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AlertResolution',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_resolutions(self, max_resolutions, **kwargs):
        """
        List the Alert Resolutions on the Cohesity Cluster.
        Returns all Alert Resolution objects found on the Cohesity Cluster that match the filter criteria specified using parameters. If no filter parameters are specified, all Alert Resolution objects are returned. Each object provides details about the Alert Resolution such as the resolution summary and details.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_resolutions(max_resolutions, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int max_resolutions: Limit the number of returned Alert Resolutions. The newest Resolutions are returned. (required)
        :param int start_date_usecs: Filter by Start Date and Time by specifying a Unix epoch time in microseconds.
        :param int end_date_usecs: Filter by End Date and Time by specifying a Unix epoch time in microseconds.
        :param list[int] resolution_id_list: Filter by a list of Alert Resolution ids.
        :param list[str] alert_id_list: Filter by a list of Alert ids.
        :return: list[AlertResolution]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_resolutions_with_http_info(max_resolutions, **kwargs)
        else:
            (data) = self.get_resolutions_with_http_info(max_resolutions, **kwargs)
            return data

    def get_resolutions_with_http_info(self, max_resolutions, **kwargs):
        """
        List the Alert Resolutions on the Cohesity Cluster.
        Returns all Alert Resolution objects found on the Cohesity Cluster that match the filter criteria specified using parameters. If no filter parameters are specified, all Alert Resolution objects are returned. Each object provides details about the Alert Resolution such as the resolution summary and details.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_resolutions_with_http_info(max_resolutions, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int max_resolutions: Limit the number of returned Alert Resolutions. The newest Resolutions are returned. (required)
        :param int start_date_usecs: Filter by Start Date and Time by specifying a Unix epoch time in microseconds.
        :param int end_date_usecs: Filter by End Date and Time by specifying a Unix epoch time in microseconds.
        :param list[int] resolution_id_list: Filter by a list of Alert Resolution ids.
        :param list[str] alert_id_list: Filter by a list of Alert ids.
        :return: list[AlertResolution]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['max_resolutions', 'start_date_usecs', 'end_date_usecs', 'resolution_id_list', 'alert_id_list']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resolutions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'max_resolutions' is set
        if ('max_resolutions' not in params) or (params['max_resolutions'] is None):
            raise ValueError("Missing the required parameter `max_resolutions` when calling `get_resolutions`")

        resource_path = '/public/alertResolutions'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start_date_usecs' in params:
            query_params['startDateUsecs'] = params['start_date_usecs']
        if 'end_date_usecs' in params:
            query_params['endDateUsecs'] = params['end_date_usecs']
        if 'max_resolutions' in params:
            query_params['maxResolutions'] = params['max_resolutions']
        if 'resolution_id_list' in params:
            query_params['resolutionIdList'] = params['resolution_id_list']
        if 'alert_id_list' in params:
            query_params['alertIdList'] = params['alert_id_list']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[AlertResolution]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_resolution(self, id, body, **kwargs):
        """
        Apply an existing Alert Resolution to additional Alerts.
        Apply an existing Alert Resolution to one or more additional Alerts. Mark those additional Alerts as resolved.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_resolution(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Unique id of the Alert Resolution to return. (required)
        :param UpdateResolutionParams body: Request to apply an existing resolution to the specified Alerts. (required)
        :return: AlertResolution
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_resolution_with_http_info(id, body, **kwargs)
        else:
            (data) = self.update_resolution_with_http_info(id, body, **kwargs)
            return data

    def update_resolution_with_http_info(self, id, body, **kwargs):
        """
        Apply an existing Alert Resolution to additional Alerts.
        Apply an existing Alert Resolution to one or more additional Alerts. Mark those additional Alerts as resolved.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_resolution_with_http_info(id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Unique id of the Alert Resolution to return. (required)
        :param UpdateResolutionParams body: Request to apply an existing resolution to the specified Alerts. (required)
        :return: AlertResolution
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_resolution" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_resolution`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_resolution`")

        resource_path = '/public/alertResolutions/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='AlertResolution',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
