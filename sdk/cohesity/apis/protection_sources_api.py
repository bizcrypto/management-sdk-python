# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ProtectionSourcesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_protection_sources_object_by_id(self, id, **kwargs):
        """
        Get details about a single Protection Source Object.
        Returns the Protection Source object corresponding to the specified id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_protection_sources_object_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Protection Source to return. (required)
        :return: ProtectionSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_protection_sources_object_by_id_with_http_info(id, **kwargs)
        else:
            (data) = self.get_protection_sources_object_by_id_with_http_info(id, **kwargs)
            return data

    def get_protection_sources_object_by_id_with_http_info(self, id, **kwargs):
        """
        Get details about a single Protection Source Object.
        Returns the Protection Source object corresponding to the specified id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_protection_sources_object_by_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Protection Source to return. (required)
        :return: ProtectionSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_protection_sources_object_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_protection_sources_object_by_id`")

        resource_path = '/public/protectionSources/objects/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProtectionSource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_protection_sources_objects(self, **kwargs):
        """
        List details about Protection Source objects.
        Returns the Protection Source objects corresponding to the specified ids.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_protection_sources_objects(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] object_ids: Specifies the ids of the Protection Source objects to return.
        :return: list[ProtectionSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_protection_sources_objects_with_http_info(**kwargs)
        else:
            (data) = self.get_protection_sources_objects_with_http_info(**kwargs)
            return data

    def get_protection_sources_objects_with_http_info(self, **kwargs):
        """
        List details about Protection Source objects.
        Returns the Protection Source objects corresponding to the specified ids.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_protection_sources_objects_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] object_ids: Specifies the ids of the Protection Source objects to return.
        :return: list[ProtectionSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['object_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_protection_sources_objects" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/protectionSources/objects'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'object_ids' in params:
            query_params['objectIds'] = params['object_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProtectionSource]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_application_servers(self, **kwargs):
        """
        Returns the registered Application Servers and their Object subtrees.
        Given the root node id of a Protection Source tree, returns the list of Application Servers registered under that tree based on the filters.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_application_servers(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int protection_sources_root_node_id: Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server.
        :param str environment: Specifies the environment such as 'kPhysical' or 'kVMware' of the Protection Source tree. overrideDescription: true Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param str application: Specifies the application such as 'kSQL', 'kExchange' running on the Protection Source. overrideDescription: true Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :return: list[RegisteredApplicationServer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_application_servers_with_http_info(**kwargs)
        else:
            (data) = self.list_application_servers_with_http_info(**kwargs)
            return data

    def list_application_servers_with_http_info(self, **kwargs):
        """
        Returns the registered Application Servers and their Object subtrees.
        Given the root node id of a Protection Source tree, returns the list of Application Servers registered under that tree based on the filters.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_application_servers_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int protection_sources_root_node_id: Specifies the Protection Source Id of the root node of a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server.
        :param str environment: Specifies the environment such as 'kPhysical' or 'kVMware' of the Protection Source tree. overrideDescription: true Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param str application: Specifies the application such as 'kSQL', 'kExchange' running on the Protection Source. overrideDescription: true Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :return: list[RegisteredApplicationServer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['protection_sources_root_node_id', 'environment', 'application']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_application_servers" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/protectionSources/applicationServers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'protection_sources_root_node_id' in params:
            query_params['protectionSourcesRootNodeId'] = params['protection_sources_root_node_id']
        if 'environment' in params:
            query_params['environment'] = params['environment']
        if 'application' in params:
            query_params['application'] = params['application']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[RegisteredApplicationServer]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_protected_vms(self, environment, id, **kwargs):
        """
        Returns the list of protected VMs in a registered Protection Source tree.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_protected_vms(environment, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str environment: Specifies the environment type of the registered Protection Source such as 'kVMware', 'kSQL', 'kView' 'kPhysical', 'kPuppeteer', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'. For example, set this parameter to 'kVMware' if the registered Protection Source is of 'kVMware' environment type. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. (required)
        :param int id: Specifies the Id of a registered Protection Source of the type given in environment. (required)
        :return: list[ProtectedVmInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_protected_vms_with_http_info(environment, id, **kwargs)
        else:
            (data) = self.list_protected_vms_with_http_info(environment, id, **kwargs)
            return data

    def list_protected_vms_with_http_info(self, environment, id, **kwargs):
        """
        Returns the list of protected VMs in a registered Protection Source tree.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_protected_vms_with_http_info(environment, id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str environment: Specifies the environment type of the registered Protection Source such as 'kVMware', 'kSQL', 'kView' 'kPhysical', 'kPuppeteer', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'. For example, set this parameter to 'kVMware' if the registered Protection Source is of 'kVMware' environment type. Supported environment types include 'kView', 'kSQL', 'kVMware', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp, 'kGenericNas, 'kHyperV', 'kAcropolis', 'kAzure'. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. (required)
        :param int id: Specifies the Id of a registered Protection Source of the type given in environment. (required)
        :return: list[ProtectedVmInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment', 'id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_protected_vms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment' is set
        if ('environment' not in params) or (params['environment'] is None):
            raise ValueError("Missing the required parameter `environment` when calling `list_protected_vms`")
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_protected_vms`")

        resource_path = '/public/protectionSources/protectedVms'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'environment' in params:
            query_params['environment'] = params['environment']
        if 'id' in params:
            query_params['id'] = params['id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProtectedVmInfo]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_protection_sources(self, **kwargs):
        """
        Returns the registered Protection Sources and their Object subtrees.
        If no parameters are specified, all Protection Sources that are registered on the Cohesity Cluster are returned. In addition, an Object subtree gathered from each Source is returned. For example, the Cohesity Cluster interrogates a Source VMware vCenter Server and creates an hierarchical Object subtree that mirrors the Inventory tree on vCenter Server. The contents of the Object tree is returned as a \"nodes\" hierarchy of \"protectionSource\"s. Specifying parameters can alter the results that are returned.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_protection_sources(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Return the Object subtree for the passed in Protection Source id.
        :param list[str] exclude_types: Filter out the Object types (and their subtrees) that match the passed in types such as 'kVCenter', 'kFolder', 'kDatacenter', 'kComputeResource', 'kResourcePool', 'kDatastore', 'kHostSystem', 'kVirtualMachine', etc. For example, set this parameter to 'kResourcePool' to exclude Resource Pool Objects from being returned.
        :param bool include_datastores: Set this parameter to true to also return kDatastore object types found in the Source in addition to their Object subtrees. By default, datastores are not returned.
        :param bool include_networks: Set this parameter to true to also return kNetwork object types found in the Source in addition to their Object subtrees. By default, network objects are not returned.
        :param bool include_vm_folders: Set this parameter to true to also return kVMFolder object types found in the Source in addition to their Object subtrees. By default, VM folder objects are not returned.
        :param list[str] environments: Return only Protection Sources that match the passed in environment type such as 'kVMware', 'kSQL', 'kView' 'kPhysical', 'kPuppeteer', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'. For example, set this parameter to 'kVMware' to only return the Sources (and their Object subtrees) found in the 'kVMware' (VMware vCenter Server) environment.  NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param str environment: This field is deprecated. Use environments instead. deprecated: true
        :return: list[ProtectionSourceNode]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_protection_sources_with_http_info(**kwargs)
        else:
            (data) = self.list_protection_sources_with_http_info(**kwargs)
            return data

    def list_protection_sources_with_http_info(self, **kwargs):
        """
        Returns the registered Protection Sources and their Object subtrees.
        If no parameters are specified, all Protection Sources that are registered on the Cohesity Cluster are returned. In addition, an Object subtree gathered from each Source is returned. For example, the Cohesity Cluster interrogates a Source VMware vCenter Server and creates an hierarchical Object subtree that mirrors the Inventory tree on vCenter Server. The contents of the Object tree is returned as a \"nodes\" hierarchy of \"protectionSource\"s. Specifying parameters can alter the results that are returned.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_protection_sources_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Return the Object subtree for the passed in Protection Source id.
        :param list[str] exclude_types: Filter out the Object types (and their subtrees) that match the passed in types such as 'kVCenter', 'kFolder', 'kDatacenter', 'kComputeResource', 'kResourcePool', 'kDatastore', 'kHostSystem', 'kVirtualMachine', etc. For example, set this parameter to 'kResourcePool' to exclude Resource Pool Objects from being returned.
        :param bool include_datastores: Set this parameter to true to also return kDatastore object types found in the Source in addition to their Object subtrees. By default, datastores are not returned.
        :param bool include_networks: Set this parameter to true to also return kNetwork object types found in the Source in addition to their Object subtrees. By default, network objects are not returned.
        :param bool include_vm_folders: Set this parameter to true to also return kVMFolder object types found in the Source in addition to their Object subtrees. By default, VM folder objects are not returned.
        :param list[str] environments: Return only Protection Sources that match the passed in environment type such as 'kVMware', 'kSQL', 'kView' 'kPhysical', 'kPuppeteer', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'. For example, set this parameter to 'kVMware' to only return the Sources (and their Object subtrees) found in the 'kVMware' (VMware vCenter Server) environment.  NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param str environment: This field is deprecated. Use environments instead. deprecated: true
        :return: list[ProtectionSourceNode]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'exclude_types', 'include_datastores', 'include_networks', 'include_vm_folders', 'environments', 'environment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_protection_sources" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/protectionSources'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'exclude_types' in params:
            query_params['excludeTypes'] = params['exclude_types']
        if 'include_datastores' in params:
            query_params['includeDatastores'] = params['include_datastores']
        if 'include_networks' in params:
            query_params['includeNetworks'] = params['include_networks']
        if 'include_vm_folders' in params:
            query_params['includeVMFolders'] = params['include_vm_folders']
        if 'environments' in params:
            query_params['environments'] = params['environments']
        if 'environment' in params:
            query_params['environment'] = params['environment']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProtectionSourceNode]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_protection_sources_registration_info(self, **kwargs):
        """
        
        Returns the registration and protection information of the registered Protection Sources.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_protection_sources_registration_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] view_names: Return only the Views whose names are specified in the list.
        :param list[str] environments: Return only Protection Sources that match the passed in environment type such as 'kVMware', 'kSQL', 'kView' 'kPhysical', 'kPuppeteer', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'. For example, set this parameter to 'kVMware' to only return the Sources (and their Object subtrees) found in the 'kVMware' (VMware vCenter Server) environment.  NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param list[int] ids: Return only the registered root nodes whose Ids are given in the list.
        :return: GetRegistrationInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_protection_sources_registration_info_with_http_info(**kwargs)
        else:
            (data) = self.list_protection_sources_registration_info_with_http_info(**kwargs)
            return data

    def list_protection_sources_registration_info_with_http_info(self, **kwargs):
        """
        
        Returns the registration and protection information of the registered Protection Sources.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_protection_sources_registration_info_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] view_names: Return only the Views whose names are specified in the list.
        :param list[str] environments: Return only Protection Sources that match the passed in environment type such as 'kVMware', 'kSQL', 'kView' 'kPhysical', 'kPuppeteer', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'. For example, set this parameter to 'kVMware' to only return the Sources (and their Object subtrees) found in the 'kVMware' (VMware vCenter Server) environment.  NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param list[int] ids: Return only the registered root nodes whose Ids are given in the list.
        :return: GetRegistrationInfoResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['view_names', 'environments', 'ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_protection_sources_registration_info" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/protectionSources/registrationInfo'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'view_names' in params:
            query_params['viewNames'] = params['view_names']
        if 'environments' in params:
            query_params['environments'] = params['environments']
        if 'ids' in params:
            query_params['ids'] = params['ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='GetRegistrationInfoResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_protection_sources_root_nodes(self, **kwargs):
        """
        Returns the top level (root) Protection Sources with registration information.
        Returns the root Protection Sources and the registration information for each of these Sources.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_protection_sources_root_nodes(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Return the registration information for the Protection Source id.
        :param list[str] environments: Return only the root Protection Sources that match the passed in environment type such as 'kVMware', 'kSQL', 'kView', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis' 'kAzure'. For example, set this parameter to 'kVMware' to only return the root Protection Sources found in the 'kVMware' (VMware vCenter) environment. In addition, the registration information for each Source is returned.  NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param str environment: This field is deprecated. Use environments instead. deprecated: true
        :return: list[ProtectionSourceNode]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_protection_sources_root_nodes_with_http_info(**kwargs)
        else:
            (data) = self.list_protection_sources_root_nodes_with_http_info(**kwargs)
            return data

    def list_protection_sources_root_nodes_with_http_info(self, **kwargs):
        """
        Returns the top level (root) Protection Sources with registration information.
        Returns the root Protection Sources and the registration information for each of these Sources.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_protection_sources_root_nodes_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Return the registration information for the Protection Source id.
        :param list[str] environments: Return only the root Protection Sources that match the passed in environment type such as 'kVMware', 'kSQL', 'kView', 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis' 'kAzure'. For example, set this parameter to 'kVMware' to only return the root Protection Sources found in the 'kVMware' (VMware vCenter) environment. In addition, the registration information for each Source is returned.  NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param str environment: This field is deprecated. Use environments instead. deprecated: true
        :return: list[ProtectionSourceNode]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'environments', 'environment']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_protection_sources_root_nodes" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/protectionSources/rootNodes'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'id' in params:
            query_params['id'] = params['id']
        if 'environments' in params:
            query_params['environments'] = params['environments']
        if 'environment' in params:
            query_params['environment'] = params['environment']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProtectionSourceNode]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_sql_aag_hosts_and_databases(self, sql_protection_source_ids, **kwargs):
        """
        Returns the registered Protection Sources and their Object subtrees.
        Given a list of Protection Source Ids registered as SQL servers, returns AAGs found and the databases in AAG(Always on Availablity Group).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_sql_aag_hosts_and_databases(sql_protection_source_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] sql_protection_source_ids: Specifies a list of Ids of Protection Sources registered as SQL servers. These sources may have one or more SQL databases in them. Some of them may be part of AAGs(Always on Availability Group). (required)
        :return: list[SqlAagHostAndDatabases]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_sql_aag_hosts_and_databases_with_http_info(sql_protection_source_ids, **kwargs)
        else:
            (data) = self.list_sql_aag_hosts_and_databases_with_http_info(sql_protection_source_ids, **kwargs)
            return data

    def list_sql_aag_hosts_and_databases_with_http_info(self, sql_protection_source_ids, **kwargs):
        """
        Returns the registered Protection Sources and their Object subtrees.
        Given a list of Protection Source Ids registered as SQL servers, returns AAGs found and the databases in AAG(Always on Availablity Group).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_sql_aag_hosts_and_databases_with_http_info(sql_protection_source_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] sql_protection_source_ids: Specifies a list of Ids of Protection Sources registered as SQL servers. These sources may have one or more SQL databases in them. Some of them may be part of AAGs(Always on Availability Group). (required)
        :return: list[SqlAagHostAndDatabases]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sql_protection_source_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_sql_aag_hosts_and_databases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sql_protection_source_ids' is set
        if ('sql_protection_source_ids' not in params) or (params['sql_protection_source_ids'] is None):
            raise ValueError("Missing the required parameter `sql_protection_source_ids` when calling `list_sql_aag_hosts_and_databases`")

        resource_path = '/public/protectionSources/sqlAagHostsAndDatabases'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'sql_protection_source_ids' in params:
            query_params['sqlProtectionSourceIds'] = params['sql_protection_source_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[SqlAagHostAndDatabases]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def list_virtual_machines(self, **kwargs):
        """
        Returns the Virtual Machines in a vCenter Server.
        Returns all Virtual Machines found in all the vCenter Servers registered on the Cohesity Cluster that match the filter criteria specified using parameters. If an id is specified, only VMs found in the specified vCenter Server are returned. Only VM Objects are returned. Other VMware Objects such as datacenters are not returned.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_virtual_machines(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int v_center_id: Limit the VMs returned to the set of VMs found in a specific vCenter Server. Pass in the root Protection Source id for the vCenter Server to search for VMs.
        :param list[str] names: Limit the returned VMs to those that exactly match the passed in VM name. To match multiple VM names, specify multiple \"names\" parameters that each specify a single VM name. The string must exactly match the passed in VM name and wild cards are not supported.
        :param list[str] uuids: Limit the returned VMs to those that exactly match the passed in UUIDs.
        :param bool protected: Limit the returned VMs to those that have been protected by a Protection Job. By default, both protected and unprotected VMs are returned.
        :return: list[ProtectionSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.list_virtual_machines_with_http_info(**kwargs)
        else:
            (data) = self.list_virtual_machines_with_http_info(**kwargs)
            return data

    def list_virtual_machines_with_http_info(self, **kwargs):
        """
        Returns the Virtual Machines in a vCenter Server.
        Returns all Virtual Machines found in all the vCenter Servers registered on the Cohesity Cluster that match the filter criteria specified using parameters. If an id is specified, only VMs found in the specified vCenter Server are returned. Only VM Objects are returned. Other VMware Objects such as datacenters are not returned.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.list_virtual_machines_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int v_center_id: Limit the VMs returned to the set of VMs found in a specific vCenter Server. Pass in the root Protection Source id for the vCenter Server to search for VMs.
        :param list[str] names: Limit the returned VMs to those that exactly match the passed in VM name. To match multiple VM names, specify multiple \"names\" parameters that each specify a single VM name. The string must exactly match the passed in VM name and wild cards are not supported.
        :param list[str] uuids: Limit the returned VMs to those that exactly match the passed in UUIDs.
        :param bool protected: Limit the returned VMs to those that have been protected by a Protection Job. By default, both protected and unprotected VMs are returned.
        :return: list[ProtectionSource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['v_center_id', 'names', 'uuids', 'protected']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_virtual_machines" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/protectionSources/virtualMachines'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'v_center_id' in params:
            query_params['vCenterId'] = params['v_center_id']
        if 'names' in params:
            query_params['names'] = params['names']
        if 'uuids' in params:
            query_params['uuids'] = params['uuids']
        if 'protected' in params:
            query_params['protected'] = params['protected']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProtectionSource]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def refresh_protection_source_by_id(self, id, **kwargs):
        """
        Refresh the Object hierarchy of the Protection Sources tree.
        Force an immediate refresh between the specified Protection Source tree on the Cohesity Cluster and the Inventory tree in the associated vCenter Server.  For example if a new VM is added to the vCenter Server, after a refresh, a new Protection Source node for this VM is added to the Protection Sources tree.  Success indicates the forced refresh has been started. The amount of time to complete a refresh depends on the size of the Object hierarchies.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.refresh_protection_source_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the root node of the Protection Sources tree to refresh.  Force a refresh of the Object hierarchy for the passed in Protection Sources Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.refresh_protection_source_by_id_with_http_info(id, **kwargs)
        else:
            (data) = self.refresh_protection_source_by_id_with_http_info(id, **kwargs)
            return data

    def refresh_protection_source_by_id_with_http_info(self, id, **kwargs):
        """
        Refresh the Object hierarchy of the Protection Sources tree.
        Force an immediate refresh between the specified Protection Source tree on the Cohesity Cluster and the Inventory tree in the associated vCenter Server.  For example if a new VM is added to the vCenter Server, after a refresh, a new Protection Source node for this VM is added to the Protection Sources tree.  Success indicates the forced refresh has been started. The amount of time to complete a refresh depends on the size of the Object hierarchies.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.refresh_protection_source_by_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Id of the root node of the Protection Sources tree to refresh.  Force a refresh of the Object hierarchy for the passed in Protection Sources Id. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_protection_source_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `refresh_protection_source_by_id`")

        resource_path = '/public/protectionSources/refresh/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def register_application_servers(self, body, **kwargs):
        """
        Register a Protection Source as running one or more Application Servers like Microsoft SQL servers or Microsoft Exchange servers.
        Registering Application Servers will help Cohesity Cluster such that any application specific data can be backed up.  Returns the Protection Source registered upon success.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_application_servers(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RegisterApplicationServersParameters body: Request to register Application Servers in a Protection Source. (required)
        :return: ProtectionSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.register_application_servers_with_http_info(body, **kwargs)
        else:
            (data) = self.register_application_servers_with_http_info(body, **kwargs)
            return data

    def register_application_servers_with_http_info(self, body, **kwargs):
        """
        Register a Protection Source as running one or more Application Servers like Microsoft SQL servers or Microsoft Exchange servers.
        Registering Application Servers will help Cohesity Cluster such that any application specific data can be backed up.  Returns the Protection Source registered upon success.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_application_servers_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RegisterApplicationServersParameters body: Request to register Application Servers in a Protection Source. (required)
        :return: ProtectionSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_application_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_application_servers`")

        resource_path = '/public/protectionSources/applicationServers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProtectionSource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def register_protection_source(self, body, **kwargs):
        """
        Register a Protection Source.
        Register a Protection Source on the Cohesity Cluster. It could be the root node of a vCenter Server or a physcical server.  Returns the newly registered Protection Source upon success.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_protection_source(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RegisterProtectionSourceParameters body: Request to register a protection source. (required)
        :return: ProtectionSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.register_protection_source_with_http_info(body, **kwargs)
        else:
            (data) = self.register_protection_source_with_http_info(body, **kwargs)
            return data

    def register_protection_source_with_http_info(self, body, **kwargs):
        """
        Register a Protection Source.
        Register a Protection Source on the Cohesity Cluster. It could be the root node of a vCenter Server or a physcical server.  Returns the newly registered Protection Source upon success.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.register_protection_source_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RegisterProtectionSourceParameters body: Request to register a protection source. (required)
        :return: ProtectionSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_protection_source" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_protection_source`")

        resource_path = '/public/protectionSources/register'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProtectionSource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def unregister_application_servers(self, id, **kwargs):
        """
        Unregister Application Servers like Microsoft SQL servers or Microsoft Exchange servers running on a Protection Source.
        Unregistering Application Servers will fail if the Protection Source is currently being backed up.  Returns the Protection Source whose Application Servers are unregistered upon success.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unregister_application_servers(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Protection Source to unregister the Application Servers. If the Protection Source is currently being backed up, unregister operation will fail. (required)
        :return: ProtectionSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.unregister_application_servers_with_http_info(id, **kwargs)
        else:
            (data) = self.unregister_application_servers_with_http_info(id, **kwargs)
            return data

    def unregister_application_servers_with_http_info(self, id, **kwargs):
        """
        Unregister Application Servers like Microsoft SQL servers or Microsoft Exchange servers running on a Protection Source.
        Unregistering Application Servers will fail if the Protection Source is currently being backed up.  Returns the Protection Source whose Application Servers are unregistered upon success.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.unregister_application_servers_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id of the Protection Source to unregister the Application Servers. If the Protection Source is currently being backed up, unregister operation will fail. (required)
        :return: ProtectionSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unregister_application_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `unregister_application_servers`")

        resource_path = '/public/protectionSources/applicationServers/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProtectionSource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def update_application_servers(self, body, **kwargs):
        """
        Modifies the registration parameters of Application Servers in a Protection Source.
        Returns the Protection Source whose registration parameters of its Application Servers are modified upon success.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_application_servers(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UpdateApplicationServerParameters body: Request to modify the Application Servers registration of a Protection Source. (required)
        :return: ProtectionSource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_application_servers_with_http_info(body, **kwargs)
        else:
            (data) = self.update_application_servers_with_http_info(body, **kwargs)
            return data

    def update_application_servers_with_http_info(self, body, **kwargs):
        """
        Modifies the registration parameters of Application Servers in a Protection Source.
        Returns the Protection Source whose registration parameters of its Application Servers are modified upon success.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_application_servers_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UpdateApplicationServerParameters body: Request to modify the Application Servers registration of a Protection Source. (required)
        :return: ProtectionSource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_application_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_application_servers`")

        resource_path = '/public/protectionSources/applicationServers'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ProtectionSource',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def upgrade_physical_agents(self, **kwargs):
        """
        Initiate a request to upgrade Cohesity agents on one or more Physical Servers registered on the Cohesity Cluster.
        If the request is successful, the Cohesity agents on the specified Physical Servers are upgraded to the agent release currently available from this Cohesity Cluster. For example if the Cluster is upgraded from 3.7.1 to 4.0, the agents on the specified Physical Servers can be upgraded to 4.0 using this POST operation. To get the agentIds to pass into this operation, call GET /public/protectionSources with the environment set to 'KPhysical'. In addition this GET operation returns the agentUpgradability field, that indicates if an agent can be upgraded. Use the agentUpgradability field to determine which Physical Servers to upgrade using this POST /public/physicalAgents/upgrade operation.  WARNING: Only agents at a particular Cohesity release can be upgraded using this operation. See the Cohesity online help for details.  Returns the status of the upgrade initiation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upgrade_physical_agents(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UpgradePhysicalServerAgents body: Request to upgrade agents on Physical Servers.
        :return: UpgradePhysicalAgentsMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.upgrade_physical_agents_with_http_info(**kwargs)
        else:
            (data) = self.upgrade_physical_agents_with_http_info(**kwargs)
            return data

    def upgrade_physical_agents_with_http_info(self, **kwargs):
        """
        Initiate a request to upgrade Cohesity agents on one or more Physical Servers registered on the Cohesity Cluster.
        If the request is successful, the Cohesity agents on the specified Physical Servers are upgraded to the agent release currently available from this Cohesity Cluster. For example if the Cluster is upgraded from 3.7.1 to 4.0, the agents on the specified Physical Servers can be upgraded to 4.0 using this POST operation. To get the agentIds to pass into this operation, call GET /public/protectionSources with the environment set to 'KPhysical'. In addition this GET operation returns the agentUpgradability field, that indicates if an agent can be upgraded. Use the agentUpgradability field to determine which Physical Servers to upgrade using this POST /public/physicalAgents/upgrade operation.  WARNING: Only agents at a particular Cohesity release can be upgraded using this operation. See the Cohesity online help for details.  Returns the status of the upgrade initiation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.upgrade_physical_agents_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param UpgradePhysicalServerAgents body: Request to upgrade agents on Physical Servers.
        :return: UpgradePhysicalAgentsMessage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upgrade_physical_agents" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/physicalAgents/upgrade'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='UpgradePhysicalAgentsMessage',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
