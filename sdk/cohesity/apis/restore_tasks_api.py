# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RestoreTasksApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def cancel_restore_task(self, id, **kwargs):
        """
        Cancel a recover or clone task with specified id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_restore_task(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id for the Restore Task. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cancel_restore_task_with_http_info(id, **kwargs)
        else:
            (data) = self.cancel_restore_task_with_http_info(id, **kwargs)
            return data

    def cancel_restore_task_with_http_info(self, id, **kwargs):
        """
        Cancel a recover or clone task with specified id.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_restore_task_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id for the Restore Task. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_restore_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `cancel_restore_task`")

        resource_path = '/public/restore/tasks/cancel/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_applications_clone_task(self, body, **kwargs):
        """
        Create a Restore Task for cloning Applications like SQL Databases.
        Returns the created Restore Task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_applications_clone_task(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationsRestoreTaskRequest body: Request to create a Restore Task for cloning Applications like SQL DB. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_applications_clone_task_with_http_info(body, **kwargs)
        else:
            (data) = self.create_applications_clone_task_with_http_info(body, **kwargs)
            return data

    def create_applications_clone_task_with_http_info(self, body, **kwargs):
        """
        Create a Restore Task for cloning Applications like SQL Databases.
        Returns the created Restore Task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_applications_clone_task_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationsRestoreTaskRequest body: Request to create a Restore Task for cloning Applications like SQL DB. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_applications_clone_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_applications_clone_task`")

        resource_path = '/public/restore/applicationsClone'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RestoreTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_applications_recover_task(self, body, **kwargs):
        """
        Create a Restore Task for recovering Applications like SQL Databases.
        Returns the created Restore Task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_applications_recover_task(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationsRestoreTaskRequest body: Request to create a Restore Task for recovering Applications like SQL DB. volumes to mount points. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_applications_recover_task_with_http_info(body, **kwargs)
        else:
            (data) = self.create_applications_recover_task_with_http_info(body, **kwargs)
            return data

    def create_applications_recover_task_with_http_info(self, body, **kwargs):
        """
        Create a Restore Task for recovering Applications like SQL Databases.
        Returns the created Restore Task.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_applications_recover_task_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ApplicationsRestoreTaskRequest body: Request to create a Restore Task for recovering Applications like SQL DB. volumes to mount points. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_applications_recover_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_applications_recover_task`")

        resource_path = '/public/restore/applicationsRecover'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RestoreTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_clone_task(self, body, **kwargs):
        """
        Create a Restore Task for cloning VMs or a View.
        Returns the created Restore Task that clones VMs or a View.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_clone_task(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CloneTaskRequest body: Request to create a Restore Task for cloning VMs or a View. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_clone_task_with_http_info(body, **kwargs)
        else:
            (data) = self.create_clone_task_with_http_info(body, **kwargs)
            return data

    def create_clone_task_with_http_info(self, body, **kwargs):
        """
        Create a Restore Task for cloning VMs or a View.
        Returns the created Restore Task that clones VMs or a View.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_clone_task_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CloneTaskRequest body: Request to create a Restore Task for cloning VMs or a View. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_clone_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_clone_task`")

        resource_path = '/public/restore/clone'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RestoreTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_recover_task(self, body, **kwargs):
        """
        Create a Restore Task for recovering VMs or instantly mounting volumes.
        Returns the created Restore Task. This operation returns the following types of Restore Tasks: 1) A Restore Task that recovers VMs back to the original location or a new location. 2) A Restore Task that mounts the volumes of a Server (such as a VM or Physical Server) onto the specified target system. The Snapshots of the Server that contains the volumes that are mounted is determined by Array of Objects. The content of the Server is available from the mount point for the Granular Level Recovery (GLR) of application data. For example recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.  NOTE: Volumes are mounted \"instantly\" if the Snapshot is stored locally on the Cohesity Cluster. If the Snapshot is archival target, it will take longer because it must be retrieved.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_recover_task(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RecoverTaskRequest body: Request to create a Restore Task for recovering VMs or mounting volumes to mount points. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_recover_task_with_http_info(body, **kwargs)
        else:
            (data) = self.create_recover_task_with_http_info(body, **kwargs)
            return data

    def create_recover_task_with_http_info(self, body, **kwargs):
        """
        Create a Restore Task for recovering VMs or instantly mounting volumes.
        Returns the created Restore Task. This operation returns the following types of Restore Tasks: 1) A Restore Task that recovers VMs back to the original location or a new location. 2) A Restore Task that mounts the volumes of a Server (such as a VM or Physical Server) onto the specified target system. The Snapshots of the Server that contains the volumes that are mounted is determined by Array of Objects. The content of the Server is available from the mount point for the Granular Level Recovery (GLR) of application data. For example recovering Microsoft Exchange data using Kroll Ontrack® PowerControls™.  NOTE: Volumes are mounted \"instantly\" if the Snapshot is stored locally on the Cohesity Cluster. If the Snapshot is archival target, it will take longer because it must be retrieved.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_recover_task_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RecoverTaskRequest body: Request to create a Restore Task for recovering VMs or mounting volumes to mount points. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_recover_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_recover_task`")

        resource_path = '/public/restore/recover'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RestoreTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def create_restore_files_task(self, body, **kwargs):
        """
        Create a Restore Task for recovering files and folders.
        Returns the created Restore Task that recovers files and folders.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_restore_files_task(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RestoreFilesTaskRequest body: Request to create a Restore Task for recovering files or folders. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_restore_files_task_with_http_info(body, **kwargs)
        else:
            (data) = self.create_restore_files_task_with_http_info(body, **kwargs)
            return data

    def create_restore_files_task_with_http_info(self, body, **kwargs):
        """
        Create a Restore Task for recovering files and folders.
        Returns the created Restore Task that recovers files and folders.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_restore_files_task_with_http_info(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param RestoreFilesTaskRequest body: Request to create a Restore Task for recovering files or folders. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_restore_files_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_restore_files_task`")

        resource_path = '/public/restore/files'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RestoreTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_file_snapshots_information(self, cluster_incarnation_id, source_id, filename, job_id, cluster_id, **kwargs):
        """
        Get the information about snapshots that contain the specified file or folder. In addition, information about the file or folder is provided.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_file_snapshots_information(cluster_incarnation_id, source_id, filename, job_id, cluster_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cluster_incarnation_id: Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. This field is required. (required)
        :param int source_id: Specifies the id of the Protection Source object (such as a VM) to search. When a Job Run executes, snapshots of the specified Protection Source object are captured. This operation searches the snapshots of the object for the file or folder. This field is required. (required)
        :param str filename: Specifies the name of the file or folder to find in the snapshots. This field is required. (required)
        :param int job_id: Specifies the id of the Job that captured the snapshots. These snapshots are searched for the specified files or folders. This field is required. (required)
        :param int cluster_id: Specifies the Cohesity Cluster id where the Job was created. This field is required. (required)
        :return: list[FileSnapshotInformation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_file_snapshots_information_with_http_info(cluster_incarnation_id, source_id, filename, job_id, cluster_id, **kwargs)
        else:
            (data) = self.get_file_snapshots_information_with_http_info(cluster_incarnation_id, source_id, filename, job_id, cluster_id, **kwargs)
            return data

    def get_file_snapshots_information_with_http_info(self, cluster_incarnation_id, source_id, filename, job_id, cluster_id, **kwargs):
        """
        Get the information about snapshots that contain the specified file or folder. In addition, information about the file or folder is provided.
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_file_snapshots_information_with_http_info(cluster_incarnation_id, source_id, filename, job_id, cluster_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int cluster_incarnation_id: Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created. This field is required. (required)
        :param int source_id: Specifies the id of the Protection Source object (such as a VM) to search. When a Job Run executes, snapshots of the specified Protection Source object are captured. This operation searches the snapshots of the object for the file or folder. This field is required. (required)
        :param str filename: Specifies the name of the file or folder to find in the snapshots. This field is required. (required)
        :param int job_id: Specifies the id of the Job that captured the snapshots. These snapshots are searched for the specified files or folders. This field is required. (required)
        :param int cluster_id: Specifies the Cohesity Cluster id where the Job was created. This field is required. (required)
        :return: list[FileSnapshotInformation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_incarnation_id', 'source_id', 'filename', 'job_id', 'cluster_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_file_snapshots_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cluster_incarnation_id' is set
        if ('cluster_incarnation_id' not in params) or (params['cluster_incarnation_id'] is None):
            raise ValueError("Missing the required parameter `cluster_incarnation_id` when calling `get_file_snapshots_information`")
        # verify the required parameter 'source_id' is set
        if ('source_id' not in params) or (params['source_id'] is None):
            raise ValueError("Missing the required parameter `source_id` when calling `get_file_snapshots_information`")
        # verify the required parameter 'filename' is set
        if ('filename' not in params) or (params['filename'] is None):
            raise ValueError("Missing the required parameter `filename` when calling `get_file_snapshots_information`")
        # verify the required parameter 'job_id' is set
        if ('job_id' not in params) or (params['job_id'] is None):
            raise ValueError("Missing the required parameter `job_id` when calling `get_file_snapshots_information`")
        # verify the required parameter 'cluster_id' is set
        if ('cluster_id' not in params) or (params['cluster_id'] is None):
            raise ValueError("Missing the required parameter `cluster_id` when calling `get_file_snapshots_information`")

        resource_path = '/public/restore/files/snapshotsInformation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'cluster_incarnation_id' in params:
            query_params['clusterIncarnationId'] = params['cluster_incarnation_id']
        if 'source_id' in params:
            query_params['sourceId'] = params['source_id']
        if 'filename' in params:
            query_params['filename'] = params['filename']
        if 'job_id' in params:
            query_params['jobId'] = params['job_id']
        if 'cluster_id' in params:
            query_params['clusterId'] = params['cluster_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[FileSnapshotInformation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_restore_task_by_id(self, id, **kwargs):
        """
        List details about a single Restore Task.
        Returns the Restore Task corresponding to the specified Restore Task id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_restore_task_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id for the Restore Task. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_restore_task_by_id_with_http_info(id, **kwargs)
        else:
            (data) = self.get_restore_task_by_id_with_http_info(id, **kwargs)
            return data

    def get_restore_task_by_id_with_http_info(self, id, **kwargs):
        """
        List details about a single Restore Task.
        Returns the Restore Task corresponding to the specified Restore Task id.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_restore_task_by_id_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Specifies a unique id for the Restore Task. (required)
        :return: RestoreTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_restore_task_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_restore_task_by_id`")

        resource_path = '/public/restore/tasks/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RestoreTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_restore_tasks(self, **kwargs):
        """
        List the Restore Tasks filtered by the specified parameters.
        If no parameters are specified, all Restore Tasks found on the Cohesity Cluster are returned. Both running and completed Restore Tasks are reported. Specifying parameters filters the results that are returned.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_restore_tasks(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int end_time_usecs: Filter by an end time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the end time is the current time.
        :param int page_count: Specifies the number of completed Restore Tasks to return in the response for pagination purposes. Running Restore Tasks are always returned. The newest completed Restore Tasks are returned.
        :param list[str] task_types: Filter by the types of Restore Tasks such as 'kRecoverVMs', 'kCloneVMs', 'kCloneView' or 'kMountVolumes'.
        :param list[int] task_ids: Filter by a list of Restore Task ids.
        :param int start_time_usecs: Filter by a start time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the start time is creation time of the Cohesity Cluster.
        :return: list[RestoreTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_restore_tasks_with_http_info(**kwargs)
        else:
            (data) = self.get_restore_tasks_with_http_info(**kwargs)
            return data

    def get_restore_tasks_with_http_info(self, **kwargs):
        """
        List the Restore Tasks filtered by the specified parameters.
        If no parameters are specified, all Restore Tasks found on the Cohesity Cluster are returned. Both running and completed Restore Tasks are reported. Specifying parameters filters the results that are returned.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_restore_tasks_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int end_time_usecs: Filter by an end time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the end time is the current time.
        :param int page_count: Specifies the number of completed Restore Tasks to return in the response for pagination purposes. Running Restore Tasks are always returned. The newest completed Restore Tasks are returned.
        :param list[str] task_types: Filter by the types of Restore Tasks such as 'kRecoverVMs', 'kCloneVMs', 'kCloneView' or 'kMountVolumes'.
        :param list[int] task_ids: Filter by a list of Restore Task ids.
        :param int start_time_usecs: Filter by a start time specified as a Unix epoch Timestamp (in microseconds). All Restore Tasks (both completed and running) on the Cohesity Cluster that started after the specified start time but before the specified end time are returned. If not set, the start time is creation time of the Cohesity Cluster.
        :return: list[RestoreTask]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['end_time_usecs', 'page_count', 'task_types', 'task_ids', 'start_time_usecs']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_restore_tasks" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/restore/tasks'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'end_time_usecs' in params:
            query_params['endTimeUsecs'] = params['end_time_usecs']
        if 'page_count' in params:
            query_params['pageCount'] = params['page_count']
        if 'task_types' in params:
            query_params['taskTypes'] = params['task_types']
        if 'task_ids' in params:
            query_params['taskIds'] = params['task_ids']
        if 'start_time_usecs' in params:
            query_params['startTimeUsecs'] = params['start_time_usecs']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[RestoreTask]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_vm_volumes_information(self, **kwargs):
        """
        Get information about the logical volumes found in a VM.
        All fields must be specified for this operation. To get values for these fields, invoke the GET /public/restore/objects operation. A specific Job Run is defined by the jobRunId, startedTimeUsecs, and attemptNumber fields.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_vm_volumes_information(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int original_job_id: Specifies the id for the Protection Job that originally captured the snapshots of the original object. If the object was backed up on a Primary Cluster replicated to this Cohesity Cluster, and a new Inactive Job is created, this field still contains the id of the original Job and NOT the id of the new Inactive Job. This field is used in combination with the clusterId and clusterIncarnationId to uniquely identify a Job.
        :param bool supported_volumes_only: Specifies to return only supported volumes information. Unsupported volumes are not returned if this flag is set to true. Default is false.
        :param int job_id: Specifies the Job id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job.
        :param int cluster_id: Specifies the Cohesity Cluster id where the Job was created.
        :param int cluster_incarnation_id: Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created.
        :param int job_run_id: Specifies the id of the Job Run that captured the snapshot.
        :param int started_time_usecs: Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds).
        :param int attempt_number: Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3.
        :param int source_id: Specifies the id of the VM object to search for volumes.
        :return: list[VmVolumesInformation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_vm_volumes_information_with_http_info(**kwargs)
        else:
            (data) = self.get_vm_volumes_information_with_http_info(**kwargs)
            return data

    def get_vm_volumes_information_with_http_info(self, **kwargs):
        """
        Get information about the logical volumes found in a VM.
        All fields must be specified for this operation. To get values for these fields, invoke the GET /public/restore/objects operation. A specific Job Run is defined by the jobRunId, startedTimeUsecs, and attemptNumber fields.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_vm_volumes_information_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int original_job_id: Specifies the id for the Protection Job that originally captured the snapshots of the original object. If the object was backed up on a Primary Cluster replicated to this Cohesity Cluster, and a new Inactive Job is created, this field still contains the id of the original Job and NOT the id of the new Inactive Job. This field is used in combination with the clusterId and clusterIncarnationId to uniquely identify a Job.
        :param bool supported_volumes_only: Specifies to return only supported volumes information. Unsupported volumes are not returned if this flag is set to true. Default is false.
        :param int job_id: Specifies the Job id for the Protection Job that is currently associated with the object. If the object was backed up on current Cohesity Cluster, this field contains the id for the Job that captured this backup object. If the object was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object is now associated with new Inactive Job, and this field contains the id of the new Inactive Job.
        :param int cluster_id: Specifies the Cohesity Cluster id where the Job was created.
        :param int cluster_incarnation_id: Specifies the incarnation id of the Cohesity Cluster where the Job was created. An incarnation id is generated when a Cohesity Cluster is initially created.
        :param int job_run_id: Specifies the id of the Job Run that captured the snapshot.
        :param int started_time_usecs: Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds).
        :param int attempt_number: Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3.
        :param int source_id: Specifies the id of the VM object to search for volumes.
        :return: list[VmVolumesInformation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['original_job_id', 'supported_volumes_only', 'job_id', 'cluster_id', 'cluster_incarnation_id', 'job_run_id', 'started_time_usecs', 'attempt_number', 'source_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vm_volumes_information" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/restore/vms/volumesInformation'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'original_job_id' in params:
            query_params['originalJobId'] = params['original_job_id']
        if 'supported_volumes_only' in params:
            query_params['supportedVolumesOnly'] = params['supported_volumes_only']
        if 'job_id' in params:
            query_params['jobId'] = params['job_id']
        if 'cluster_id' in params:
            query_params['clusterId'] = params['cluster_id']
        if 'cluster_incarnation_id' in params:
            query_params['clusterIncarnationId'] = params['cluster_incarnation_id']
        if 'job_run_id' in params:
            query_params['jobRunId'] = params['job_run_id']
        if 'started_time_usecs' in params:
            query_params['startedTimeUsecs'] = params['started_time_usecs']
        if 'attempt_number' in params:
            query_params['attemptNumber'] = params['attempt_number']
        if 'source_id' in params:
            query_params['sourceId'] = params['source_id']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[VmVolumesInformation]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def search_objects(self, **kwargs):
        """
        Find backup objects that match the specified search and filter criteria on the Cohesity Cluster.
        If no search pattern or filter parameters are specified, all backup objects currently found on the Cohesity Cluster are returned. Only leaf objects that have been protected by a Job are returned such as VMs, Views and databases. Specify a search pattern or parameters to filter the results that are returned.  The term \"items\" below refers to leaf backup objects such as VMs, Views and databases.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_objects(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] operating_systems: Filter by the Operating Systems running on VMs and Physical Servers. This filter is applicable only to VMs and physical servers.
        :param int owner_entity_id: Filter objects by the Entity id of the owner VM. For example, if a ownerEntityId is provided while searching for SQL databases, only SQL databases belonging to the VM with the specified id are returned. ownerEntityId is only significant if application is set to SQL.
        :param list[int] job_ids: Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed.
        :param list[str] environments: Filter by environment types such as 'kVMware', 'kView', 'kSQL', 'kPuppeteer', 'kPhysical', 'kPure' 'kNetapp' 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'. Only items from the specified environment types are returned. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param int end_time_usecs: Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned.
        :param int page_count: Limit the number of items to return in the response for pagination purposes.
        :param int start_index: Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount.
        :param str application: Filter by application when the environment type is kSQL. For example, if SQL is specified the SQL databases are returned.
        :param str search: Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \"vm\" or \"123\" both match the item name of \"vm-123\".
        :param list[int] registered_source_ids: Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned.
        :param list[int] view_box_ids: Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned.
        :param int start_time_usecs: Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned.
        :return: ObjectSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_objects_with_http_info(**kwargs)
        else:
            (data) = self.search_objects_with_http_info(**kwargs)
            return data

    def search_objects_with_http_info(self, **kwargs):
        """
        Find backup objects that match the specified search and filter criteria on the Cohesity Cluster.
        If no search pattern or filter parameters are specified, all backup objects currently found on the Cohesity Cluster are returned. Only leaf objects that have been protected by a Job are returned such as VMs, Views and databases. Specify a search pattern or parameters to filter the results that are returned.  The term \"items\" below refers to leaf backup objects such as VMs, Views and databases.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_objects_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] operating_systems: Filter by the Operating Systems running on VMs and Physical Servers. This filter is applicable only to VMs and physical servers.
        :param int owner_entity_id: Filter objects by the Entity id of the owner VM. For example, if a ownerEntityId is provided while searching for SQL databases, only SQL databases belonging to the VM with the specified id are returned. ownerEntityId is only significant if application is set to SQL.
        :param list[int] job_ids: Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed.
        :param list[str] environments: Filter by environment types such as 'kVMware', 'kView', 'kSQL', 'kPuppeteer', 'kPhysical', 'kPure' 'kNetapp' 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'. Only items from the specified environment types are returned. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param int end_time_usecs: Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned.
        :param int page_count: Limit the number of items to return in the response for pagination purposes.
        :param int start_index: Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount.
        :param str application: Filter by application when the environment type is kSQL. For example, if SQL is specified the SQL databases are returned.
        :param str search: Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \"vm\" or \"123\" both match the item name of \"vm-123\".
        :param list[int] registered_source_ids: Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned.
        :param list[int] view_box_ids: Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned.
        :param int start_time_usecs: Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned.
        :return: ObjectSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['operating_systems', 'owner_entity_id', 'job_ids', 'environments', 'end_time_usecs', 'page_count', 'start_index', 'application', 'search', 'registered_source_ids', 'view_box_ids', 'start_time_usecs']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_objects" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/restore/objects'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'operating_systems' in params:
            query_params['operatingSystems'] = params['operating_systems']
        if 'owner_entity_id' in params:
            query_params['ownerEntityId'] = params['owner_entity_id']
        if 'job_ids' in params:
            query_params['jobIds'] = params['job_ids']
        if 'environments' in params:
            query_params['environments'] = params['environments']
        if 'end_time_usecs' in params:
            query_params['endTimeUsecs'] = params['end_time_usecs']
        if 'page_count' in params:
            query_params['pageCount'] = params['page_count']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'application' in params:
            query_params['application'] = params['application']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'registered_source_ids' in params:
            query_params['registeredSourceIds'] = params['registered_source_ids']
        if 'view_box_ids' in params:
            query_params['viewBoxIds'] = params['view_box_ids']
        if 'start_time_usecs' in params:
            query_params['startTimeUsecs'] = params['start_time_usecs']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ObjectSearchResults',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def search_restored_files(self, **kwargs):
        """
        Search for files and folders to recover that match the specified search and filter criteria on the Cohesity Cluster.
        Use the files and folders returned by this operation to populate the list of files and folders to recover in the POST /public/restore/files operation. If no search pattern or filter parameters are specified, all files and folders currently found on the Cohesity Cluster are returned. Specify a search pattern or parameters to filter the results that are returned.  The term \"items\" below refers to files and folders that are found in the source objects (such as VMs).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_restored_files(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] environments: Filter by environment types such as 'kVMware', 'kView', 'kSQL', 'kPuppeteer', 'kPhysical', 'kPure' 'kNetapp' or 'kGenericNas'. Only items from the specified environment types are returned. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param int start_index: Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount.
        :param int page_count: Limit the number of items to return in the response for pagination purposes.
        :param list[int] job_ids: Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed.
        :param list[int] registered_source_ids: Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned.
        :param int start_time_usecs: Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned.
        :param int end_time_usecs: Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned.
        :param list[int] source_ids: Filter by source ids. Only files and folders found in the listed sources (such as VMs) are returned.
        :param bool folder_only: Filter by folders or files. If true, only folders are returned. If false, only files are returned. If not specified, both files and folders are returned.
        :param str search: Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \"vm\" or \"123\" both match the item name of \"vm-123\".
        :param list[int] view_box_ids: Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned.
        :return: FileSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_restored_files_with_http_info(**kwargs)
        else:
            (data) = self.search_restored_files_with_http_info(**kwargs)
            return data

    def search_restored_files_with_http_info(self, **kwargs):
        """
        Search for files and folders to recover that match the specified search and filter criteria on the Cohesity Cluster.
        Use the files and folders returned by this operation to populate the list of files and folders to recover in the POST /public/restore/files operation. If no search pattern or filter parameters are specified, all files and folders currently found on the Cohesity Cluster are returned. Specify a search pattern or parameters to filter the results that are returned.  The term \"items\" below refers to files and folders that are found in the source objects (such as VMs).

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_restored_files_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] environments: Filter by environment types such as 'kVMware', 'kView', 'kSQL', 'kPuppeteer', 'kPhysical', 'kPure' 'kNetapp' or 'kGenericNas'. Only items from the specified environment types are returned. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param int start_index: Specifies an index number that can be used to return subsets of items in multiple requests. Break up the items to return into multiple requests by setting pageCount and using startIndex to return a subsets of items. For example, set startIndex to 0 to get the first set of items for the first request. Increment startIndex by pageCount to get the next set of items for a next request. Continue until all items are returned and therefore the total number of returned items is equal to totalCount.
        :param int page_count: Limit the number of items to return in the response for pagination purposes.
        :param list[int] job_ids: Filter by a list of Protection Job ids. Only items backed up by the specified Jobs are listed.
        :param list[int] registered_source_ids: Filter by a list of Registered Sources ids. Only items from the listed Registered Sources are returned.
        :param int start_time_usecs: Filter by backup completion time by specifying a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned.
        :param int end_time_usecs: Filter by backup completion time by specify a backup completion start and end times. Specified as a Unix epoch Timestamp (in microseconds). Only items created by backups that completed between the specified start and end times are returned.
        :param list[int] source_ids: Filter by source ids. Only files and folders found in the listed sources (such as VMs) are returned.
        :param bool folder_only: Filter by folders or files. If true, only folders are returned. If false, only files are returned. If not specified, both files and folders are returned.
        :param str search: Filter by searching for sub-strings in the item name. The specified string can match any part of the item name. For example: \"vm\" or \"123\" both match the item name of \"vm-123\".
        :param list[int] view_box_ids: Filter by a list of Domains (View Boxes) ids. Only items stored in the listed Domains (View Boxes) are returned.
        :return: FileSearchResults
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environments', 'start_index', 'page_count', 'job_ids', 'registered_source_ids', 'start_time_usecs', 'end_time_usecs', 'source_ids', 'folder_only', 'search', 'view_box_ids']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_restored_files" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/restore/files'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'environments' in params:
            query_params['environments'] = params['environments']
        if 'start_index' in params:
            query_params['startIndex'] = params['start_index']
        if 'page_count' in params:
            query_params['pageCount'] = params['page_count']
        if 'job_ids' in params:
            query_params['jobIds'] = params['job_ids']
        if 'registered_source_ids' in params:
            query_params['registeredSourceIds'] = params['registered_source_ids']
        if 'start_time_usecs' in params:
            query_params['startTimeUsecs'] = params['start_time_usecs']
        if 'end_time_usecs' in params:
            query_params['endTimeUsecs'] = params['end_time_usecs']
        if 'source_ids' in params:
            query_params['sourceIds'] = params['source_ids']
        if 'folder_only' in params:
            query_params['folderOnly'] = params['folder_only']
        if 'search' in params:
            query_params['search'] = params['search']
        if 'view_box_ids' in params:
            query_params['viewBoxIds'] = params['view_box_ids']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='FileSearchResults',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
