# coding: utf-8

"""
    Cohesity REST API

    This API provides operations for interfacing with the Cohesity Cluster. NOTE: To view the documentation on the responses, click 'Model' next to 'Example Value' and keep clicking to expand the hierarchy.

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ReportsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_data_transfer_from_vaults_report_request(self, **kwargs):
        """
        Get summary statistics about transferring data from Vaults (External Targets) to this Cohesity Cluster.
        A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster is stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_data_transfer_from_vaults_report_request(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_time_msecs: Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days.
        :param int end_time_msecs: Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days.
        :param list[int] vault_ids: Filter by a list of Vault ids.
        :param str output_format: Specifies the format for the output such as 'csv' or 'json'. If not specified, the json format is returned. If 'csv' is specified, a comma-separated list with a heading row is returned.
        :return: DataTransferFromVaultsSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_data_transfer_from_vaults_report_request_with_http_info(**kwargs)
        else:
            (data) = self.get_data_transfer_from_vaults_report_request_with_http_info(**kwargs)
            return data

    def get_data_transfer_from_vaults_report_request_with_http_info(self, **kwargs):
        """
        Get summary statistics about transferring data from Vaults (External Targets) to this Cohesity Cluster.
        A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster is stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_data_transfer_from_vaults_report_request_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int start_time_msecs: Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days.
        :param int end_time_msecs: Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days.
        :param list[int] vault_ids: Filter by a list of Vault ids.
        :param str output_format: Specifies the format for the output such as 'csv' or 'json'. If not specified, the json format is returned. If 'csv' is specified, a comma-separated list with a heading row is returned.
        :return: DataTransferFromVaultsSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_time_msecs', 'end_time_msecs', 'vault_ids', 'output_format']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_transfer_from_vaults_report_request" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/reports/dataTransferFromVaults'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'start_time_msecs' in params:
            query_params['startTimeMsecs'] = params['start_time_msecs']
        if 'end_time_msecs' in params:
            query_params['endTimeMsecs'] = params['end_time_msecs']
        if 'vault_ids' in params:
            query_params['vaultIds'] = params['vault_ids']
        if 'output_format' in params:
            query_params['outputFormat'] = params['output_format']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataTransferFromVaultsSummaryResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_data_transfer_to_vaults_report_request(self, **kwargs):
        """
        Get summary statistics about transferring data from the Cohesity Cluster to Vaults (External Targets).
        A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_data_transfer_to_vaults_report_request(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] vault_ids: Filter by a list of Vault ids.
        :param str output_format: Specifies the format for the output such as 'csv' or 'json'. If not specified, the json format is returned. If 'csv' is specified, a comma-separated list with a heading row is returned.
        :param int start_time_msecs: Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days.
        :param int end_time_msecs: Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days.
        :return: DataTransferToVaultsSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_data_transfer_to_vaults_report_request_with_http_info(**kwargs)
        else:
            (data) = self.get_data_transfer_to_vaults_report_request_with_http_info(**kwargs)
            return data

    def get_data_transfer_to_vaults_report_request_with_http_info(self, **kwargs):
        """
        Get summary statistics about transferring data from the Cohesity Cluster to Vaults (External Targets).
        A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_data_transfer_to_vaults_report_request_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] vault_ids: Filter by a list of Vault ids.
        :param str output_format: Specifies the format for the output such as 'csv' or 'json'. If not specified, the json format is returned. If 'csv' is specified, a comma-separated list with a heading row is returned.
        :param int start_time_msecs: Filter by a start time. Specify the start time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days.
        :param int end_time_msecs: Filter by end time. Specify the end time as a Unix epoch Timestamp (in milliseconds). If startTimeMsecs and endTimeMsecs are not specified, the time period is the last 7 days.
        :return: DataTransferToVaultsSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['vault_ids', 'output_format', 'start_time_msecs', 'end_time_msecs']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_data_transfer_to_vaults_report_request" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/reports/dataTransferToVaults'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'vault_ids' in params:
            query_params['vaultIds'] = params['vault_ids']
        if 'output_format' in params:
            query_params['outputFormat'] = params['output_format']
        if 'start_time_msecs' in params:
            query_params['startTimeMsecs'] = params['start_time_msecs']
        if 'end_time_msecs' in params:
            query_params['endTimeMsecs'] = params['end_time_msecs']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='DataTransferToVaultsSummaryResponse',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_protection_sources_job_runs_report_request(self, protection_source_ids, **kwargs):
        """
        Get protection details about the specified list of leaf Protection Source Objects (such as a VMs).
        Returns the Snapshots that contain backups of the specified Protection Source Objects and match the specified filter criteria.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_protection_sources_job_runs_report_request(protection_source_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] protection_source_ids: Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshots of the specified Protection Source Objects are returned. (required)
        :param list[str] environments: Filter by a list of environment types such as 'kVMware', 'kView', 'kSQL' 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'. Snapshots of leaf Protection Source Objects for the specified environment types are returned. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param str output_format: Specifies the format for the output such as 'cvs' or 'json'. If not specified, the json format is returned. If 'csv' is specified, a comma-separated list with a heading row is returned.
        :param int page_count: Specifies the number of Snapshots to return in the response for pagination purposes. Used in combination with the paginationCookie in the response to return multiple sets of Snapshots.
        :param list[str] run_status: Filter by a list of run statuses such as 'kRunning', 'kSuccess', 'kFailure' etc. Snapshots of Job Runs with the specified run statuses are reported. 'kSuccess' indicates that the Job Run was successful. 'kRunning' indicates that the Job Run is currently running. 'kWarning' indicates that the Job Run was successful but warnings were issued. 'kCancelled' indicates that the Job Run was canceled. 'kError' indicates the Job Run encountered an error and did not run to completion.
        :param list[int] job_ids: Filter by a list of Job ids. Snapshots for the specified Protection Jobs are listed.
        :param int start_time_usecs: Filter by a start time. Snapshots that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds).
        :param int end_time_usecs: Filter by a end time. Snapshots that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds).
        :return: list[ProtectionSourcesJobRunsReportElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_protection_sources_job_runs_report_request_with_http_info(protection_source_ids, **kwargs)
        else:
            (data) = self.get_protection_sources_job_runs_report_request_with_http_info(protection_source_ids, **kwargs)
            return data

    def get_protection_sources_job_runs_report_request_with_http_info(self, protection_source_ids, **kwargs):
        """
        Get protection details about the specified list of leaf Protection Source Objects (such as a VMs).
        Returns the Snapshots that contain backups of the specified Protection Source Objects and match the specified filter criteria.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_protection_sources_job_runs_report_request_with_http_info(protection_source_ids, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] protection_source_ids: Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshots of the specified Protection Source Objects are returned. (required)
        :param list[str] environments: Filter by a list of environment types such as 'kVMware', 'kView', 'kSQL' 'kPuppeteer', 'kPhysical', 'kPure', 'kNetapp', 'kGenericNas', 'kHyperV', 'kAcropolis', or 'kAzure'. Snapshots of leaf Protection Source Objects for the specified environment types are returned. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :param str output_format: Specifies the format for the output such as 'cvs' or 'json'. If not specified, the json format is returned. If 'csv' is specified, a comma-separated list with a heading row is returned.
        :param int page_count: Specifies the number of Snapshots to return in the response for pagination purposes. Used in combination with the paginationCookie in the response to return multiple sets of Snapshots.
        :param list[str] run_status: Filter by a list of run statuses such as 'kRunning', 'kSuccess', 'kFailure' etc. Snapshots of Job Runs with the specified run statuses are reported. 'kSuccess' indicates that the Job Run was successful. 'kRunning' indicates that the Job Run is currently running. 'kWarning' indicates that the Job Run was successful but warnings were issued. 'kCancelled' indicates that the Job Run was canceled. 'kError' indicates the Job Run encountered an error and did not run to completion.
        :param list[int] job_ids: Filter by a list of Job ids. Snapshots for the specified Protection Jobs are listed.
        :param int start_time_usecs: Filter by a start time. Snapshots that started after the specified time are returned. Specify the start time as a Unix epoch Timestamp (in microseconds).
        :param int end_time_usecs: Filter by a end time. Snapshots that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds).
        :return: list[ProtectionSourcesJobRunsReportElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['protection_source_ids', 'environments', 'output_format', 'page_count', 'run_status', 'job_ids', 'start_time_usecs', 'end_time_usecs']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_protection_sources_job_runs_report_request" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'protection_source_ids' is set
        if ('protection_source_ids' not in params) or (params['protection_source_ids'] is None):
            raise ValueError("Missing the required parameter `protection_source_ids` when calling `get_protection_sources_job_runs_report_request`")

        resource_path = '/public/reports/protectionSourcesJobRuns'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'environments' in params:
            query_params['environments'] = params['environments']
        if 'protection_source_ids' in params:
            query_params['protectionSourceIds'] = params['protection_source_ids']
        if 'output_format' in params:
            query_params['outputFormat'] = params['output_format']
        if 'page_count' in params:
            query_params['pageCount'] = params['page_count']
        if 'run_status' in params:
            query_params['runStatus'] = params['run_status']
        if 'job_ids' in params:
            query_params['jobIds'] = params['job_ids']
        if 'start_time_usecs' in params:
            query_params['startTimeUsecs'] = params['start_time_usecs']
        if 'end_time_usecs' in params:
            query_params['endTimeUsecs'] = params['end_time_usecs']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProtectionSourcesJobRunsReportElement]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_protection_sources_jobs_summary_report_request(self, **kwargs):
        """
        Get Job Run (Snapshot) summary statistics about the leaf Protection Sources Objects that match the specified filter criteria.
        For example, if two Job ids are passed in, Snapshot summary statistics about all the leaf Objects that have been protected by the two specified Jobs are reported. For example if a top level registered Source id is passed in, summary statistics about all the Snapshots backing up leaf Objects in the specified Source are reported.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_protection_sources_jobs_summary_report_request(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] protection_source_ids: Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshot summary statistics for the listed Protection Source Objects are reported.
        :param list[str] statuses: Filter by a list of run statuses. 'kSuccess' indicates that the Job Run was successful. 'kRunning' indicates that the Job Run is currently running. 'kWarning' indicates that the Job Run was successful but warnings were issued. 'kCancelled' indicates that the Job Run was canceled. 'kError' indicates the Job Run encountered an error and did not run to completion.
        :param str output_format: Specifies the format for the output such as 'csv' or 'json'. If not specified, the json format is returned. If 'csv' is specified, a comma-separated list with a heading row is returned.
        :param int registered_source_id: Specifies an id of a top level Registered Source such as a vCenter Server. If specified, Snapshot summary statistics for all the leaf Protection Sources (such as VMs) that are children of this Registered Source are reported. NOTE: If specified, filtering by other fields is not supported.
        :param list[int] job_ids: Filter by a list of Job ids. Snapshots summary statistics for the specified Protection Jobs are reported.
        :param int start_time_usecs: Filter by a start time. Snapshot summary statistics for Job Runs that started after the specified time are reported. Specify the start time as a Unix epoch Timestamp (in microseconds).
        :param int end_time_usecs: Filter by end time. Snapshot summary statistics for Job Runs that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds).
        :param list[str] environments: Filter by a list of environment types such as 'kVMware', 'kView', 'kSQL' 'kPuppeteer', 'kPhysical', 'kPure', or 'kNetapp'. Snapshot summary statistics about the leaf Protection Source Objects of specified environment types are reported. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :return: list[ProtectionSourcesSummaryStats]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_protection_sources_jobs_summary_report_request_with_http_info(**kwargs)
        else:
            (data) = self.get_protection_sources_jobs_summary_report_request_with_http_info(**kwargs)
            return data

    def get_protection_sources_jobs_summary_report_request_with_http_info(self, **kwargs):
        """
        Get Job Run (Snapshot) summary statistics about the leaf Protection Sources Objects that match the specified filter criteria.
        For example, if two Job ids are passed in, Snapshot summary statistics about all the leaf Objects that have been protected by the two specified Jobs are reported. For example if a top level registered Source id is passed in, summary statistics about all the Snapshots backing up leaf Objects in the specified Source are reported.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_protection_sources_jobs_summary_report_request_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[int] protection_source_ids: Filter by a list of leaf Protection Sources Objects (such as VMs). Snapshot summary statistics for the listed Protection Source Objects are reported.
        :param list[str] statuses: Filter by a list of run statuses. 'kSuccess' indicates that the Job Run was successful. 'kRunning' indicates that the Job Run is currently running. 'kWarning' indicates that the Job Run was successful but warnings were issued. 'kCancelled' indicates that the Job Run was canceled. 'kError' indicates the Job Run encountered an error and did not run to completion.
        :param str output_format: Specifies the format for the output such as 'csv' or 'json'. If not specified, the json format is returned. If 'csv' is specified, a comma-separated list with a heading row is returned.
        :param int registered_source_id: Specifies an id of a top level Registered Source such as a vCenter Server. If specified, Snapshot summary statistics for all the leaf Protection Sources (such as VMs) that are children of this Registered Source are reported. NOTE: If specified, filtering by other fields is not supported.
        :param list[int] job_ids: Filter by a list of Job ids. Snapshots summary statistics for the specified Protection Jobs are reported.
        :param int start_time_usecs: Filter by a start time. Snapshot summary statistics for Job Runs that started after the specified time are reported. Specify the start time as a Unix epoch Timestamp (in microseconds).
        :param int end_time_usecs: Filter by end time. Snapshot summary statistics for Job Runs that ended before the specified time are returned. Specify the end time as a Unix epoch Timestamp (in microseconds).
        :param list[str] environments: Filter by a list of environment types such as 'kVMware', 'kView', 'kSQL' 'kPuppeteer', 'kPhysical', 'kPure', or 'kNetapp'. Snapshot summary statistics about the leaf Protection Source Objects of specified environment types are reported. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
        :return: list[ProtectionSourcesSummaryStats]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['protection_source_ids', 'statuses', 'output_format', 'registered_source_id', 'job_ids', 'start_time_usecs', 'end_time_usecs', 'environments']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_protection_sources_jobs_summary_report_request" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/reports/protectionSourcesJobsSummary'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'protection_source_ids' in params:
            query_params['protectionSourceIds'] = params['protection_source_ids']
        if 'statuses' in params:
            query_params['statuses'] = params['statuses']
        if 'output_format' in params:
            query_params['outputFormat'] = params['output_format']
        if 'registered_source_id' in params:
            query_params['registeredSourceId'] = params['registered_source_id']
        if 'job_ids' in params:
            query_params['jobIds'] = params['job_ids']
        if 'start_time_usecs' in params:
            query_params['startTimeUsecs'] = params['start_time_usecs']
        if 'end_time_usecs' in params:
            query_params['endTimeUsecs'] = params['end_time_usecs']
        if 'environments' in params:
            query_params['environments'] = params['environments']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ProtectionSourcesSummaryStats]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def get_restore_summary_by_object_type_report(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_restore_summary_by_object_type_report(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str recover_task_name: Specifies the recover task name.
        :param str status: Specifies the overall status of the Restore Task to filter. 'kReadyToSchedule' indicates the Restore Task is waiting to be scheduled. 'kProgressMonitorCreated' indicates the progress monitor for the Restore Task has been created. 'kRetrievedFromArchive' indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. 'kAdmitted' indicates the task has been admitted. After a task has been admitted, its status does not move back to 'kReadyToSchedule' state even if it is rescheduled. 'kInProgress' indicates that the Restore Task is in progress. 'kFinishingProgressMonitor' indicates that the Restore Task is finishing its progress monitoring. 'kFinished' indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task.
        :param str output_format: Specifies the format for the output such as 'csv' or 'json'. If not specified, the json format is returned. If 'csv' is specified, a comma-separated list with a heading row is returned.
        :param int start_time_usecs: Filter by a start time specified as a Unix epoch Timestamp (in microseconds).
        :param int end_time_usecs: Filter by an end time specified as a Unix epoch Timestamp (in microseconds).
        :param str type: Specify the object type to filter with. Specifies the type of Restore Task.  'kRecoverVMs' specifies a Restore Task that recovers VMs. 'kCloneVMs' specifies a Restore Task that clones VMs. 'kCloneView' specifies a Restore Task that clones a View. 'kMountVolumes' specifies a Restore Task that mounts volumes. 'kRestoreFiles' specifies a Restore Task that recovers files and folders.
        :param str user_name: Specify the user name to filter with.
        :param list[str] recovered_from: Specifies the targets from which the recovery happend.
        :return: list[RestoreSourceSummaryByObjectTypeElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_restore_summary_by_object_type_report_with_http_info(**kwargs)
        else:
            (data) = self.get_restore_summary_by_object_type_report_with_http_info(**kwargs)
            return data

    def get_restore_summary_by_object_type_report_with_http_info(self, **kwargs):
        """
        
        

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_restore_summary_by_object_type_report_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str recover_task_name: Specifies the recover task name.
        :param str status: Specifies the overall status of the Restore Task to filter. 'kReadyToSchedule' indicates the Restore Task is waiting to be scheduled. 'kProgressMonitorCreated' indicates the progress monitor for the Restore Task has been created. 'kRetrievedFromArchive' indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. 'kAdmitted' indicates the task has been admitted. After a task has been admitted, its status does not move back to 'kReadyToSchedule' state even if it is rescheduled. 'kInProgress' indicates that the Restore Task is in progress. 'kFinishingProgressMonitor' indicates that the Restore Task is finishing its progress monitoring. 'kFinished' indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task.
        :param str output_format: Specifies the format for the output such as 'csv' or 'json'. If not specified, the json format is returned. If 'csv' is specified, a comma-separated list with a heading row is returned.
        :param int start_time_usecs: Filter by a start time specified as a Unix epoch Timestamp (in microseconds).
        :param int end_time_usecs: Filter by an end time specified as a Unix epoch Timestamp (in microseconds).
        :param str type: Specify the object type to filter with. Specifies the type of Restore Task.  'kRecoverVMs' specifies a Restore Task that recovers VMs. 'kCloneVMs' specifies a Restore Task that clones VMs. 'kCloneView' specifies a Restore Task that clones a View. 'kMountVolumes' specifies a Restore Task that mounts volumes. 'kRestoreFiles' specifies a Restore Task that recovers files and folders.
        :param str user_name: Specify the user name to filter with.
        :param list[str] recovered_from: Specifies the targets from which the recovery happend.
        :return: list[RestoreSourceSummaryByObjectTypeElement]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['recover_task_name', 'status', 'output_format', 'start_time_usecs', 'end_time_usecs', 'type', 'user_name', 'recovered_from']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_restore_summary_by_object_type_report" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/public/reports/restoreSummaryByObjectType'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'recover_task_name' in params:
            query_params['recoverTaskName'] = params['recover_task_name']
        if 'status' in params:
            query_params['status'] = params['status']
        if 'output_format' in params:
            query_params['outputFormat'] = params['output_format']
        if 'start_time_usecs' in params:
            query_params['startTimeUsecs'] = params['start_time_usecs']
        if 'end_time_usecs' in params:
            query_params['endTimeUsecs'] = params['end_time_usecs']
        if 'type' in params:
            query_params['type'] = params['type']
        if 'user_name' in params:
            query_params['userName'] = params['user_name']
        if 'recovered_from' in params:
            query_params['recoveredFrom'] = params['recovered_from']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[RestoreSourceSummaryByObjectTypeElement]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
